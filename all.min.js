function Field() {
    this.get = function(attr) {
        return "picture" === attr ? "https://lh3.googleusercontent.com/-vFpM2A5N2Wg/AAAAAAAAAAI/AAAAAAAABh8/cRg-oqAL8mQ/s120-c/photo.jpg" : "name" === attr ? "Young Park" : "createdAt" === attr ? new Date : ""
    }
}
var ovModule = angular.module("oneverse", ["ionic", "pascalprecht.translate", "door3.css", "ksSwiper", "ngCordova", "ngStorage", "ngIOS9UIWebViewPatch", "checklist-model", "parse-angular", "parse-angular.enhance", "angular.filter", "truncate"]),
    isDevice = ionic.Platform.isIOS() || ionic.Platform.isAndroid(),
    isIOS = ionic.Platform.isIOS(),
    isTablet = !1,
    platformIs = isIOS ? "ios" : "android",
    uuidIs = null,
    deviceLanguage = null,
    bypassIds = [];
isDevice && (console.log = function() {}), Array.min = function(array) {
    return Math.min.apply(Math, array)
}, Array.max = function(array) {
    return Math.max.apply(Math, array)
}, ovModule.config(function($stateProvider, $urlRouterProvider, $httpProvider, $ionicConfigProvider) {
    $httpProvider.defaults.useXDomain = !0, delete $httpProvider.defaults.headers.common["X-Requested-With"], $ionicConfigProvider.views.transition("none"), $ionicConfigProvider.views.forwardCache(!0), $stateProvider.state("home", {
        url: "/",
        templateUrl: "templates/home.html",
        controller: "homeCtrl"
    }).state("books", {
        url: "/books",
        templateUrl: "templates/books.html",
        controller: "booksCtrl"
    }).state("share", {
        url: "/share",
        templateUrl: "templates/share.html",
        controller: "shareCtrl"
    }).state("tag", {
        url: "/tag",
        templateUrl: "templates/tag.html",
        controller: "tagCtrl"
    }).state("tags", {
        url: "/tags",
        templateUrl: "templates/tags.html",
        controller: "tagsCtrl"
    }).state("tagverse", {
        url: "/tagverse/:tagId",
        templateUrl: "templates/tagverse.html",
        controller: "tagverseCtrl"
    }).state("login", {
        url: "/login",
        templateUrl: "templates/login.html",
        controller: "loginCtrl"
    }).state("compareall", {
        url: "/compareall",
        templateUrl: "templates/compareall.html",
        controller: "compareAllCtrl"
    }).state("after-update", {
        url: "/after-update",
        templateUrl: "templates/after-update.html"
    }), $urlRouterProvider.otherwise("/")
}), ovModule.run(function($ionicPlatform, Analytics, Config, ParseFactory) {
    window.onerror = function(msg, url, line, col, error) {
        var extra = col ? "\ncolumn: " + col : "";
        extra += error ? "\nerror: " + error : "";
        var errorMessage = "Error: " + msg + "\nurl: " + url + "\nline: " + line + extra;
        console.log(errorMessage);
        var suppressErrorAlert = !0;
        return suppressErrorAlert
    }, $ionicPlatform.ready(function() {
        window.cordova && window.cordova.plugins.Keyboard && cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0), window.StatusBar && StatusBar.styleDefault(), isTablet = window.isTablet, !isTablet && isDevice && screen.lockOrientation("portrait"), console.log("isTablet : " + isTablet), Config.getUUID(function(uuid) {
            uuidIs = uuid
        }), ParseFactory.start();
        var notificationOpenedCallback = function(jsonData) {
            console.log("didReceiveRemoteNotificationCallBack: " + JSON.stringify(jsonData))
        };
        isDevice && window.plugins.OneSignal.init("3947cb74-7420-11e5-aebe-23e2dbae46f3", {
            googleProjectNumber: "325321612936"
        }, notificationOpenedCallback)
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("en", {
        ADV_SEARCH_TOUCH: "Touch for advanced search",
        ADV_SEARCH_RESET: "Reset advanced search",
        AFTER_PURCHASE: "After purchase, touch the download icon to download the purchased version",
        AGREE_TERMS: "By signing up you agree to the Terms of Service and Privacy Policy",
        ALERT: "Alert",
        ALL_TAGS: "All tags",
        ALL_TAGS_HELP: "or choose from existing",
        ALL_TESTAMENT: "Search all books",
        ALL_VERSE_VIEW: "All Verse View",
        ALL_VERSE_VIEW_DESC: "To read faster, grasp the contents",
        AND: "And",
        ANONYMOUS: "Anonymous",
        APP_NAME: "One Verse",
        APP_SETTINGS: "App Settings",
        ARE_YOU_SURE: "Are you sure?",
        ARE_YOU_SURE_TO_DELETE: "Are you sure you want to delete?",
        ARE_YOU_SURE_TO_DELETE_TAG: "Are you sure you want to delete this Tag?",
        ARE_YOU_SURE_TO_DOWNLOAD: "Are you sure to download {{value}}?",
        ARE_YOU_SURE_TO_PURCHASE: "Are you sure to purchase {{value}}?",
        BACK: "Back",
        BIBLE: "Bible",
        BIBLE_SEARCH_HELP: "Enter book name (Abbr: Ecclesiastes -> Eccl)",
        BIBLE_VERSIONS: "Bible Versions",
        BOOKS: "Books",
        CANCEL: "Cancel",
        CANCELLED: "Cancelled",
        CHANGE_THEME: "Change Theme",
        CHANGE_VERSE: "Change verse",
        CHINESE: "Chinese",
        CLOSE: "Close",
        CHOOSE_UPTO_FOUR: "Limiting to choose upto four versions is to prevent slowing down when loading data.",
        COMPARE_ALL_HELP: "Download more versions to compare more!",
        COMPARE_ALL_VERSIONS: "Compare all versions",
        CROSS_REFERENCE: "Cross reference",
        CURRENT_TAGS: "Tags in current verse",
        DAY_LEFT: "day left",
        DAYS_LEFT: "days left",
        DELETE: "Delete",
        DEVELOPER: "Developer",
        DID_YOU_RATE: "Did you finish rating?",
        DID_YOU_SHARE: "Did you finish sharing?",
        DISPLAY: "Display",
        DISPLAY_SETTINGS: "Display settings",
        DONE: "Done",
        DONE_DOWNLOADING: "Download completed!",
        EDIT: "Edit",
        EMAIL: "Email",
        EMAIL_DESC: "Your email address",
        ENGLISH: "English",
        ENTER_SECRET: "Enter access key",
        FACEBOOK: "Facebook",
        FONT: "Font",
        FONT_SANS_SERIF: "Sans Serif",
        FONT_SERIF: "Serif",
        FONT_SIZE: "Font size",
        FREE: "Free",
        FREE_EXPIRED: "Your trial period for Pro Version has expired. You will be using as Free Version.",
        FREE_TRIAL: "You can use One Verse Bible as Pro version for {{value}} day(s). After {{value}} day(s), you will be using as Free Version.",
        FRENCH: "French",
        GET_PRO: "Upgrade to PRO",
        GET_MORE_THEMES: "Get more themes",
        GOOGLE: "Google",
        GOT_IT: "Got it",
        GUESS_BIBLE_VERSE: "Guess the Bible Verse?",
        HELP: "Help",
        HISTORY: "History",
        IF_YOU_LIKE_THE_APP: "If you like the app, purchase the Pro version by buying us a cup of coffee. With the fund we raise, we can spend more time to make the better Bible app!",
        INFO: "Info",
        INIT_DOWNLOAD_INSTRUCTION: "About to download initial data (= 5MB). This may consume your data usage. Do you want to proceed?",
        INIT_DOWNLOAD: "Yes, download",
        INITIALIZING_PURCHASE: "Initializing purchase",
        INTRO_ONE_TITLE: "Slide up or down to navigate verses",
        INTRO_TWO_TITLE: "Select and compare with other bible versions for better understanding",
        INTRO_THREE_TITLE: "Make tags to categorize bible verses",
        INTRO_FOUR_TITLE: "Change display settings for better readability",
        INTRO_FIVE_TITLE: "Choose how you want to view verses.",
        INTRO_SIX_TITLE: "Sign up and become a member of One Verse Bible to backup your tags and reading activities.",
        INTRO_SEVEN_TITLE: "Touch the star button to save as your favorite (or make tags). Turn on notification for your saved verses and One Verse Bible will notify you three times a day to train you memorize the Bible verses!",
        IS_THIS_RIGHT_LANGUAGE: "Is this the main language you use?",
        JOHN_1_1: "In the beginning was the Word, and the Word was with God, and the Word was God (John 1:1)",
        KEYWORD_SEARCH_HELP: "Enter Keyword",
        KEYWORD_TOO_SHORT: "Keyword is too short",
        KOREAN: "Korean",
        LANGUAGE: "Language",
        LOADING: "Loading",
        LOGIN: "Log In",
        LOGIN_BENEFIT: "Once you login, all meta data including Tags will be synced to the Cloud (only for Pro version). If you do not login, you data will be remain on your device only. If you want to use same data among all the devices you have, we recommend you to login.",
        LOGIN_OR_SIGN_UP: "Log In / Sign Up",
        LOGIN_REQUIRED_FEATURE: "To use this feature, please log in/register",
        LOGIN_TO_BACKUP_TAGS: "To backup your tags to One Verse Cloud, please log in/register after your purchase",
        LOGIN_TO_USE_CLOUD: "Log in to back up your data to One Verse Cloud",
        LOGIN_FAILED: "Log in failed. Maybe you forgot password?",
        LOGIN_SUCCESS: "Log in succeeded",
        LOGIN_WITH_FACEBOOK: "Login with Facebook",
        LOGOUT: "Logout",
        LOGOUT_SUCCESS: "Logout succeeded",
        MORE: "More",
        MSG_END_OF_CHAPTER: "Reached end of chapter",
        MSG_END_OF_CHAPTER_NEXT_BOOK: "Reached end of this book, reading next book",
        MSG_END_OF_VERSE: "Reached end of verses",
        MSG_FIRST_CHAPTER: "No previous chapter found",
        MSG_CHOOSE_AT_LEAST_ONE_VERSION: "Please choose at least one bible version.",
        MSG_CHOOSE_AT_LEAST_ONE_VERSE: "Please choose at least one verse to share.",
        MSG_VERSIONS_ALLOWED: "Maximum of four bible versions are allowed. Choose from one to four versions.",
        MSG_CLIPBOARD_SUCCESS: "Copied to clipboard",
        MSG_CLIPBOARD_ERROR: "Failed copying to clipboard",
        MSG_RESTART: "There was an important update. Please close the app and restart ;-)",
        MSG_SLIDE_LEFT_RIGHT_CHANGE: "Slide left/right to change background",
        MSG_TAKE_SCREENSHOT: "Take screenshot in 10 seconds and share",
        NAME: "Name",
        NAME_DESC: "Your name",
        NAME_REQUIRED: "Name is required for registration",
        NEW_TESTAMENT: "New Testament",
        NEW_VERSION_AVAILABLE: "New version is available on the store. Please update to the latest version for better experience.",
        NEXT: "Next",
        NEXT_CHAPTER: "Next chapter",
        NO_RESULTS_FOUND: "No results found.",
        NO_TAGS_FOUND: "No tags found",
        NO_THANKS: "No, thanks",
        NOT: "Not",
        NOT_SUPPORTED: "Your device is not supported",
        NOT_SUPPORTED_VERSION: "This version is not yet supported.",
        NOTE: "Note",
        NOTI_SCHEDULED: "Notification scheduled",
        OK: "OK",
        OLD_TESTAMENT: "Old Testament",
        ONE_VERSE: "One Verse",
        ONE_VERSE_CLOUD: "One Verse Cloud",
        ONE_VERSE_VIEW: "One Verse View",
        ONE_VERSE_VIEW_DESC: "For in depth reading to focus better",
        OOPS: "Oops, try again",
        OR: "Or",
        OUTDATED: "Found data out of sync. Sync will be automatically performed when launching the app.",
        PASSWORD: "Password",
        PASSWORD_DESC: "Your secure password",
        PASSWORD_RESET_SENT: "Link to reset password has been sent to your email address",
        PLEASE_GET_ONLINE: "Please get online first",
        PLEASE_WAIT_DOWNLOADING: "Please wait while downloading data",
        PLEASE_SELECT_AT_LEAST_ONE: "Please select at least one",
        PREVIOUS: "Previous",
        PREVIOUS_CHAPTER: "Previous chapter",
        PRINT: "Print",
        PRO: "PRO",
        PRO_EXPIRED: "Free Version",
        PRO_EXPIRED_OR_NOT_LOGGED_IN: "Pro expired or not logged in. Please purchase to upgrade to Pro version or share verse to extend 1 day!",
        PRO_VERSION: "PRO Version",
        PURCHASE: "Purchase",
        PURCHASE_OR_SHARE: "Touch here to purchase app to use unlimited PRO features",
        RATE_FAILED: "Failed to rate.",
        RATE_NOW: "Okay, rate now",
        RATE_TO_EXTEND: "Like our app? Rate us 5 stars with reviews and extend 10 days of Pro version",
        REGISTER: "Register",
        REORDER: "Reorder",
        RESET_PASSWORD: "Reset password",
        RESTORE_PURCHASE: "Restore purchase",
        SAY: "Say",
        SAVE: "Save",
        SAVED: "Saved",
        SEARCH: "Search",
        SETTINGS: "Settings",
        SELECT_VERSIONS: "Select Bible Versions",
        SELECT_VERSIONS_HELP: "Touch here to change or add the Bible versions",
        SEND_NOTIFICATION_3_TIMES: "Use daily notification (morning, noon, evening)",
        SHARE: "Share",
        SHARE_VERSE: "Share, copy, or screenshot",
        SHARE_COPY_TO_CLIPBOARD: "Copy to Clipboard",
        SHARE_FRIENDLY_HEADER: "One Verse Bible App",
        SHARE_FRIENDLY_MSG: "Hi, I am using One Verse Bible to read Bible everyday. Check it out!",
        SHARE_FAILED_SHARE: "Failed to share. Please try again.",
        SHARE_LIMIT_REACHED: "Share limit reached.",
        SHARE_MSG_LONG: "Hey, start reading the Bible and know who Jesus Christ is! Read John 3:16 using the One Verse Bible app!",
        SHARE_MSG_SHORT: "Hey, start reading the Bible and know who Jesus is!",
        SHARE_SUCCESSFULLY_SHARED: "Successfully shared!",
        SHARE_TO_FACEBOOK_TO_EXTEND: "Share via Facebook to extend 1 day",
        SHARE_TO_EXTEND: "Touch here to share to SNS to extend more days for Pro Version",
        SHARE_TO_EXTEND_DAYS: "Share to extend Pro Version for {{value}} day(s)",
        SHARE_VIA_ANY_APP: "Share via any Apps",
        SHOW_ALL_VERSES: "List View",
        SHOW_TAGS_NEXT_TO_VERSE: "Show tags next to verse",
        SIDE_BY_SIDE_VIEW: "Side by Side View",
        SIDE_BY_SIDE_VIEW_DESC: "To compare easily for better understanding",
        SKIP: "Skip",
        SKIP_DESC: "You can always login or sign up later",
        SOON_SUPPORTED: "Soon",
        SOMETHING_WRONG: "Something is technically wrong. Are you offline?",
        SPANISH: "Spanish",
        STARRED: "Added to favorite",
        SUBMIT: "Submit",
        SUGGESTED: "Suggested",
        SWIPE_LEFT_FOR_MORE_ACTIONS: "Swipe left on each verse for more actions",
        SWIPE_TO_CHANGE: "Swipe to change",
        SWIPE_TOP_TO_NAVIGATE: "Touch here to navigate between verses",
        SYNC_IN_PROGRESS: "Sync in progress",
        SYNC_TO_CLOUD: "Sync to cloud",
        TAG_ADD: "Add tag",
        TAG_AT_LEAST_ONE_REQUIRED: "At least one tag is required. If you have entered, please press enter key to confirm.",
        TAG_DUPLICATE_FOUND: "The tag you have entered already exists",
        TAG_ENTER_HELP: "Enter tag name and press enter",
        TAG_OR_FAVORITE: "Tag / Favorite",
        TAG_NAME: "Enter tag name",
        TAG_TOO_LONG_OR_SHORT: "Tag name too short or long",
        TAGS: "Tags",
        TAGS_OTHERS: "Others Tags",
        TAKE_TO_TUTORIAL: "Take me to tutorial",
        THANK_YOU_PURCHASE: "Thank you for your purchase",
        THEME: "Theme",
        TOUCH_TO_VIEW_PROFILE: "View profile",
        TRY_AGAIN: "Try again",
        TRY_AGAIN_COULDNT_FIND: "Could not find. Please try again.",
        TWITTER: "Twitter",
        VERSE_DETAIL: "Perform action on Verse",
        VERSION: "Version",
        VIEW_ALL_TAGS: "View All Tags",
        UPGRADE_PRO_MSG: "Support the developer by upgrading to PRO version! With PRO version you will be able to use all features with no limit and save your data safely on One Verse Cloud!",
        UPDATE: "Update",
        USERNAME_REQUIRED: "Enter your email address and touch again to reset",
        USERNAME_PASSWORD_REQUIRED: "Email/password is required",
        WARNING: "Warning",
        WHY_LANGUAGE_MATTERS: "This does not mean you are reading only the Bible in this language. This language selection is to show interface in your main language. We will add more languages as we update One Verse Bible.",
        YOU_ARE_OFFLINE: "You are offline!",
        YOU_HAVE_MORE_LIST: "Free version is limited to show 10 items. Upgrade to PRO version to see more!"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("es", {
        ADV_SEARCH_TOUCH: "Toque para búsqueda avanzada",
        ADV_SEARCH_RESET: "Restablecer búsqueda avanzada",
        AFTER_PURCHASE: "Después de la compra, pulse el icono de descarga para descargar la versión comprada",
        AGREE_TERMS: "Al suscribirse usted acepta los Términos de Servicio y Política de Privacidad",
        ALERT: "Alerta",
        ALL_TAGS: "Todas las etiquetas",
        ALL_TAGS_HELP: "o elegir existente",
        ALL_TESTAMENT: "Buscar en todos los libros",
        ALL_VERSE_VIEW: "Todo Verso Ver",
        ALL_VERSE_VIEW_DESC: "Para leer más rápido, comprender el contenido",
        AND: "Y",
        ANONYMOUS: "Anónimo",
        APP_NAME: "One Verse",
        APP_SETTINGS: "Configuración de la aplicación",
        ARE_YOU_SURE: "¿Estas seguro?",
        ARE_YOU_SURE_TO_DELETE: "¿Estas seguro que quieres borrarlo?",
        ARE_YOU_SURE_TO_DELETE_TAG: "¿Seguro que quieres borrar este Tag?",
        ARE_YOU_SURE_TO_DOWNLOAD: "¿Seguro descargar {{value}}?",
        ARE_YOU_SURE_TO_PURCHASE: "¿Seguro compre {{value}}?",
        BACK: "Atrás",
        BIBLE: "Biblia",
        BIBLE_SEARCH_HELP: "Introduzca el nombre del libro (Abreviatura: Eclesiastés -> Ecc)",
        BIBLE_VERSIONS: "Versiones de la Biblia",
        BOOKS: "Libros",
        CANCEL: "Cancelar",
        CANCELLED: "Cancelado",
        CHANGE_THEME: "Cambiar de tema",
        CHANGE_VERSE: "Cambio verso",
        CHINESE: "Chino",
        CLOSE: "Cerca",
        CHOOSE_UPTO_FOUR: "La limitación de elegir hasta cuatro versiones es evitar ralentizar al cargar datos.",
        COMPARE_ALL_HELP: "Descargar más versiones para comparar más!",
        COMPARE_ALL_VERSIONS: "Comparar versiones",
        CROSS_REFERENCE: "Referencia cruzada",
        CURRENT_TAGS: "Etiquetas en verso actual",
        DAY_LEFT: "días que quedan",
        DAYS_LEFT: "día la izquierda",
        DELETE: "Borrar",
        DEVELOPER: "Desarrollador",
        DID_YOU_RATE: "¿Terminaste calificación?",
        DID_YOU_SHARE: "¿Terminaste compartir?",
        DISPLAY: "Pantalla",
        DISPLAY_SETTINGS: "Configuración de pantalla",
        DONE: "Hecho",
        DONE_DOWNLOADING: "Descarga completa!",
        EDIT: "Editar",
        EMAIL: "Email",
        EMAIL_DESC: "Su dirección de correo electrónico",
        ENGLISH: "Inglés",
        ENTER_SECRET: "Introduzca la clave de acceso",
        FACEBOOK: "Facebook",
        FONT: "Tipo de letra",
        FONT_SANS_SERIF: "Sans Serif",
        FONT_SERIF: "Serif",
        FONT_SIZE: "Tamaño de fuente",
        FREE: "Gratis",
        FREE_EXPIRED: "Su período de prueba para la versión Pro ha expirado. Usted va a utilizar la versión libre.",
        FREE_TRIAL: "Puede usar la versión Pro para {{value}} días. Después de {{value}} días, que va a utilizar la versión libre.",
        FRENCH: "Francés",
        GET_PRO: "Actualizar a PRO",
        GET_MORE_THEMES: "Obtener más temas",
        GOOGLE: "Google",
        GOT_IT: "Lo tengo",
        GUESS_BIBLE_VERSE: "Adivina el verso de la biblia?",
        HELP: "Ayuda",
        HISTORY: "Historia",
        IF_YOU_LIKE_THE_APP: "Si te gusta la aplicación, comprar la versión Pro por nosotros comprar una taza de café. Con el fondo elevamos, podemos pasar más tiempo para hacer la mejor aplicación de la Biblia!",
        INFO: "Info",
        INIT_DOWNLOAD_INSTRUCTION: "A punto de descargar los datos iniciales (= 5 MB). Esto puede consumir su uso de datos. ¿Quieres proceder?",
        INIT_DOWNLOAD: "Sí, descarga",
        INITIALIZING_PURCHASE: "Compra Inicialización",
        INTRO_ONE_TITLE: "Deslice hacia arriba o hacia abajo para navegar versos",
        INTRO_TWO_TITLE: "Seleccionar y comparar con otras versiones de la Biblia para una mejor comprensión",
        INTRO_THREE_TITLE: "Haga etiquetas para categorizar versículos de la Biblia",
        INTRO_FOUR_TITLE: "Cambiar la configuración de pantalla para una mejor lectura",
        INTRO_FIVE_TITLE: "Elija cómo desea ver versos.",
        INTRO_SIX_TITLE: "Regístrate y llegar a ser un miembro de un versículo de la Biblia a la reserva sus etiquetas y actividades de lectura.",
        INTRO_SEVEN_TITLE: "Toque el botón de la estrella para guardar como su favorito (o hacer etiquetas). Activación de la notificación para sus versos guardados y One Verse Biblia te notificaremos tres veces al día para entrenar a memorizar los versículos de la Biblia!",
        IS_THIS_RIGHT_LANGUAGE: "¿Es este el idioma principal que utiliza?",
        JOHN_1_1: "En el principio era el Verbo, y el Verbo era con Dios, y el Verbo era Dios. (Juan 1:1)",
        KEYWORD_SEARCH_HELP: "Inserte palabra clave",
        KEYWORD_TOO_SHORT: "La palabra clave es demasiado corta",
        KOREAN: "Coreano",
        LANGUAGE: "Idioma",
        LOADING: "Cargando",
        LOGIN: "Iniciar sesión",
        LOGIN_BENEFIT: "Una vez que se conecte, todos los metadatos que incluyen las etiquetas se sincronizarán con la Nube (sólo para la versión Pro). Si no se conecte, datos bien permanecen en un solo dispositivo. Si desea utilizar los mismos datos entre todos los dispositivos que tenga, le recomendamos que se conecte.",
        LOGIN_OR_SIGN_UP: "Iniciar sesión / Contratar",
        LOGIN_REQUIRED_FEATURE: "Para utilizar esta función, por favor conectarse / registro",
        LOGIN_TO_BACKUP_TAGS: "Para respaldar sus etiquetas a One Verse Cloud, por favor Iniciar sesión / Registrar después de su compra",
        LOGIN_TO_USE_CLOUD: "Entra para realizar copias de seguridad de sus datos a One Verse Cloud",
        LOGIN_FAILED: "Error de inicio de sesion. Tal vez se le olvidó la contraseña?",
        LOGIN_SUCCESS: "Entrar logrado",
        LOGIN_WITH_FACEBOOK: "Iniciar sesión con Facebook",
        LOGOUT: "Cerrar sesión",
        LOGOUT_SUCCESS: "Cerrar sesión tuvo éxito",
        MORE: "Más",
        MSG_END_OF_CHAPTER: "Alcanzado final del capítulo",
        MSG_END_OF_CHAPTER_NEXT_BOOK: "Alcanzado final de este libro, la lectura libro siguiente",
        MSG_END_OF_VERSE: "Alcanzado final de los versos",
        MSG_FIRST_CHAPTER: "Sin capítulo anterior encontrado",
        MSG_CHOOSE_AT_LEAST_ONE_VERSION: "Por favor, elija al menos una versión de la biblia.",
        MSG_CHOOSE_AT_LEAST_ONE_VERSE: "Por favor, elija al menos un versículo para compartir.",
        MSG_VERSIONS_ALLOWED: "Máximo de cuatro versiones de la Biblia están permitidos. Elija entre una a cuatro versiones.",
        MSG_CLIPBOARD_SUCCESS: "Copiado al portapapeles",
        MSG_CLIPBOARD_ERROR: "No se pudo copiar al portapapeles",
        MSG_RESTART: "Hubo una actualización importante. Por favor, cierre la aplicación y reinicie. ;-)",
        MSG_SLIDE_LEFT_RIGHT_CHANGE: "Diapositiva izquierda / derecha para cambiar el fondo",
        MSG_TAKE_SCREENSHOT: "Tomar captura de pantalla en 10 segundos y compartir",
        NAME: "Nombre",
        NAME_DESC: "Su nombre",
        NAME_REQUIRED: "El nombre es necesario para el registro",
        NEW_TESTAMENT: "Nuevo Testamento",
        NEW_VERSION_AVAILABLE: "La nueva versión está disponible en la tienda. Por favor, actualice a la última versión para una mejor experiencia.",
        NEXT: "Siguiente",
        NEXT_CHAPTER: "Siguiente capítulo",
        NO_RESULTS_FOUND: "No se han encontrado resultados.",
        NO_TAGS_FOUND: "No se han encontrado etiquetas",
        NO_THANKS: "No, gracias",
        NOT: "No",
        NOT_SUPPORTED: "Este dispositivo no es compatible",
        NOT_SUPPORTED_VERSION: "Esta versión no es compatible.",
        NOTE: "Nota",
        NOTI_SCHEDULED: "Notificación programada",
        OK: "OK",
        OLD_TESTAMENT: "Antiguo testamento",
        ONE_VERSE: "One Verse",
        ONE_VERSE_CLOUD: "One Verse Cloud",
        ONE_VERSE_VIEW: "One Verse Ver",
        ONE_VERSE_VIEW_DESC: "Porque en lectura de profundidad y enfocar mejor",
        OOPS: "Vaya, inténtelo de nuevo",
        OR: "O",
        OUTDATED: "Datos que se encuentran fuera de sincronía. Sincronización se realizará automáticamente al iniciar la aplicación.",
        PASSWORD: "Clave",
        PASSWORD_DESC: "Su contraseña segura",
        PASSWORD_RESET_SENT: "Enlace para restablecer la contraseña ha sido enviada a su e-mail",
        PLEASE_GET_ONLINE: "Por favor, póngase en línea primero",
        PLEASE_WAIT_DOWNLOADING: "Por favor, espere mientras se descarga de datos",
        PLEASE_SELECT_AT_LEAST_ONE: "Por favor, seleccione al menos un",
        PREVIOUS: "Previo",
        PREVIOUS_CHAPTER: "Capítulo anterior",
        PRINT: "Impresión",
        PRO: "PRO",
        PRO_EXPIRED: "Versión Gratuita",
        PRO_EXPIRED_OR_NOT_LOGGED_IN: "Pro caducado o no iniciado sesión. Por favor, compre actualizar a la versión Pro o compartir verso extender de 1 día!",
        PRO_VERSION: "Versión Pro",
        PURCHASE: "Compra",
        PURCHASE_OR_SHARE: "Toque aquí para comprar la aplicación para utilizar las funciones ilimitadas PRO",
        RATE_FAILED: "No se ha podido puntuar",
        RATE_NOW: "Sí, tasa ahora",
        RATE_TO_EXTEND: "Al igual que nuestra aplicación? Nos puntuar 5 estrellas con reseñas y extender los 10 días de la versión Pro",
        REGISTER: "Registro",
        REORDER: "Reordenar",
        RESET_PASSWORD: "Restablecer la contraseña",
        RESTORE_PURCHASE: "Restaurar compra",
        SAY: "Decir",
        SAVE: "Guardar",
        SAVED: "Salvado",
        SEARCH: "Buscar",
        SETTINGS: "Ajustes",
        SELECT_VERSIONS: "Versiones de la Biblia",
        SELECT_VERSIONS_HELP: "Toque aquí para cambiar o añadir versiones de la Biblia",
        SEND_NOTIFICATION_3_TIMES: "Utilice la notificación al día (mañana, tarde, noche)",
        SHARE: "Compartir",
        SHARE_VERSE: "Share / copia / captura de pantalla",
        SHARE_COPY_TO_CLIPBOARD: "Copiar al portapapeles",
        SHARE_FRIENDLY_HEADER: "One Verse Biblia App",
        SHARE_FRIENDLY_MSG: "Hola, estoy usando One Verse Biblia para leer la Biblia todos los días. ¡Echale un vistazo!",
        SHARE_FAILED_SHARE: "Error al compartir. Por favor, vuelva a intentarlo.",
        SHARE_LIMIT_REACHED: "Compartir límite alcanzado",
        SHARE_MSG_LONG: "Hey, empezar a leer la Biblia y saber quién es Jesucristo! Lee Juan 3:16 con la aplicación One Verse Biblia!",
        SHARE_MSG_SHORT: "Hey, empezar a leer la Biblia y saber quién es Jesús!",
        SHARE_SUCCESSFULLY_SHARED: "Con éxito compartido!",
        SHARE_TO_FACEBOOK_TO_EXTEND: "Compartir a través de Facebook para extender 1 día",
        SHARE_TO_EXTEND: "Toque aquí para compartir al SNS para extender más días para la versión Pro",
        SHARE_TO_EXTEND_DAYS: "Comparte extender Pro Versión para {{value}} días",
        SHARE_VIA_ANY_APP: "Compartir a través de cualquier Aplicaciones",
        SHOW_ALL_VERSES: "Vista de la lista",
        SHOW_TAGS_NEXT_TO_VERSE: "Mostrar etiquetas junto al verso",
        SIDE_BY_SIDE_VIEW: "Lado a lado Ver",
        SIDE_BY_SIDE_VIEW_DESC: "Para comparar fácilmente para una mejor comprensión",
        SKIP: "Saltar",
        SKIP_DESC: "Siempre se puede iniciar sesión o regístrate tarde",
        SOON_SUPPORTED: "En Poco Tiempo",
        SOMETHING_WRONG: "Algo es técnicamente incorrecto. ¿Está fuera de línea?",
        SPANISH: "Español",
        STARRED: "Añadido a favoritos",
        SUBMIT: "Enviar",
        SUGGESTED: "Sugirió",
        SWIPE_LEFT_FOR_MORE_ACTIONS: "Desliza el dedo hacia la izquierda en cada verso para más acciones",
        SWIPE_TO_CHANGE: "Pase para cambiar",
        SWIPE_TOP_TO_NAVIGATE: "Toque aquí para navegar entre versos",
        SYNC_IN_PROGRESS: "Sincronización en curso",
        SYNC_TO_CLOUD: "Sync para la nube",
        TAG_ADD: "Añadir etiqueta",
        TAG_AT_LEAST_ONE_REQUIRED: "Se requiere al menos una etiqueta. Si ha introducido, pulse la tecla enter para confirmar.",
        TAG_DUPLICATE_FOUND: "La etiqueta que ha introducido ya existe",
        TAG_ENTER_HELP: "Introduzca nombre de la etiqueta y pulse ENTER",
        TAG_OR_FAVORITE: "Etiqueta / Favorite",
        TAG_NAME: "Introduzca nombre de etiqueta",
        TAG_TOO_LONG_OR_SHORT: "Nombre de la etiqueta demasiado corto o largo",
        TAGS: "Etiquetas",
        TAGS_OTHERS: "Otros Etiquetas",
        TAKE_TO_TUTORIAL: "Llévame al tutorial",
        THANK_YOU_PURCHASE: "Gracias por su compra",
        THEME: "Tema",
        TOUCH_TO_VIEW_PROFILE: "Ver perfil",
        TRY_AGAIN: "Inténtalo de nuevo",
        TRY_AGAIN_COULDNT_FIND: "No pudo encontrar. Por favor, vuelva a intentarlo.",
        TWITTER: "Twitter",
        VERSE_DETAIL: "Realice la acción en verso",
        VERSION: "Versión",
        VIEW_ALL_TAGS: "Ver todas las etiquetas",
        UPGRADE_PRO_MSG: "Apoyar el desarrollador mediante la actualización a la versión PRO! Con la versión PRO usted será capaz de utilizar todas las funciones sin límite y guardar sus datos de forma segura en One Verse Cloud!",
        UPDATE: "Actualización",
        USERNAME_REQUIRED: "Introduzca su dirección de correo electrónico y toca de nuevo para reiniciar",
        USERNAME_PASSWORD_REQUIRED: "Se requiere Email / contraseña",
        WARNING: "Advertencia",
        WHY_LANGUAGE_MATTERS: "Esto no significa que usted está leyendo solamente la Biblia en este idioma. Esta selección de idioma es mostrar la interfaz en su idioma principal. Vamos a añadir más idiomas ya que actualizamos One Verse Biblia.",
        YOU_ARE_OFFLINE: "¡Estas desconectado!",
        YOU_HAVE_MORE_LIST: "La versión gratuita está limitada a mostrar 10 artículos. Actualiza a la versión PRO para ver más!"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("fr", {
        ADV_SEARCH_TOUCH: "Touchez pour la recherche avancée",
        ADV_SEARCH_RESET: "Effacer la recherche avancée",
        AFTER_PURCHASE: "Après l'achat, appuyez sur l'icône de téléchargement pour télécharger la version achetée",
        AGREE_TERMS: "En vous inscrivant, vous acceptez les Conditions générales d'utilisation et la Politique de confidentialité",
        ALERT: "Alerte",
        ALL_TAGS: "Toutes les étiquettes",
        ALL_TAGS_HELP: "ou choisir parmi existante",
        ALL_TESTAMENT: "Recherche dans tous les livres",
        ALL_VERSE_VIEW: "Tous les Versets Vue",
        ALL_VERSE_VIEW_DESC: "Pour lire plus rapidement, saisir le contenu",
        AND: "Et",
        ANONYMOUS: "anonyme",
        APP_NAME: "One Verse",
        APP_SETTINGS: "App paramètres",
        ARE_YOU_SURE: "Es-tu sûr?",
        ARE_YOU_SURE_TO_DELETE: "Etes vous sure de vouloir effacer?",
        ARE_YOU_SURE_TO_DELETE_TAG: "Etes vous sure de vouloir effacer ce tag?",
        ARE_YOU_SURE_TO_DOWNLOAD: "Etes vous sûr de télécharger {{value}}?",
        ARE_YOU_SURE_TO_PURCHASE: "Etes vous sûr d'acheter {{value}}?",
        BACK: "Retour",
        BIBLE: "Bible",
        BIBLE_SEARCH_HELP: "Entrez le nom du livre(Abbr: Ecclésiastes -> Ec)",
        BIBLE_VERSIONS: "Versions de la Bibles",
        BOOKS: "Livres",
        CANCEL: "Annul",
        CANCELLED: "Annulé",
        CHANGE_THEME: "Changer le Thème",
        CHANGE_VERSE: "Changer le verset",
        CHINESE: "Chinois",
        CLOSE: "Fermer",
        CHOOSE_UPTO_FOUR: "Se limiter à choisir jusqu'à quatre versions et ainsi empêcher un ralentissement lors du chargement des données.",
        COMPARE_ALL_HELP: "Télécharger plus de versions à comparer plus!",
        COMPARE_ALL_VERSIONS: "Comparez toutes les versions",
        CROSS_REFERENCE: "Cross réference",
        CURRENT_TAGS: "Tags courant",
        DAY_LEFT: "Jour restant",
        DAYS_LEFT: "les jours restants",
        DELETE: "Effacer",
        DEVELOPER: "Développeur",
        DID_YOU_RATE: "Avez-vous fini d'étoiles?",
        DID_YOU_SHARE: "Avez-vous fini de partage?",
        DISPLAY: "Affichage",
        DISPLAY_SETTINGS: "Paramètres d'affichages",
        DONE: "Terminé",
        DONE_DOWNLOADING: "Téléchargement terminé!",
        EDIT: "Editer",
        EMAIL: "E-mail",
        EMAIL_DESC: "Votre addresse e-mail",
        ENGLISH: "Anglais",
        ENTER_SECRET: "Entrez clé d'accès",
        FACEBOOK: "Facebook",
        FONT: "Police",
        FONT_SANS_SERIF: "Sans Serif",
        FONT_SERIF: "Serif",
        FONT_SIZE: "Taille de police",
        FREE: "Gratuit",
        FREE_EXPIRED: "Votre période d'essai pour la version Pro a expiré. Vous serez en utilisant la version gratuite que.",
        FREE_TRIAL: "Vous pouvez utiliser la version Pro pour {{value}} jours. Après {{value}} jours, vous serez en utilisant la version gratuite que.",
        FRENCH: "Francés",
        GET_PRO: "Mise a niveau vers la PRO",
        GET_MORE_THEMES: "Plus de thèmes",
        GOOGLE: "Google",
        GOT_IT: "Compris",
        GUESS_BIBLE_VERSE: "Devinez la bible?",
        HELP: "Aide",
        HISTORY: "Historique",
        IF_YOU_LIKE_THE_APP: "Si vous aimez l'application, acheter la version Pro par nous acheter une tasse de café. Avec le fonds nous élevons, nous pouvons passer plus de temps à faire la meilleure application de la Bible!",
        INFO: "Info",
        INIT_DOWNLOAD_INSTRUCTION: "Au sujet du téléchargement des données initiales (= 5MB). Cela peut consommer votre utilisation de données. Voulez-vous continuer?",
        INIT_DOWNLOAD: "Oui, télécharger",
        INITIALIZING_PURCHASE: "Initialisation d'achat",
        INTRO_ONE_TITLE: " Faites glisser en haut ou vers le bas pour naviguer dans les versets",
        INTRO_TWO_TITLE: "choisir et comparer avec d'autres versions de la Bible pour une meilleure compréhension",
        INTRO_THREE_TITLE: "Faire des repères pour classer les versets de la Bible",
        INTRO_FOUR_TITLE: "Changer paramètres d'affichage pour une meilleure lecture",
        INTRO_FIVE_TITLE: "Choisissez la manière dont vous voulez voir versets .",
        INTRO_SIX_TITLE: "Inscrivez-vous et devener membre de one verset de la Bible pour sauvegarder vos repères et vos activités de lecture.",
        INTRO_SEVEN_TITLE: "Appuyez sur la touche étoile pour sauver comme votre favori (ou faire des tags). Activer la notification pour vos versets enregistrés et One Verse Bible vous informe trois fois par jour pour vous former et de mémoriser les versets de la Bible!",
        IS_THIS_RIGHT_LANGUAGE: "Est ce la langue que vous utiliser?",
        JOHN_1_1: "Au commencement était la parole, et la parole était avec Dieu, et la parole était Dieu (John 1:1)",
        KEYWORD_SEARCH_HELP: "Entrez les mots-clés",
        KEYWORD_TOO_SHORT: "les mots-clés sont trop court",
        KOREAN: "Coréen",
        LANGUAGE: "Langue",
        LOADING: "Chargement",
        LOGIN: "Connexion",
        LOGIN_BENEFIT: "Une fois que vous vous connectez, toutes les données, y compris les méta repères seront synchronisés sur le Cloud (uniquement pour la version Pro). Si vous ne vous connectez pas, vos données seront toujours sur votre terminal seulement. Si vous souhaitez utiliser les mêmes données entre tous les périphériques que vous avez, nous vous recommandons de vous connecter.",
        LOGIN_OR_SIGN_UP: "Connexion / Inscrivez-vous",
        LOGIN_REQUIRED_FEATURE: "Pour utiliser cette fonction, s'il vous plaît se connecter / s'enregistrer",
        LOGIN_TO_BACKUP_TAGS: "Pour sauvegarder vos balises à One Verse Cloud, s'il vous plaît Connectez-vous / s'enregistrer après votre achat",
        LOGIN_TO_USE_CLOUD: "Se connecter pour sauvegarder vos données le Cloud",
        LOGIN_FAILED: "La connexion a échoué. Peut-être que vous avez oublié votre mot de passe?",
        LOGIN_SUCCESS: "Connexion réussie",
        LOGIN_WITH_FACEBOOK: "Connexion avec Facebook",
        LOGOUT: "Quitter",
        LOGOUT_SUCCESS: "Déconnexion réussi",
        MORE: "Plus",
        MSG_END_OF_CHAPTER: "fin de chapitre atteint",
        MSG_END_OF_CHAPTER_NEXT_BOOK: "atteinte de la fin du livre,lecture du  prochain livre",
        MSG_END_OF_VERSE: "Atteinte fin du verset",
        MSG_FIRST_CHAPTER: "Chapitre précédent non trouvé",
        MSG_CHOOSE_AT_LEAST_ONE_VERSION: "S'il vous plaît choisir au moins une version de la Bible.",
        MSG_CHOOSE_AT_LEAST_ONE_VERSE: "S'il vous plaît choisir au moins un verset a partager",
        MSG_VERSIONS_ALLOWED: "Un maximum de quatre versions de la Bible sont autorisés. Choisissez entre une à quatre versions.",
        MSG_CLIPBOARD_SUCCESS: "Copie dans le presse-papiers",
        MSG_CLIPBOARD_ERROR: "Échec de la copie vers le presse-papiers",
        MSG_RESTART: "Il ya eu une mise à jour importante. S'il vous plaît fermer l'application et redémarrez. ;-)",
        MSG_SLIDE_LEFT_RIGHT_CHANGE: "Glissez vers la gauche / droite pour changer de fond",
        MSG_TAKE_SCREENSHOT: "Capture d'écran en 10 secondes et partager",
        NAME: "Nom",
        NAME_DESC: "Votre nom",
        NAME_REQUIRED: "Le nom est obligatoire pour l'inscription",
        NEW_TESTAMENT: "Nouveau Testament",
        NEW_VERSION_AVAILABLE: "Nouvelle version disponible.",
        NEXT: "Suivant",
        NEXT_CHAPTER: "Prochain chapitre",
        NO_RESULTS_FOUND: "Aucun résultat trouvé.",
        NO_TAGS_FOUND: "Aucun repère trouvé",
        NO_THANKS: "Non merci",
        NOT: "Pas",
        NOT_SUPPORTED: "Ce dispositif est pas pris en charge",
        NOT_SUPPORTED_VERSION: "Cette version est pas encore supporté.",
        NOTE: "Note",
        NOTI_SCHEDULED: "Notification prévue",
        OK: "OK",
        OLD_TESTAMENT: "Ancien Testament",
        ONE_VERSE: "One Verse",
        ONE_VERSE_CLOUD: "Un verset Cloud",
        ONE_VERSE_VIEW: "On Verset Vue",
        ONE_VERSE_VIEW_DESC: "Pour une profondeur de lecture et mieux se concentrer",
        OOPS: "Oops, essayez à nouveau",
        OR: "Ou",
        OUTDATED: "Trouvé désynchronisés. Sync sera effectuée automatiquement lors du lancement de l'application .",
        PASSWORD: "Mot de passe",
        PASSWORD_DESC: "Votre mot de passe sécurisé",
        PASSWORD_RESET_SENT: "réinitialisation du mot de passe a été envoyé à votre adresse e-mail",
        PLEASE_GET_ONLINE: "S'il vous plaît obtenir la première ligne",
        PLEASE_WAIT_DOWNLOADING: "Svp patienter pendant le téléchargement des données",
        PLEASE_SELECT_AT_LEAST_ONE: "Svp sélectionner au moins une",
        PREVIOUS: "Précédent",
        PREVIOUS_CHAPTER: "Chapitre précédent",
        PRINT: "Impression",
        PRO: "PRO",
        PRO_EXPIRED: "PRO Expiré",
        PRO_EXPIRED_OR_NOT_LOGGED_IN: "Pro expiré ou pas connecté!",
        PRO_VERSION: "Version Pro",
        PURCHASE: "Acheter",
        PURCHASE_OR_SHARE: "Acheter ou partager",
        RATE_FAILED: "Impossible de taux.",
        RATE_NOW: "Ok, maintenant le taux",
        RATE_TO_EXTEND: "Comme notre application? Voter pour nous 5 étoiles avec des critiques et d'étendre les 10 jours de la version Pro",
        REGISTER: "S'enregistrer",
        REORDER: "Réorganiser",
        RESET_PASSWORD: "Réinitialiser le mot de passe",
        RESTORE_PURCHASE: "Restaurer l'achat",
        SAY: "dire",
        SAVE: "Sauve",
        SAVED: "Sauvé",
        SEARCH: "Recherche",
        SETTINGS: "Paramètres",
        SELECT_VERSIONS: "Versions de la Bible",
        SELECT_VERSIONS_HELP: "Touchez ici pour modifier ou ajouter des versions de la Bible",
        SEND_NOTIFICATION_3_TIMES: "Partager notification 3 fois",
        SHARE: "Partager",
        SHARE_VERSE: "Partager / copie / capture d'écran",
        SHARE_COPY_TO_CLIPBOARD: "copier dans presse-papier",
        SHARE_FRIENDLY_HEADER: "Partager Un verset de l'App de la Bible",
        SHARE_FRIENDLY_MSG: "Salut, j'utilise l'App One Verse pour lire la Bible journellement! Lisons et partageons la parole de Dieu Ensemble!",
        SHARE_FAILED_SHARE: "Échec du partage. Veuillez réessayer.",
        SHARE_LIMIT_REACHED: "Partager limite atteinte.",
        SHARE_MSG_LONG: "Hey, commencer à lire la Bible et de savoir qui est Jésus Christ! Lire Jean 3:16 en utilisant la Une application verset de la Bible!",
        SHARE_MSG_SHORT: "Hey, commencer à lire la Bible et de savoir qui est Jésus!",
        SHARE_SUCCESSFULLY_SHARED: "succès partagé!",
        SHARE_TO_FACEBOOK_TO_EXTEND: "Partager via Facebook pour étendre un jour",
        SHARE_TO_EXTEND: "Touchez ici pour partager de réseau social pour étendre jours de plus pour la version Pro",
        SHARE_TO_EXTEND_DAYS: "Partagez de prolonger Pro Version pour {{value}} jour (s)",
        SHARE_VIA_ANY_APP: "Partager par d'autres applications",
        SHOW_ALL_VERSES: "Voir tous les versets",
        SHOW_TAGS_NEXT_TO_VERSE: "Afficher les repères à côté du verset",
        SIDE_BY_SIDE_VIEW: "Voir les versets les uns prét des autres",
        SIDE_BY_SIDE_VIEW_DESC: "Pour comparer facilement pour une meilleure compréhension",
        SKIP: "Passer",
        SKIP_DESC: "Vous pouvez toujours connecter ou vous inscrire plus tard",
        SOON_SUPPORTED: "Bientôt supporté",
        SOMETHING_WRONG: "Quelque chose est techniquement faux. Étes vous connecté?",
        SPANISH: "Espagnol",
        STARRED: "Ajouté à favori",
        SUBMIT: "Soumettre",
        SUGGESTED: "Suggéré",
        SWIPE_LEFT_FOR_MORE_ACTIONS: "Glisser vers la gauche sur chaque verset pour plus d'actions",
        SWIPE_TO_CHANGE: "Touchez pour changer",
        SWIPE_TOP_TO_NAVIGATE: "Touchez ici pour naviguer",
        SYNC_IN_PROGRESS: "Synchronisation en cours",
        SYNC_TO_CLOUD: "Synchroniser vers le cloud",
        TAG_ADD: "Ajouter étiquette",
        TAG_AT_LEAST_ONE_REQUIRED: "Au moins un tag est nécessaire",
        TAG_DUPLICATE_FOUND: "Le tag que vous avez entré existe déjà",
        TAG_ENTER_HELP: "Entrez le nom de tag et appuyez sur Entrée",
        TAG_OR_FAVORITE: "Tag / ou Favorit",
        TAG_NAME: "Nom du tag",
        TAG_TOO_LONG: "Tag trop long",
        TAGS: "Tags",
        TAGS_OTHERS: "D'autres tags",
        TAKE_TO_TUTORIAL: "Prendre pour tutorial",
        THANK_YOU_PURCHASE: "Merci pour votre achat",
        THEME: "Thème",
        TOUCH_TO_VIEW_PROFILE: "Toucher pour voir le profile",
        TRY_AGAIN: "Essayer de nouveau",
        TRY_AGAIN_COULDNT_FIND: "Impossible de trouver.Veuillez réessayer .",
        TWITTER: "Twitter",
        VERSE_DETAIL: "Détail sur le verset",
        VERSION: "Version",
        VIEW_ALL_TAGS: "Voir tous les tags",
        UPGRADE_PRO_MSG: " Mise à niveau Pro!",
        UPDATE: "Mise a jour",
        USERNAME_REQUIRED: "Nom utilisateur nécessaire",
        USERNAME_PASSWORD_REQUIRED: "E-mail / mot de passe nécessaire",
        WARNING: "Avertissement",
        WHY_LANGUAGE_MATTERS: "Pourquoi les questions de langue.",
        YOU_ARE_OFFLINE: "Vous êtes déconnecté!",
        YOU_HAVE_MORE_LIST: "Vous avez plus de listes!"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("ko", {
        ADV_SEARCH_TOUCH: "터치하여 상세검색하기",
        ADV_SEARCH_RESET: "상세검색 초기화",
        AFTER_PURCHASE: "구입 후에 다운로드 아이콘을 터치하셔서 다운로드하세요",
        AGREE_TERMS: "회원가입은 이용약관과 개인보호정책에 동의하는 것을 의미합니다",
        ALERT: "경고",
        ALL_TAGS: "모든 태그들",
        ALL_TAGS_HELP: "혹은 아래에서 선택하세요",
        ALL_TESTAMENT: "전체검색",
        ALL_VERSE_VIEW: "전체구절보기",
        ALL_VERSE_VIEW_DESC: "전체적인 내용을 빠르게 이해하도록 돕습니다",
        AND: "그리고",
        ANONYMOUS: "익명사용자",
        APP_NAME: "한 구절",
        APP_SETTINGS: "앱 설정",
        ARE_YOU_SURE: "정말입니까?",
        ARE_YOU_SURE_TO_DELETE: "삭제하기를 원하십니까?",
        ARE_YOU_SURE_TO_DELETE_TAG: "이 태그를 삭제하기 원하십니까?",
        ARE_YOU_SURE_TO_DOWNLOAD: "{{value}} 을(를) 다운로드 하시겠습니까?",
        ARE_YOU_SURE_TO_PURCHASE: "{{value}} 을(를) 구매하시겠습니까?",
        BACK: "뒤로",
        BIBLE: "성경",
        BIBLE_SEARCH_HELP: "책의 이름 입력 (약어가능: ㅊㅅㄱ -> 창세기)",
        BIBLE_VERSIONS: "성경 번역본",
        BOOKS: "Books",
        CANCEL: "취소",
        CANCELLED: "취소됨",
        CHANGE_THEME: "테마 변경",
        CHANGE_VERSE: "구절 변경",
        CHINESE: "중국어",
        CLOSE: "닫기",
        CHOOSE_UPTO_FOUR: "성경버전을 4가지로 제한을 두는 이유는 데이터를 불러들이는 시간이 길어지는 것을 방지하기 위한 것입니다.",
        COMPARE_ALL_HELP: "더 많은 번역본들을 다운로드하면 더 많이 비교할 수 있습니다",
        COMPARE_ALL_VERSIONS: "모든 번역본들과 비교",
        CROSS_REFERENCE: "관련구절",
        CURRENT_TAGS: "현재 구절의 태그들",
        DAY_LEFT: "일 남음",
        DAYS_LEFT: "일 남음",
        DELETE: "삭제",
        DEVELOPER: "개발자",
        DID_YOU_RATE: "평점을 매기셨습니까?",
        DID_YOU_SHARE: "공유를 하셨습니까?",
        DISPLAY: "디스플레이",
        DISPLAY_SETTINGS: "화면설정",
        DONE: "완료",
        DONE_DOWNLOADING: "다운로드가 완료됨!",
        EDIT: "수정",
        EMAIL: "이메일",
        EMAIL_DESC: "사용자님의 이메일 주소",
        ENGLISH: "영어",
        ENTER_SECRET: "액세스 키를 입력하세요",
        FACEBOOK: "페이스북",
        FONT: "글꼴",
        FONT_SANS_SERIF: "고딕",
        FONT_SERIF: "명조",
        FONT_SIZE: "글꼴 크기",
        FREE: "무료",
        FREE_EXPIRED: "프로버전 체험 기간이 만료되었습니다. 이제부터 무료버전으로 사용하게 됩니다.",
        FREE_TRIAL: "한 구절 성경앱을 프로버전으로 {{value}}일동안 사용하게 됩니다. {{value}}일이 지나면 무료버전으로 사용하게 됩니다",
        FRENCH: "불어",
        GET_PRO: "프로로 업그레이드하세요",
        GET_MORE_THEMES: "더 많은 테마보기",
        GOOGLE: "구글",
        GOT_IT: "알겠습니다",
        GUESS_BIBLE_VERSE: "성경구절을 알아 맞춰보세요",
        HELP: "도움말",
        HISTORY: "기록",
        IF_YOU_LIKE_THE_APP: "앱이 마음에 드시면 프로 버전을 구매하여 저희에게 커피 한잔을 사주실 수 있습니다. 수익금으로는 한 구절 성경앱을 개발하는 비용으로 사용하게 될 것입니다!",
        INFO: "정보",
        INIT_DOWNLOAD_INSTRUCTION: "한 구절 성경에 필요한 초기 데이터를 다운로드 (약 5 MB) 받기 직전입니다. 사용자님의 데이터를 사용하게 될 것입니다. 동의하십니까?",
        INIT_DOWNLOAD: "네, 다운로드합니다",
        INITIALIZING_PURCHASE: "구매를 위해 초기화중입니다",
        INTRO_ONE_TITLE: "구절을 이동하시려면 위 혹은 아래로 슬라이드하세요",
        INTRO_TWO_TITLE: "말씀을 더 잘 이해하기 위해서 여러 번역본을 선택하여 비교할 수 있습니다",
        INTRO_THREE_TITLE: "구절에 태그를 생성하여 쉽게 분류하세요",
        INTRO_FOUR_TITLE: "더 나은 가독성을 위해 디스플레이 설정을 변경하세요",
        INTRO_FIVE_TITLE: "어떤 뷰 방식으로 구절들을 보실것인지 선택하세요",
        INTRO_SIX_TITLE: "한 구절 성경의 회원이 되시면 생성한 태그와 성경을 읽은 활동들에 대한 데이터를 백업할 수 있습니다",
        INTRO_SEVEN_TITLE: "별 버튼을 터치하여 즐겨찾기에 저장할 수 있습니다 (혹은 태그 생성). 알림 기능을 켜면 저장된 구절들을 하루에 세번 알림으로 보내드려 암송을 돕습니다!",
        IS_THIS_RIGHT_LANGUAGE: "이 언어가 여러분이 사용하는 언어입니까?",
        JOHN_1_1: "태초에 말씀이 계시니라 이 말씀이 하나님과 함께 계셨으니 이 말씀은 곧 하나님이시니라 (요한복음 1:1)",
        KEYWORD_SEARCH_HELP: "키워드 입력",
        KEYWORD_TOO_SHORT: "키워드가 너무 짧습니다",
        KOREAN: "한국어",
        LANGUAGE: "언어",
        LOADING: "불러오는 중",
        LOGIN: "로그인",
        LOGIN_BENEFIT: "로그인 하시면 태그를 비롯한 모든 메타 데이터가 클라우드로 싱크 될 것입니다 (프로 버전일 경우). 로그인 하지 않으시면 모든 데이터는 여러분의 장치안에만 머물게 됩니다. 여러분이 사용하는 모든 장치에서 동일한 데이터를 사용하시려면 로그인하세요.",
        LOGIN_OR_SIGN_UP: "로그인 / 회원가입",
        LOGIN_REQUIRED_FEATURE: "이 기능을 사용하기 위해서는 로그인/회원가입하세요",
        LOGIN_TO_BACKUP_TAGS: "태그를 한 구절 성경 클라우드로 싱크하시려면 구매 후 로그인/회원가입하세요.",
        LOGIN_TO_USE_CLOUD: "데이터를 한 구절 성경 클라우드로 싱크하시려면 로그인하세요.",
        LOGIN_FAILED: "로그인을 실패했습니다. 비밀번호를 잊어버리셨는지 확인바랍니다",
        LOGIN_SUCCESS: "로그인하였습니다",
        LOGIN_WITH_FACEBOOK: "페이스북으로 로그인",
        LOGOUT: "로그아웃",
        LOGOUT_SUCCESS: "로그아웃하였습니다",
        MORE: "더 보기",
        MSG_END_OF_CHAPTER: "마지막 장입니다",
        MSG_END_OF_CHAPTER_NEXT_BOOK: "책의 마지막 장이므로 다음 장으로 넘어갑니다",
        MSG_END_OF_VERSE: "마지막 구절입니다",
        MSG_FIRST_CHAPTER: "이전 장이 없습니다",
        MSG_CHOOSE_AT_LEAST_ONE_VERSION: "적어도 한개의 번역본을 선택하셔야 합니다",
        MSG_CHOOSE_AT_LEAST_ONE_VERSE: "적어도 한개의 구절을 선택하셔야 합니다.",
        MSG_VERSIONS_ALLOWED: "허용된 번역본 수는 네 권입니다. 번역본을 한 권에서 네 권까지 허용합니다.",
        MSG_CLIPBOARD_SUCCESS: "클립보드로 복사함",
        MSG_CLIPBOARD_ERROR: "클립보드로 복사 실패",
        MSG_RESTART: "중요한 업데이트가 있었습니다. 앱을 닫았다가 다시 열어주시기 바랍니다 ;-)",
        MSG_SLIDE_LEFT_RIGHT_CHANGE: "좌우로 밀면 배경을 바꿀 수 있습니다",
        MSG_TAKE_SCREENSHOT: "10초 안으로 스크린샷을 찍은 후 공유하세요",
        NAME: "이름",
        NAME_DESC: "사용자님의 이름",
        NAME_REQUIRED: "회원가입을 위해서는 이름이 필요합니다",
        NEW_TESTAMENT: "신약",
        NEW_VERSION_AVAILABLE: "새 버전이 릴리즈 되었습니다. 업데이트하셔서 더 나은 경험을 하세요.",
        NEXT: "다음",
        NEXT_CHAPTER: "다음 장",
        NO_RESULTS_FOUND: "결과가 없습니다",
        NO_TAGS_FOUND: "태그가 없습니다",
        NO_THANKS: "아니오, 괜찮습니다",
        NOT: "비포함",
        NOT_SUPPORTED: "이 장치는 지원되지 않는 기능입니다",
        NOT_SUPPORTED_VERSION: "이 번역본은 아직 지원되지 않습니다.",
        NOTE: "노트",
        NOTI_SCHEDULED: "알림이 설정되었습니다",
        OK: "예",
        OLD_TESTAMENT: "구약",
        ONE_VERSE: "한 구절",
        ONE_VERSE_CLOUD: "한 구절 성경 클라우드",
        ONE_VERSE_VIEW: "한 구절 보기",
        ONE_VERSE_VIEW_DESC: "한 구절씩 정독하며 더 깊이 묵상할 수 있습니다",
        OOPS: "앗, 다시 시도해보세요.",
        OR: "또는",
        OUTDATED: "싱크되지 않은 데이터가 있습니다. 싱크는 앱을 여는 순간에 자동으로 실행됩니다.",
        PASSWORD: "비밀번호",
        PASSWORD_DESC: "사용자님의 비밀번호",
        PASSWORD_RESET_SENT: "비밀번호 초기화를 위한 링크를 이메일로 보내드렸습니다!",
        PLEASE_GET_ONLINE: "먼저 온라인으로 전환하십시오",
        PLEASE_WAIT_DOWNLOADING: "데이터를 받는 동안 잠시 기다려 주십시오",
        PLEASE_SELECT_AT_LEAST_ONE: "적어도 하나는 선택하셔야 합니다",
        PREVIOUS: "이전",
        PREVIOUS_CHAPTER: "이전 장",
        PRINT: "출력",
        PRO: "프로",
        PRO_EXPIRED: "무료버전",
        PRO_EXPIRED_OR_NOT_LOGGED_IN: "프로기능이 만료되거나 로그인하지 않았습니다. 구매하여 프로로 업그레이드하거나 구절을 공유하여 1일 연장받으세요!",
        PRO_VERSION: "프로버전",
        PURCHASE: "구매",
        PURCHASE_OR_SHARE: "여기를 터치하셔서 앱을 구매하시면 프로기능을 제약없이 사용할 수 있습니다",
        RATE_FAILED: "Failed to rate.",
        RATE_NOW: "네, 지금 평점을 매깁니다",
        RATE_TO_EXTEND: "저희 앱이 마음에 드시면 스토어에 평점 5점과 리뷰를 달아주세요. 프로버전 10일 연장해드립니다.",
        REGISTER: "회원가입",
        REORDER: "순서정렬",
        RESET_PASSWORD: "비밀번호 초기화",
        RESTORE_PURCHASE: "구매 불러오기",
        SAY: "말하세요",
        SAVE: "저장",
        SAVED: "저장됨",
        SEARCH: "검색",
        SETTINGS: "설정",
        SELECT_VERSIONS: "성경번역본 선택",
        SELECT_VERSIONS_HELP: "여기를 터치하셔서 성경번역본을 변경하거나 추가하세요",
        SEND_NOTIFICATION_3_TIMES: "매일 알림을 사용 (아침, 점심, 저녁)",
        SHARE: "공유",
        SHARE_VERSE: "말씀공유/복사/스크린샷",
        SHARE_COPY_TO_CLIPBOARD: "클립보드로 복사",
        SHARE_FRIENDLY_HEADER: "한 구절 성경앱",
        SHARE_FRIENDLY_MSG: "안녕하세요! 저는 한 구절 앱으로 성경을 매일 읽고 있어요. 확인해보세요~",
        SHARE_FAILED_SHARE: "공유에 문제가 생겼습니다. 다시 시도해보세요.",
        SHARE_LIMIT_REACHED: "공유 한계에 다다랐습니다",
        SHARE_MSG_LONG: "성경을 읽어 예수 그리스도가 누구신지 알아보세요! 한 구절 성경앱으로 요한복음 3:16절을 읽어보세요!",
        SHARE_MSG_SHORT: "성경을 읽어 예수 그리스도가 누구신지 알아보세요!",
        SHARE_SUCCESSFULLY_SHARED: "성공적으로 공유하였습니다!",
        SHARE_TO_FACEBOOK_TO_EXTEND: "페이스북에 공유하여 1일 Pro 기간연장",
        SHARE_TO_EXTEND: "여기를 터치하시어 SNS 에 공유하면 Pro 기간을 연장받을 수 있습니다",
        SHARE_TO_EXTEND_DAYS: "공유하시면 프로버전을 {{value}}일간 연장받을 수 있습니다",
        SHARE_VIA_ANY_APP: "다른 앱으로 공유",
        SHOW_ALL_VERSES: "리스트 뷰",
        SHOW_TAGS_NEXT_TO_VERSE: "구절 옆 태그보임",
        SIDE_BY_SIDE_VIEW: "비교해서 보기",
        SIDE_BY_SIDE_VIEW_DESC: "더 나은 이해를 위해 다른 번역본들과 비교해서 볼 수 있습니다",
        SKIP: "건너뛰기",
        SKIP_DESC: "로그인 / 회원가입은 다음에 언제든지 할 수 있습니다",
        SOON_SUPPORTED: "곧 지원",
        SOMETHING_WRONG: "문제가 발생했습니다. 혹시 오프라인인지 확인해보세요.",
        SPANISH: "스페인어",
        STARRED: "즐겨찾기에 추가됨",
        SUBMIT: "등록",
        SUGGESTED: "추천 태그",
        SWIPE_LEFT_FOR_MORE_ACTIONS: "각 구절에서 좌로 밀어서 액션을 취할 수 있습니다",
        SWIPE_TO_CHANGE: "좌우로 변경",
        SWIPE_TOP_TO_NAVIGATE: "여기를 터치하시면 다른 구절로 쉽게 이동할 수 있습니다",
        SYNC_IN_PROGRESS: "싱크 수행중입니다",
        SYNC_TO_CLOUD: "클라우드로 싱크",
        TAG_ADD: "태그달기",
        TAG_AT_LEAST_ONE_REQUIRED: "적어도 한개의 태그가 필요합니다. 만일 입력하셨으면 자판의 엔터키를 누르세요.",
        TAG_DUPLICATE_FOUND: "입력하신 태그는 이미 존재합니다",
        TAG_ENTER_HELP: "태그명을 입력하신 후 엔터를 누르세요",
        TAG_OR_FAVORITE: "태그 / 즐겨찾기",
        TAG_NAME: "태그 이름을 입력",
        TAG_TOO_LONG_OR_SHORT: "태그가 너무 짧거나 깁니다",
        TAGS: "태그",
        TAGS_OTHERS: "다른 이들의 태그",
        TAKE_TO_TUTORIAL: "사용방법 보기",
        THANK_YOU_PURCHASE: "구매해주셔서 감사합니다",
        THEME: "테마",
        TOUCH_TO_VIEW_PROFILE: "프로필 보기",
        TRY_AGAIN: "다시 시도해보세요",
        TRY_AGAIN_COULDNT_FIND: "찾을 수가 없습니다. 다시 시도해보세요.",
        TWITTER: "트위터",
        VERSE_DETAIL: "구절에 액션을 취하세요",
        VERSION: "버전",
        VIEW_ALL_TAGS: "모든 태그 보기",
        UPGRADE_PRO_MSG: "프로 버전으로 업그레이드 하여 개발자를 후원해주세요! 프로버전으로 모든 기능들을 제한없이 사용하고 여러분의 데이터를 한 구절 성경 클라우드로 싱크할 수 있습니다",
        UPDATE: "업데이트",
        USERNAME_REQUIRED: "이메일 주소를 입력하고 다시 초기화 버튼을 누르세요",
        USERNAME_PASSWORD_REQUIRED: "이메일과 비밀번호는 필수입니다",
        WARNING: "주의",
        WHY_LANGUAGE_MATTERS: "이 언어 선택이 성경번역본의 언어를 말하는 것은 아닙니다. 이 언어는 인터페이스에만 적용됩니다. 시간이 지남에 따라 더 많은 언어를 추가하게 될 것입니다.",
        YOU_ARE_OFFLINE: "사용자님은 오프라인입니다!",
        YOU_HAVE_MORE_LIST: "무료버전은 아이템을 10개까지만 보여줍니다. 프로로 업그레이드 하여 제한 없이 사용하세요!"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("zh", {
        ADV_SEARCH_TOUCH: "触摸进行高级搜索",
        ADV_SEARCH_RESET: "重置高级搜索",
        AFTER_PURCHASE: "购买后，触摸下载图标下载购买的版本",
        AGREE_TERMS: "通过注册，你同意服务条款和隐私权政策",
        ALERT: "警报",
        ALL_TAGS: "所有标签",
        ALL_TAGS_HELP: "或从现有选择",
        ALL_TESTAMENT: "搜索所有书",
        ALL_VERSE_VIEW: "所有诗歌查看",
        ALL_VERSE_VIEW_DESC: "为了更快的读取，把握内容",
        AND: "和",
        ANONYMOUS: "无名",
        APP_NAME: "One Verse",
        APP_SETTINGS: "应用程序设置",
        ARE_YOU_SURE: "你确定？",
        ARE_YOU_SURE_TO_DELETE: "你确定要删除？",
        ARE_YOU_SURE_TO_DELETE_TAG: "你确定要删除这个标签？",
        ARE_YOU_SURE_TO_DOWNLOAD: "您确定要下载 {{value}}?",
        ARE_YOU_SURE_TO_PURCHASE: "您一定要购买 {{value}}?",
        BACK: "背部",
        BIBLE: "圣经",
        BIBLE_SEARCH_HELP: "输入书名 (缩写: 创世纪 -> 创)",
        BIBLE_VERSIONS: "圣经版本",
        BOOKS: "图书",
        CANCEL: "撤消",
        CANCELLED: "取消",
        CHANGE_THEME: "更改主题",
        CHANGE_VERSE: "更改诗句",
        CHINESE: "简体中文",
        CLOSE: "亲密",
        CHOOSE_UPTO_FOUR: "限制选择高达四个版本是为了防止加载数据时放缓。",
        COMPARE_ALL_HELP: "下载更多的版本比较多！",
        COMPARE_ALL_VERSIONS: "对比所有版本",
        CROSS_REFERENCE: "交叉参考",
        CURRENT_TAGS: "在目前的诗句标签",
        DAY_LEFT: "天左",
        DAYS_LEFT: "离开天",
        DELETE: "删",
        DEVELOPER: "开发者",
        DID_YOU_RATE: "你完成的评价？",
        DID_YOU_SHARE: "你完成共享?",
        DISPLAY: "展出",
        DISPLAY_SETTINGS: "显示设置",
        DONE: "做完",
        DONE_DOWNLOADING: "下载完成！",
        EDIT: "编辑",
        EMAIL: "电子邮件",
        EMAIL_DESC: "您的电子邮件地址",
        ENGLISH: "英语",
        ENTER_SECRET: "输入快捷键",
        FACEBOOK: "Facebook",
        FONT: "字形",
        FONT_SANS_SERIF: "无衬线",
        FONT_SERIF: "衬线",
        FONT_SIZE: "字体大小",
        FREE: "自由",
        FREE_EXPIRED: "您的试用期Pro版本已经过期。您将使用的免费版本。",
        FREE_TRIAL: "您可以使用专业版{{value}}天。术后第{{value}}天，您将使用的免费版本。",
        FRENCH: "法语",
        GET_PRO: "升级至PRO",
        GET_MORE_THEMES: "获取更多主题",
        GOOGLE: "Google",
        GOT_IT: "得到它了",
        GUESS_BIBLE_VERSE: "猜经文?",
        HELP: "帮帮我",
        HISTORY: "历史",
        IF_YOU_LIKE_THE_APP: "如果你喜欢的应用程序，通过购买美国一杯咖啡购买Pro版本。随着我们筹集资金，我们可以花更多的时间来做出更好的圣经软件！",
        INFO: "信息",
        INIT_DOWNLOAD_INSTRUCTION: "要下载初始数据（=5MB）。这可能会占用你的数据的使用。是否要继续？",
        INIT_DOWNLOAD: "是的，下载",
        INITIALIZING_PURCHASE: "初始化购买",
        INTRO_ONE_TITLE: "向上或向下滑动导航诗句",
        INTRO_TWO_TITLE: "选择和其他的圣经版本更好的理解比较",
        INTRO_THREE_TITLE: "制作标签的圣经经文分类",
        INTRO_FOUR_TITLE: "为更好的可读性更改显示设置",
        INTRO_FIVE_TITLE: "选择您希望查看的诗句。",
        INTRO_SIX_TITLE: "注册成为One Verse圣经来备份你的标签和阅读活动中的一员。",
        INTRO_SEVEN_TITLE: "轻触星号按钮，保存为你喜欢的（或作标记）。打开通知您保存的诗句和One Verse圣经会通知你每天训练你背诵经文三次！",
        IS_THIS_RIGHT_LANGUAGE: "这是你使用的主要语言？",
        JOHN_1_1: "太初有道，道与神同在，道就是神。 (约翰福音 1:1)",
        KEYWORD_SEARCH_HELP: "输入关键字",
        KEYWORD_TOO_SHORT: "关键字太短",
        KOREAN: "朝鲜的",
        LANGUAGE: "语言",
        LOADING: "载入中",
        LOGIN: "登录",
        LOGIN_BENEFIT: "一旦你登录，所有的元数据，包括标签将被同步到云端（仅适用于专业版）。如果您还没有登录，您的数据将只保留您的设备上。如果你想使用所有你的设备之间相同的数据，我们建议您登录。",
        LOGIN_OR_SIGN_UP: "登录 / 注册",
        LOGIN_REQUIRED_FEATURE: "要使用此功能，请登录/注册",
        LOGIN_TO_BACKUP_TAGS: "要备份你的标签为 One Verse Cloud，请登陆/注册您购买后",
        LOGIN_TO_USE_CLOUD: "登录到您的数据备份到 One Verse Cloud",
        LOGIN_FAILED: "登录失败。也许你忘记密码？",
        LOGIN_SUCCESS: "登录成功",
        LOGIN_WITH_FACEBOOK: "与登录 Facebook",
        LOGOUT: "登出",
        LOGOUT_SUCCESS: "注销成功",
        MORE: "更多",
        MSG_END_OF_CHAPTER: "章达成结束",
        MSG_END_OF_CHAPTER_NEXT_BOOK: "这本书达到年底，读下书",
        MSG_END_OF_VERSE: "经文达成结束",
        MSG_FIRST_CHAPTER: "没有找到前面的章节",
        MSG_CHOOSE_AT_LEAST_ONE_VERSION: "请至少选择一个圣经版本.",
        MSG_CHOOSE_AT_LEAST_ONE_VERSE: "请选择至少一节经文分享",
        MSG_VERSIONS_ALLOWED: "最多四个圣经版本是允许的。选择一至四个版本。",
        MSG_CLIPBOARD_SUCCESS: "复制到剪贴板",
        MSG_CLIPBOARD_ERROR: "无法复制到剪贴板",
        MSG_RESTART: "有一个重要的更新。请关闭应用程序，并重新启动。 ;-)",
        MSG_SLIDE_LEFT_RIGHT_CHANGE: "滑块向左/向右改变背景",
        MSG_TAKE_SCREENSHOT: "采取截图在10秒和共享",
        NAME: "命名",
        NAME_DESC: "你的名字",
        NAME_REQUIRED: "姓名为必填注册",
        NEW_TESTAMENT: "新约全书",
        NEW_VERSION_AVAILABLE: "新版本可在店内。请更新到最新版本更好的体验。",
        NEXT: "下一个",
        NEXT_CHAPTER: "下一章",
        NO_RESULTS_FOUND: "未找到结果。",
        NO_TAGS_FOUND: "发现没有标签",
        NO_THANKS: "不用了，谢谢",
        NOT: "不",
        NOT_SUPPORTED: "这个装置不支持",
        NOT_SUPPORTED_VERSION: "目前还不支持此版本。",
        NOTE: "注意",
        NOTI_SCHEDULED: "通知预定",
        OK: "行",
        OLD_TESTAMENT: "旧约全书",
        ONE_VERSE: "One Verse",
        ONE_VERSE_CLOUD: "One Verse Cloud",
        ONE_VERSE_VIEW: "One Verse 查看",
        ONE_VERSE_VIEW_DESC: "对于深度阅读和更好地集中",
        OOPS: "哎呀，再试一次",
        OR: "要么",
        OUTDATED: "发现数据不同步。同步将启动应用程序时自动执行。",
        PASSWORD: "密码",
        PASSWORD_DESC: "您的安全密码",
        PASSWORD_RESET_SENT: "链接重设密码已经发送到您的电子邮件地址",
        PLEASE_GET_ONLINE: "请上网第一",
        PLEASE_WAIT_DOWNLOADING: "同时下载数据，请稍候",
        PLEASE_SELECT_AT_LEAST_ONE: "请至少选择一个",
        PREVIOUS: "上一页",
        PREVIOUS_CHAPTER: "上一章",
        PRINT: "打印",
        PRO: "PRO",
        PRO_EXPIRED: "免费版本",
        PRO_EXPIRED_OR_NOT_LOGGED_IN: "PRO过期或者没有登录，请购买升级到专业版或共享的诗句来扩展1天！",
        PRO_VERSION: "PRO 文本",
        PURCHASE: "购买",
        PURCHASE_OR_SHARE: "触摸此处购买应用程序来使用无限PRO功能",
        RATE_FAILED: "失败率",
        RATE_NOW: "是的，现在房价",
        RATE_TO_EXTEND: "像我们的应用程序？我们评价5星的评价，并延长十天专业版",
        REGISTER: "注册",
        REORDER: "重新排序",
        RESET_PASSWORD: "重设密码",
        RESTORE_PURCHASE: "恢复购买",
        SAY: "讲",
        SAVE: "保存",
        SAVED: "已保存",
        SEARCH: "搜",
        SETTINGS: "设置",
        SELECT_VERSIONS: "选择圣经版本",
        SELECT_VERSIONS_HELP: "触摸此处更改或添加圣经版本",
        SEND_NOTIFICATION_3_TIMES: "每天使用的通知（早上，中午，晚上）",
        SHARE: "股票",
        SHARE_VERSE: "分享/复制/截图",
        SHARE_COPY_TO_CLIPBOARD: "复制到剪贴板",
        SHARE_FRIENDLY_HEADER: "One Verse圣经软件",
        SHARE_FRIENDLY_MSG: "嗨，我使用One Verse圣经阅读圣经的每一天。 一探究竟！",
        SHARE_FAILED_SHARE: "无法共享。 请再试一次。",
        SHARE_LIMIT_REACHED: "分享限额达到",
        SHARE_MSG_LONG: "嘿，开始阅读圣经，知道耶稣基督是谁！阅读约翰福音3:16使用One Verse圣经应用程序！",
        SHARE_MSG_SHORT: "嘿，开始阅读圣经，知道耶稣是谁！",
        SHARE_SUCCESSFULLY_SHARED: "成功共享！",
        SHARE_TO_FACEBOOK_TO_EXTEND: "通过Facebook分享，延长1天",
        SHARE_TO_EXTEND: "触摸这里分享到SNS，延长多天的Pro版本",
        SHARE_TO_EXTEND_DAYS: "分享延长Pro版本{{value}}天",
        SHARE_VIA_ANY_APP: "通过任何应用程序分享",
        SHOW_ALL_VERSES: "列表显示",
        SHOW_TAGS_NEXT_TO_VERSE: "显示标签旁边的诗句",
        SIDE_BY_SIDE_VIEW: "并排查看",
        SIDE_BY_SIDE_VIEW_DESC: "为了便于更好地理解比较",
        SKIP: "跳跃",
        SKIP_DESC: "您可以随时登录或注册后",
        SOON_SUPPORTED: "在即",
        SOMETHING_WRONG: "东西在技术上是错误的。你离线？",
        SPANISH: "西班牙语",
        STARRED: "添加到最爱",
        SUBMIT: "服从",
        SUGGESTED: "建议",
        SWIPE_LEFT_FOR_MORE_ACTIONS: "刷卡留在每一节的多个动作",
        SWIPE_TO_CHANGE: "刷卡改变",
        SWIPE_TOP_TO_NAVIGATE: "触摸此处经文之间导航",
        SYNC_IN_PROGRESS: "同步进行中",
        SYNC_TO_CLOUD: "同步 Cloud",
        TAG_ADD: "添加标签",
        TAG_AT_LEAST_ONE_REQUIRED: "的至少一个标记是必需的。如果输入，请按输入键确认。",
        TAG_DUPLICATE_FOUND: "您输入的标签已存在",
        TAG_ENTER_HELP: "输入变量名称，然后按Enter",
        TAG_OR_FAVORITE: "标 / 最喜欢的",
        TAG_NAME: "输入变量名称",
        TAG_TOO_LONG_OR_SHORT: "标签名称过短或过长",
        TAGS: "标签",
        TAGS_OTHERS: "其他标签",
        TAKE_TO_TUTORIAL: "带我去补习",
        THANK_YOU_PURCHASE: "感谢您选购",
        THEME: "议题",
        TOUCH_TO_VIEW_PROFILE: "查看资料",
        TRY_AGAIN: "再试一次",
        TRY_AGAIN_COULDNT_FIND: "找不到。 请再试一次。",
        TWITTER: "Twitter",
        VERSE_DETAIL: "执行对诗歌行动",
        VERSION: "文本",
        VIEW_ALL_TAGS: "查看所有标签",
        UPGRADE_PRO_MSG: "通过升级到 PRO version 支持开发商！有了专业版，你将能够使用所有的功能没有限制，安全地保存在 One Verse Cloud 您的数据！",
        UPDATE: "更新",
        USERNAME_REQUIRED: "输入您的电子邮件地址，并再次触按重置",
        USERNAME_PASSWORD_REQUIRED: "需要电子邮件/密码",
        WARNING: "警示",
        WHY_LANGUAGE_MATTERS: "这并不意味着你正在阅读只是圣经在这门语言。这种语言选择是显示在主界面。我们将增加更多的语言，因为我们更新 One Verse BIBLE。",
        YOU_ARE_OFFLINE: "您是离线！",
        YOU_HAVE_MORE_LIST: "免费版本仅限于显示10个项目。升级到专业版看多！"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("en", {
        ABBR_BOOK_01: "Gen",
        ABBR_BOOK_02: "Ex",
        ABBR_BOOK_03: "Lev",
        ABBR_BOOK_04: "Num",
        ABBR_BOOK_05: "Deut",
        ABBR_BOOK_06: "Josh",
        ABBR_BOOK_07: "Judg",
        ABBR_BOOK_08: "Ruth",
        ABBR_BOOK_09: "1 Sam",
        ABBR_BOOK_10: "2 Sam",
        ABBR_BOOK_11: "1 Kin",
        ABBR_BOOK_12: "2 Kin",
        ABBR_BOOK_13: "1 Chr",
        ABBR_BOOK_14: "2 Chr",
        ABBR_BOOK_15: "Ezra",
        ABBR_BOOK_16: "Neh",
        ABBR_BOOK_17: "Esth",
        ABBR_BOOK_18: "Job",
        ABBR_BOOK_19: "Ps",
        ABBR_BOOK_20: "Prov",
        ABBR_BOOK_21: "Eccl",
        ABBR_BOOK_22: "Song",
        ABBR_BOOK_23: "Is",
        ABBR_BOOK_24: "Jer",
        ABBR_BOOK_25: "Lam",
        ABBR_BOOK_26: "Ezek",
        ABBR_BOOK_27: "Dan",
        ABBR_BOOK_28: "Hos",
        ABBR_BOOK_29: "Joel",
        ABBR_BOOK_30: "Amos",
        ABBR_BOOK_31: "Obad",
        ABBR_BOOK_32: "Jon",
        ABBR_BOOK_33: "Mic",
        ABBR_BOOK_34: "Nah",
        ABBR_BOOK_35: "Hab",
        ABBR_BOOK_36: "Zeph",
        ABBR_BOOK_37: "Hag",
        ABBR_BOOK_38: "Zech",
        ABBR_BOOK_39: "Mal",
        ABBR_BOOK_40: "Matt",
        ABBR_BOOK_41: "Mark",
        ABBR_BOOK_42: "Luke",
        ABBR_BOOK_43: "John",
        ABBR_BOOK_44: "Acts",
        ABBR_BOOK_45: "Rom",
        ABBR_BOOK_46: "1 Cor",
        ABBR_BOOK_47: "2 Cor",
        ABBR_BOOK_48: "Gal",
        ABBR_BOOK_49: "Eph",
        ABBR_BOOK_50: "Phil",
        ABBR_BOOK_51: "Col",
        ABBR_BOOK_52: "1 Thess",
        ABBR_BOOK_53: "2 Thess",
        ABBR_BOOK_54: "1 Tim",
        ABBR_BOOK_55: "2 Tim",
        ABBR_BOOK_56: "Titus",
        ABBR_BOOK_57: "Philem",
        ABBR_BOOK_58: "Heb",
        ABBR_BOOK_59: "James",
        ABBR_BOOK_60: "1 Pet",
        ABBR_BOOK_61: "2 Pet",
        ABBR_BOOK_62: "1 John",
        ABBR_BOOK_63: "2 John",
        ABBR_BOOK_64: "3 John",
        ABBR_BOOK_65: "Jude",
        ABBR_BOOK_66: "Rev",
        BOOK_01: "Genesis",
        BOOK_02: "Exodus",
        BOOK_03: "Leviticus",
        BOOK_04: "Numbers",
        BOOK_05: "Deuteronomy",
        BOOK_06: "Joshua",
        BOOK_07: "Judges",
        BOOK_08: "Ruth",
        BOOK_09: "1 Samuel",
        BOOK_10: "2 Samuel",
        BOOK_11: "1 Kings",
        BOOK_12: "2 Kings",
        BOOK_13: "1 Chronicles",
        BOOK_14: "2 Chronicles",
        BOOK_15: "Ezra",
        BOOK_16: "Nehemiah",
        BOOK_17: "Esther",
        BOOK_18: "Job",
        BOOK_19: "Psalms",
        BOOK_20: "Proverbs",
        BOOK_21: "Ecclesiastes",
        BOOK_22: "Song of Songs",
        BOOK_23: "Isaiah",
        BOOK_24: "Jeremiah",
        BOOK_25: "Lamentations",
        BOOK_26: "Ezekiel",
        BOOK_27: "Daniel",
        BOOK_28: "Hosea",
        BOOK_29: "Joel",
        BOOK_30: "Amos",
        BOOK_31: "Obadiah",
        BOOK_32: "Jonah",
        BOOK_33: "Micah",
        BOOK_34: "Nahum",
        BOOK_35: "Habakkuk",
        BOOK_36: "Zephaniah",
        BOOK_37: "Haggai",
        BOOK_38: "Zechariah",
        BOOK_39: "Malachi",
        BOOK_40: "Matthew",
        BOOK_41: "Mark",
        BOOK_42: "Luke",
        BOOK_43: "John",
        BOOK_44: "Acts",
        BOOK_45: "Romans",
        BOOK_46: "1 Corinthians",
        BOOK_47: "2 Corinthians",
        BOOK_48: "Galatians",
        BOOK_49: "Ephesians",
        BOOK_50: "Philippians",
        BOOK_51: "Colossians",
        BOOK_52: "1 Thessalonians",
        BOOK_53: "2 Thessalonians",
        BOOK_54: "1 Timothy",
        BOOK_55: "2 Timothy",
        BOOK_56: "Titus",
        BOOK_57: "Philemon",
        BOOK_58: "Hebrews",
        BOOK_59: "James",
        BOOK_60: "1 Peter",
        BOOK_61: "2 Peter",
        BOOK_62: "1 John",
        BOOK_63: "2 John",
        BOOK_64: "3 John",
        BOOK_65: "Jude",
        BOOK_66: "Revelation"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("es", {
        ABBR_BOOK_01: "Gen",
        ABBR_BOOK_02: "Exo",
        ABBR_BOOK_03: "Lev",
        ABBR_BOOK_04: "Num",
        ABBR_BOOK_05: "Deu",
        ABBR_BOOK_06: "Jos",
        ABBR_BOOK_07: "Jug",
        ABBR_BOOK_08: "Rut",
        ABBR_BOOK_09: "1sm",
        ABBR_BOOK_10: "2sm",
        ABBR_BOOK_11: "1kg",
        ABBR_BOOK_12: "2kg",
        ABBR_BOOK_13: "1ch",
        ABBR_BOOK_14: "2ch",
        ABBR_BOOK_15: "Ezr",
        ABBR_BOOK_16: "Neh",
        ABBR_BOOK_17: "Est",
        ABBR_BOOK_18: "Job",
        ABBR_BOOK_19: "Ps",
        ABBR_BOOK_20: "Pro",
        ABBR_BOOK_21: "Ecc",
        ABBR_BOOK_22: "Son",
        ABBR_BOOK_23: "Isa",
        ABBR_BOOK_24: "Jer",
        ABBR_BOOK_25: "Lam",
        ABBR_BOOK_26: "Eze",
        ABBR_BOOK_27: "Dan",
        ABBR_BOOK_28: "Hos",
        ABBR_BOOK_29: "Joe",
        ABBR_BOOK_30: "Amo",
        ABBR_BOOK_31: "Oba",
        ABBR_BOOK_32: "Jon",
        ABBR_BOOK_33: "Mic",
        ABBR_BOOK_34: "Nah",
        ABBR_BOOK_35: "Hab",
        ABBR_BOOK_36: "Zep",
        ABBR_BOOK_37: "Hag",
        ABBR_BOOK_38: "Zec",
        ABBR_BOOK_39: "Mal",
        ABBR_BOOK_40: "Mat",
        ABBR_BOOK_41: "Mak",
        ABBR_BOOK_42: "Luk",
        ABBR_BOOK_43: "Jhn",
        ABBR_BOOK_44: "Act",
        ABBR_BOOK_45: "Rom",
        ABBR_BOOK_46: "1co",
        ABBR_BOOK_47: "2co",
        ABBR_BOOK_48: "Gal",
        ABBR_BOOK_49: "Eph",
        ABBR_BOOK_50: "Phl",
        ABBR_BOOK_51: "Col",
        ABBR_BOOK_52: "1ts",
        ABBR_BOOK_53: "2ts",
        ABBR_BOOK_54: "1tm",
        ABBR_BOOK_55: "2tm",
        ABBR_BOOK_56: "Tit",
        ABBR_BOOK_57: "Ph,",
        ABBR_BOOK_58: "Heb",
        ABBR_BOOK_59: "Jam",
        ABBR_BOOK_60: "1Pe",
        ABBR_BOOK_61: "2Pe",
        ABBR_BOOK_62: "1Jn",
        ABBR_BOOK_63: "2Jn",
        ABBR_BOOK_64: "3Jn",
        ABBR_BOOK_65: "Jud",
        ABBR_BOOK_66: "Rev",
        BOOK_01: "Génesis",
        BOOK_02: "Éxodo",
        BOOK_03: "Levítico",
        BOOK_04: "Números",
        BOOK_05: "Deuteronomio",
        BOOK_06: "Josué",
        BOOK_07: "Jueces",
        BOOK_08: "Rut",
        BOOK_09: "1ra Samuel",
        BOOK_10: "2da Samuel",
        BOOK_11: "1ra Reyes",
        BOOK_12: "2da Reyes",
        BOOK_13: "1ra Crónicas",
        BOOK_14: "2da Crónicas",
        BOOK_15: "Esdras",
        BOOK_16: "Nehemías",
        BOOK_17: "Ester",
        BOOK_18: "Job",
        BOOK_19: "Salmos",
        BOOK_20: "Proverbios",
        BOOK_21: "Eclesiastés",
        BOOK_22: "Cantar de los Cantares",
        BOOK_23: "Isaias",
        BOOK_24: "Jeremías",
        BOOK_25: "Lamentaciones",
        BOOK_26: "Ezequiel",
        BOOK_27: "Daniel",
        BOOK_28: "Oseas",
        BOOK_29: "Joel",
        BOOK_30: "Amós",
        BOOK_31: "Abdías",
        BOOK_32: "Jonás",
        BOOK_33: "Miqueas",
        BOOK_34: "Nahúm",
        BOOK_35: "Habacuc",
        BOOK_36: "Sofonías",
        BOOK_37: "Hageo",
        BOOK_38: "Zacarías",
        BOOK_39: "Malaquías",
        BOOK_40: "Mateo",
        BOOK_41: "Marcos",
        BOOK_42: "Lucas",
        BOOK_43: "Juan",
        BOOK_44: "Hechos de los Apóstoles",
        BOOK_45: "Romanos",
        BOOK_46: "1ro Corintios",
        BOOK_47: "2do Corintios",
        BOOK_48: "Gálatas",
        BOOK_49: "Efesios",
        BOOK_50: "Filipenses",
        BOOK_51: "Colosenses",
        BOOK_52: "1ra Tesalonicenses",
        BOOK_53: "2da Tesalonicences",
        BOOK_54: "1st Timoteo",
        BOOK_55: "2nd Timoteo",
        BOOK_56: "Tito",
        BOOK_57: "Filemón",
        BOOK_58: "Hebreos",
        BOOK_59: "Santiago",
        BOOK_60: "1ra Pedro",
        BOOK_61: "2da Pedro",
        BOOK_62: "1ra Juan",
        BOOK_63: "2da Juan",
        BOOK_64: "3ra Juan",
        BOOK_65: "Judas",
        BOOK_66: "Apocalipsis"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("fr", {
        ABBR_BOOK_01: "Ge",
        ABBR_BOOK_02: "Ex",
        ABBR_BOOK_03: "Lé",
        ABBR_BOOK_04: "No",
        ABBR_BOOK_05: "De",
        ABBR_BOOK_06: "Jos",
        ABBR_BOOK_07: "Jg",
        ABBR_BOOK_08: "Ru",
        ABBR_BOOK_09: "1 S",
        ABBR_BOOK_10: "2 S",
        ABBR_BOOK_11: "1 R",
        ABBR_BOOK_12: "2 R",
        ABBR_BOOK_13: "1 Ch",
        ABBR_BOOK_14: "2 Ch",
        ABBR_BOOK_15: "Esd",
        ABBR_BOOK_16: "Né",
        ABBR_BOOK_17: "Est",
        ABBR_BOOK_18: "Job",
        ABBR_BOOK_19: "Ps",
        ABBR_BOOK_20: "Pr",
        ABBR_BOOK_21: "Ec",
        ABBR_BOOK_22: "Ca",
        ABBR_BOOK_23: "Es",
        ABBR_BOOK_24: "Jé",
        ABBR_BOOK_25: "La",
        ABBR_BOOK_26: "Ez",
        ABBR_BOOK_27: "Da",
        ABBR_BOOK_28: "Os",
        ABBR_BOOK_29: "Joë",
        ABBR_BOOK_30: "Am",
        ABBR_BOOK_31: "Ab",
        ABBR_BOOK_32: "Jon",
        ABBR_BOOK_33: "Mi",
        ABBR_BOOK_34: "Na",
        ABBR_BOOK_35: "Ha",
        ABBR_BOOK_36: "So",
        ABBR_BOOK_37: "Ag",
        ABBR_BOOK_38: "Za",
        ABBR_BOOK_39: "Mal",
        ABBR_BOOK_40: "Mt",
        ABBR_BOOK_41: "Mc",
        ABBR_BOOK_42: "Lu",
        ABBR_BOOK_43: "Jn",
        ABBR_BOOK_44: "Act",
        ABBR_BOOK_45: "Rom",
        ABBR_BOOK_46: "1 Co",
        ABBR_BOOK_47: "2 Co",
        ABBR_BOOK_48: "Gal",
        ABBR_BOOK_49: "Eph",
        ABBR_BOOK_50: "Phil",
        ABBR_BOOK_51: "Col",
        ABBR_BOOK_52: "1 Th",
        ABBR_BOOK_53: "2 Th",
        ABBR_BOOK_54: "1 Tim",
        ABBR_BOOK_55: "2 Tim",
        ABBR_BOOK_56: "Tit",
        ABBR_BOOK_57: "Phm",
        ABBR_BOOK_58: "Heb",
        ABBR_BOOK_59: "Jac",
        ABBR_BOOK_60: "1 Pi",
        ABBR_BOOK_61: "2 Pi",
        ABBR_BOOK_62: "1 Jn",
        ABBR_BOOK_63: "2 Jn",
        ABBR_BOOK_64: "3 Jn",
        ABBR_BOOK_65: "Jud",
        ABBR_BOOK_66: "Ap",
        BOOK_01: "Genèse",
        BOOK_02: "Exode",
        BOOK_03: "Lévitique",
        BOOK_04: "Nombres",
        BOOK_05: "Deutéronome",
        BOOK_06: "Josué",
        BOOK_07: "Juges",
        BOOK_08: "Ruth",
        BOOK_09: "1 Samuel",
        BOOK_10: "2 Samuel",
        BOOK_11: "1 Rois",
        BOOK_12: "2 Rois",
        BOOK_13: "1 Chroniques",
        BOOK_14: "2 Chroniques",
        BOOK_15: "Esdras",
        BOOK_16: "Nehémie",
        BOOK_17: "Esther",
        BOOK_18: "Job",
        BOOK_19: "Psaumes",
        BOOK_20: "Proverbes",
        BOOK_21: "Ecclésiaste",
        BOOK_22: "Cant des Cantiques",
        BOOK_23: "Isaïe",
        BOOK_24: "Jérémie",
        BOOK_25: "Lamentations",
        BOOK_26: "Ezéchiel",
        BOOK_27: "Daniel",
        BOOK_28: "Osée",
        BOOK_29: "Joël",
        BOOK_30: "Amos",
        BOOK_31: "Abdias",
        BOOK_32: "Jonas",
        BOOK_33: "Michée",
        BOOK_34: "Nahum",
        BOOK_35: "Habakuk",
        BOOK_36: "Sophonie",
        BOOK_37: "Aggée",
        BOOK_38: "Zacharie",
        BOOK_39: "Malachie",
        BOOK_40: "Matthieu",
        BOOK_41: "Marc",
        BOOK_42: "Luc",
        BOOK_43: "Jean",
        BOOK_44: "Actes",
        BOOK_45: "Romains",
        BOOK_46: "1 Corinthiens",
        BOOK_47: "2 Corinthiens",
        BOOK_48: "Galates",
        BOOK_49: "Ephésiens",
        BOOK_50: "Philippiens",
        BOOK_51: "Colossiens",
        BOOK_52: "1 Thessaloniciens",
        BOOK_53: "2 Thessaloniciens",
        BOOK_54: "1 Timothée",
        BOOK_55: "2 Timothée",
        BOOK_56: "Tite",
        BOOK_57: "Philémon",
        BOOK_58: "Hebreux",
        BOOK_59: "Jaques",
        BOOK_60: "1 Pierre",
        BOOK_61: "2 Pierre",
        BOOK_62: "1 Jean",
        BOOK_63: "2 Jean",
        BOOK_64: "3 Jean",
        BOOK_65: "Jude",
        BOOK_66: "Apocalypse"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("ko", {
        ABBR_BOOK_01: "ㅊㅅㄱ",
        ABBR_BOOK_02: "ㅊㅇㄱㄱ",
        ABBR_BOOK_03: "ㄹㅇㄱ",
        ABBR_BOOK_04: "ㅁㅅㄱ",
        ABBR_BOOK_05: "ㅅㅁㄱ",
        ABBR_BOOK_06: "ㅇㅎㅅㅇ",
        ABBR_BOOK_07: "ㅅㅅㄱ",
        ABBR_BOOK_08: "ㄹㄱ",
        ABBR_BOOK_09: "ㅅㅁㅇㅅ",
        ABBR_BOOK_10: "ㅅㅁㅇㅎ",
        ABBR_BOOK_11: "ㅇㅇㄱㅅ",
        ABBR_BOOK_12: "ㅇㅇㄱㅎ",
        ABBR_BOOK_13: "ㅇㄷㅅ",
        ABBR_BOOK_14: "ㅇㄷㅎ",
        ABBR_BOOK_15: "ㅇㅅㄹ",
        ABBR_BOOK_16: "ㄴㅎㅁㅇ",
        ABBR_BOOK_17: "ㅇㅅㄷ",
        ABBR_BOOK_18: "ㅇㄱ",
        ABBR_BOOK_19: "ㅅㅍ",
        ABBR_BOOK_20: "ㅈㅇ",
        ABBR_BOOK_21: "ㅈㄷㅅ",
        ABBR_BOOK_22: "ㅇㄱ",
        ABBR_BOOK_23: "ㅇㅅㅇ",
        ABBR_BOOK_24: "ㅇㄹㅁㅇ",
        ABBR_BOOK_25: "ㅇㄹㅁㅇㅇㄱ",
        ABBR_BOOK_26: "ㅇㅅㄱ",
        ABBR_BOOK_27: "ㄷㄴㅇ",
        ABBR_BOOK_28: "ㅎㅅㅇ",
        ABBR_BOOK_29: "ㅇㅇ",
        ABBR_BOOK_30: "ㅇㅁㅅ",
        ABBR_BOOK_31: "ㅇㅂㄷ",
        ABBR_BOOK_32: "ㅇㄴ",
        ABBR_BOOK_33: "ㅁㄱ",
        ABBR_BOOK_34: "ㄴㅎ",
        ABBR_BOOK_35: "ㅎㅂㄱ",
        ABBR_BOOK_36: "ㅅㅂㄴ",
        ABBR_BOOK_37: "ㅎㄱ",
        ABBR_BOOK_38: "ㅅㄱㄹ",
        ABBR_BOOK_39: "ㅁㄹㄱ",
        ABBR_BOOK_40: "ㅁㅌㅂㅇ",
        ABBR_BOOK_41: "ㅁㄱㅂㅇ",
        ABBR_BOOK_42: "ㄴㄱㅂㅇ",
        ABBR_BOOK_43: "ㅇㅎㅂㅇ",
        ABBR_BOOK_44: "ㅅㄷㅎㅈ",
        ABBR_BOOK_45: "ㄹㅁㅅ",
        ABBR_BOOK_46: "ㄱㄹㄷㅈㅅ",
        ABBR_BOOK_47: "ㄱㄹㄷㅎㅅ",
        ABBR_BOOK_48: "ㄱㄹㄷㅇㅅ",
        ABBR_BOOK_49: "ㅇㅂㅅㅅ",
        ABBR_BOOK_50: "ㅂㄹㅂㅅ",
        ABBR_BOOK_51: "ㄱㄹㅅㅅ",
        ABBR_BOOK_52: "ㄷㅅㄹㄴㄱㅈㅅ",
        ABBR_BOOK_53: "ㄷㅅㄹㄴㄱㅎㅅ",
        ABBR_BOOK_54: "ㄷㅁㄷㅈㅅ",
        ABBR_BOOK_55: "ㄷㅁㄷㅎㅅ",
        ABBR_BOOK_56: "ㄷㄷㅅ",
        ABBR_BOOK_57: "ㅂㄹㅁㅅ",
        ABBR_BOOK_58: "ㅎㅂㄹㅅ",
        ABBR_BOOK_59: "ㅇㄱㅂㅅ",
        ABBR_BOOK_60: "ㅂㄷㄹㅈㅅ",
        ABBR_BOOK_61: "ㅂㄷㄹㅎㅅ",
        ABBR_BOOK_62: "ㅇㅎㅇㅅ",
        ABBR_BOOK_63: "ㅇㅎㅇㅅ",
        ABBR_BOOK_64: "ㅇㅎㅅㅅ",
        ABBR_BOOK_65: "ㅇㄷㅅ",
        ABBR_BOOK_66: "ㅇㅎㄱㅅㄹ",
        BOOK_01: "창세기",
        BOOK_02: "출애굽기",
        BOOK_03: "레위기",
        BOOK_04: "민수기",
        BOOK_05: "신명기",
        BOOK_06: "여호수아",
        BOOK_07: "사사기",
        BOOK_08: "룻기",
        BOOK_09: "사무엘상",
        BOOK_10: "사무엘하",
        BOOK_11: "열왕기상",
        BOOK_12: "열왕기하",
        BOOK_13: "역대상",
        BOOK_14: "역대하",
        BOOK_15: "에스라",
        BOOK_16: "느헤미야",
        BOOK_17: "에스더",
        BOOK_18: "욥기",
        BOOK_19: "시편",
        BOOK_20: "잠언",
        BOOK_21: "전도서",
        BOOK_22: "아가",
        BOOK_23: "이사야",
        BOOK_24: "예레미야",
        BOOK_25: "예레미야애가",
        BOOK_26: "에스겔",
        BOOK_27: "다니엘",
        BOOK_28: "호세아",
        BOOK_29: "요엘",
        BOOK_30: "아모스",
        BOOK_31: "오바댜",
        BOOK_32: "요나",
        BOOK_33: "미가",
        BOOK_34: "나훔",
        BOOK_35: "하박국",
        BOOK_36: "스바냐",
        BOOK_37: "학개",
        BOOK_38: "스가랴",
        BOOK_39: "말라기",
        BOOK_40: "마태복음",
        BOOK_41: "마가복음",
        BOOK_42: "누가복음",
        BOOK_43: "요한복음",
        BOOK_44: "사도행전",
        BOOK_45: "로마서",
        BOOK_46: "고린도전서",
        BOOK_47: "고린도후서",
        BOOK_48: "갈라디아서",
        BOOK_49: "에베소서",
        BOOK_50: "빌립보서",
        BOOK_51: "골로새서",
        BOOK_52: "데살로니가전서",
        BOOK_53: "데살로니가후서",
        BOOK_54: "디모데전서",
        BOOK_55: "디모데후서",
        BOOK_56: "디도서",
        BOOK_57: "빌레몬서",
        BOOK_58: "히브리서",
        BOOK_59: "야고보서",
        BOOK_60: "베드로전서",
        BOOK_61: "베드로후서",
        BOOK_62: "요한일서",
        BOOK_63: "요한이서",
        BOOK_64: "요한삼서",
        BOOK_65: "유다서",
        BOOK_66: "요한계시록"
    })
}), ovModule.config(function($translateProvider) {
    $translateProvider.translations("zh", {
        ABBR_BOOK_01: "创",
        ABBR_BOOK_02: "出",
        ABBR_BOOK_03: "利",
        ABBR_BOOK_04: "民",
        ABBR_BOOK_05: "申",
        ABBR_BOOK_06: "书",
        ABBR_BOOK_07: "士",
        ABBR_BOOK_08: "得",
        ABBR_BOOK_09: "撒上",
        ABBR_BOOK_10: "撒下",
        ABBR_BOOK_11: "王上",
        ABBR_BOOK_12: "王下",
        ABBR_BOOK_13: "代上",
        ABBR_BOOK_14: "代下",
        ABBR_BOOK_15: "拉",
        ABBR_BOOK_16: "尼",
        ABBR_BOOK_17: "斯",
        ABBR_BOOK_18: "伯",
        ABBR_BOOK_19: "诗",
        ABBR_BOOK_20: "箴",
        ABBR_BOOK_21: "传",
        ABBR_BOOK_22: "歌",
        ABBR_BOOK_23: "赛",
        ABBR_BOOK_24: "耶",
        ABBR_BOOK_25: "哀",
        ABBR_BOOK_26: "结",
        ABBR_BOOK_27: "但",
        ABBR_BOOK_28: "何",
        ABBR_BOOK_29: "珥",
        ABBR_BOOK_30: "摩",
        ABBR_BOOK_31: "俄",
        ABBR_BOOK_32: "拿",
        ABBR_BOOK_33: "弥",
        ABBR_BOOK_34: "鸿",
        ABBR_BOOK_35: "哈",
        ABBR_BOOK_36: "番",
        ABBR_BOOK_37: "该",
        ABBR_BOOK_38: "亚",
        ABBR_BOOK_39: "玛",
        ABBR_BOOK_40: "太",
        ABBR_BOOK_41: "可",
        ABBR_BOOK_42: "路",
        ABBR_BOOK_43: "约",
        ABBR_BOOK_44: "使",
        ABBR_BOOK_45: "罗",
        ABBR_BOOK_46: "林前",
        ABBR_BOOK_47: "林后",
        ABBR_BOOK_48: "加",
        ABBR_BOOK_49: "弗",
        ABBR_BOOK_50: "腓",
        ABBR_BOOK_51: "西",
        ABBR_BOOK_52: "帖前",
        ABBR_BOOK_53: "帖后",
        ABBR_BOOK_54: "提前",
        ABBR_BOOK_55: "帖后",
        ABBR_BOOK_56: "多",
        ABBR_BOOK_57: "门",
        ABBR_BOOK_58: "来",
        ABBR_BOOK_59: "雅",
        ABBR_BOOK_60: "彼前",
        ABBR_BOOK_61: "彼后",
        ABBR_BOOK_62: "约壹",
        ABBR_BOOK_63: "约贰",
        ABBR_BOOK_64: "约参",
        ABBR_BOOK_65: "犹",
        ABBR_BOOK_66: "启",
        BOOK_01: "创世纪",
        BOOK_02: "出埃及记",
        BOOK_03: "利未记",
        BOOK_04: "民数记",
        BOOK_05: "申命记",
        BOOK_06: "约书亚记",
        BOOK_07: "士师记",
        BOOK_08: "路得记",
        BOOK_09: "撒母耳记上",
        BOOK_10: "撒母耳记下",
        BOOK_11: "列王记上",
        BOOK_12: "列王记下",
        BOOK_13: "历代志上",
        BOOK_14: "历代志下",
        BOOK_15: "以斯拉记",
        BOOK_16: "尼希米记",
        BOOK_17: "以斯帖记",
        BOOK_18: "约伯记",
        BOOK_19: "诗篇",
        BOOK_20: "箴言",
        BOOK_21: "传道书",
        BOOK_22: "雅歌",
        BOOK_23: "以赛亚书",
        BOOK_24: "耶利米书",
        BOOK_25: "耶利米哀歌",
        BOOK_26: "以西结书",
        BOOK_27: "但以理书",
        BOOK_28: "何西阿书",
        BOOK_29: "约珥书",
        BOOK_30: "阿摩司书",
        BOOK_31: "俄巴底亚书",
        BOOK_32: "约拿书",
        BOOK_33: "弥迦书",
        BOOK_34: "那鸿书",
        BOOK_35: "哈巴谷书",
        BOOK_36: "西番雅书",
        BOOK_37: "哈该书",
        BOOK_38: "撒迦利亚书",
        BOOK_39: "玛拉基书",
        BOOK_40: "马太福音",
        BOOK_41: "马可福音",
        BOOK_42: "路加福音",
        BOOK_43: "约翰福音",
        BOOK_44: "使徒行传",
        BOOK_45: "罗马书",
        BOOK_46: "歌林多前书",
        BOOK_47: "歌林多后书",
        BOOK_48: "加拉太书",
        BOOK_49: "以弗所书",
        BOOK_50: "腓利比书",
        BOOK_51: "歌罗西书",
        BOOK_52: "帖撒罗尼迦前书",
        BOOK_53: "帖撒罗尼迦后书",
        BOOK_54: "提摩太前书",
        BOOK_55: "提摩太后书",
        BOOK_56: "提多书",
        BOOK_57: "腓利门书",
        BOOK_58: "希伯来书",
        BOOK_59: "雅各书",
        BOOK_60: "彼得前书",
        BOOK_61: "彼得后书",
        BOOK_62: "约翰一书",
        BOOK_63: "约翰二书",
        BOOK_64: "约翰三书",
        BOOK_65: "犹大书",
        BOOK_66: "启示录"
    })
});
var toggleSound = function() {
    ionic.Platform.isAndroid() && window.plugins.deviceFeedback.acoustic()
};
ovModule.directive("ngClick", function() {
    return {
        restrict: "A",
        link: function(scope, element) {
            element.bind("click", function() {
                toggleSound()
            })
        },
        controller: function() {}
    }
}).directive("href", function() {
    return {
        restrict: "A",
        link: function(scope, element) {
            element.bind("click", function() {
                toggleSound()
            })
        },
        controller: function() {}
    }
}).directive("toggle", function() {
    return {
        restrict: "C",
        link: function(scope, element) {
            element.bind("click", function() {
                toggleSound()
            })
        },
        controller: function() {}
    }
}).directive("selectToggle", function() {
    return {
        restrict: "A",
        link: function(scope, element) {
            element.bind("click", function() {
                toggleSound()
            })
        },
        controller: function() {}
    }
}), ovModule.factory("API", function($http) {
    return {
        call: function(option) {
            var defaultOption = {
                url: "",
                method: "GET",
                data: {},
                timeout: 1e4
            };
            defaultOption.url = option.url, defaultOption.method = option.method || defaultOption.method, defaultOption.data = option.data || defaultOption.data;
            var deferred = $http({
                url: defaultOption.url,
                method: defaultOption.method,
                cache: !1,
                params: defaultOption.data,
                timeout: 1e4
            });
            deferred.then(function(value) {
                console.log("* POST DATA: " + angular.toJson(defaultOption.data)), console.log("* API call success - URL: " + defaultOption.url), console.log("* RETURN DATA: " + angular.toJson(value)), angular.isDefined(option.success) && option.success(value.data)
            }, function(error) {
                console.log("* API call error - URL: " + defaultOption.url + " status: " + error.status), console.log("* API failure: " + angular.toJson(error)), angular.isDefined(option.failure) && option.failure(error)
            })
        }
    }
}), ovModule.factory("Analytics", function($cordovaGoogleAnalytics, $timeout) {
    return {
        start: function(key) {
            isDevice && (console.log("Analytics - key: " + key), $cordovaGoogleAnalytics.startTrackerWithId(key))
        },
        setUserID: function(uuid) {
            isDevice && (console.log("Analytics - setting uuid"), $timeout(function() {
                "undefined" != typeof uuid && -1 === bypassIds.indexOf(uuid) && $cordovaGoogleAnalytics.setUserId(uuid)
            }, 3e3))
        },
        track: function(name, dimensions) {
            -1 === bypassIds.indexOf(uuidIs) ? (console.log("analytics capturing - " + name), Parse.Analytics.track(name, dimensions)) : console.log(uuidIs + " bypassed")
        },
        trackView: function(viewName) {
            isDevice && (console.log("Analytics - view changed: " + viewName), $cordovaGoogleAnalytics.trackView(viewName))
        },
        trackEvent: function(category, action, label, count) {
            isDevice && (console.log("Analytics - track event / category: " + category + " action: " + action + " label: " + label + " count: " + count), $cordovaGoogleAnalytics.trackEvent(category, action, label, count))
        },
        trackMoney: function(id, item, cost, tax, shipping, currency) {
            if (isDevice) {
                var numberPattern = /\d+(\.\d+)/g,
                    justCost = cost.match(numberPattern);
                console.log("Analytics - track money / id: " + id + " item: " + item + " cost: " + justCost + " tax: " + tax + " shipping: " + shipping + " currency: " + currency), $cordovaGoogleAnalytics.addTransaction(id, item, justCost.toString(), tax.toString(), shipping.toString(), currency).then(function(result) {
                    console.log("Analytics - track money success: " + angular.toJson(result))
                }, function(err) {
                    console.log("Analytics - track money failure: " + err)
                })
            }
        },
        trackException: function(description, fatal) {
            isDevice && "undefined" != typeof window.analytics && $cordovaGoogleAnalytics.trackException(description, fatal)
        }
    }
}), ovModule.factory("Bible", function() {
    return {
        processBooks: function(data) {
            var arr = {};
            return angular.forEach(data, function(val) {
                var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                "undefined" == typeof arr["BOOK_" + bookNumber] && (arr["BOOK_" + bookNumber] = {}), "undefined" == typeof arr["BOOK_" + bookNumber].chapters && (arr["BOOK_" + bookNumber].chapters = {}), arr["BOOK_" + bookNumber].chapters["chapter_" + val.c] = val.v
            }), arr
        }
    }
}), ovModule.factory("Config", function() {
    return {
        setTranslation: function(callback) {
            "undefined" != typeof navigator.globalization && navigator.globalization.getPreferredLanguage(function(language) {
                var localLang = language.value.split("-")[0];
                console.log("localLang is: " + localLang), deviceLanguage = localLang;
                var supportedLangs = ["en", "es", "ko", "zh", "fr"],
                    useLang = "en";
                console.log("supportedLangs.indexOf(localLang): " + supportedLangs.indexOf(localLang)), -1 !== supportedLangs.indexOf(localLang) && (console.log("localLang: use from client - " + localLang), useLang = localLang), callback(useLang)
            }, null), isDevice || callback("en")
        },
        getPlatform: function() {
            return isIOS ? "ios" : "android"
        },
        getUsername: function(uuid) {
            return uuid + "-" + this.getPlatform()
        },
        getUUID: function(callback) {
            isDevice ? window.plugins.uniqueDeviceID.get(function(uuid) {
                console.log("getUUID uuid: " + uuid), callback(uuid)
            }, function(err) {
                console.log("getUUID error: " + angular.toJson(err))
            }) : callback("localhost12345")
        },
        getPassword: function(uuid, secret) {
            return CryptoJS.HmacSHA1(uuid, secret).toString()
        },
        getKey: function(name) {
            return "ga" === name ? "UA-50170929-4" : "ps" === name ? "2FdkMnXKaOQt99xSRKjp5ijq1DyQ5NjtJbgvU2Lv" : null
        },
        getSecret: function(name) {
            return "ps" === name ? "yIwYmFwV3r9895T0vP4KlzGzQ2sfQaMxdBxfG06U" : null
        },
        getAppId: function() {
            return 1009370256
        },
        getPackageName: function() {
            return "com.codeinfaith.oneverse"
        },
        getStoreUrl: function() {
            return ionic.Platform.isIOS() ? "https://itunes.apple.com/us/app/bible-one-verse/id1009370256?ls=1&mt=8" : "https://play.google.com/store/apps/details?id=" + this.getPackageName()
        },
        getLanguages: function() {
            return [{
                display: "ENGLISH_ORIGINAL",
                code: "en"
            }, {
                display: "SPANISH_ORIGINAL",
                code: "es"
            }, {
                display: "KOREAN_ORIGINAL",
                code: "ko"
            }, {
                display: "CHINESE_ORIGINAL",
                code: "zh"
            }, {
                display: "FRENCH_ORIGINAL",
                code: "fr"
            }]
        },
        getOriginalLangNames: function(transCode) {
            var origs = {
                ENGLISH_ORIGINAL: "English",
                SPANISH_ORIGINAL: "Español",
                KOREAN_ORIGINAL: "한국어",
                CHINESE_ORIGINAL: "简体中文",
                FRENCH_ORIGINAL: "Français"
            };
            return origs[transCode]
        },
        getSpeechLanguage: function(lang) {
            var mapping = {
                ko: "ko-KR",
                en: "en-US"
            };
            return mapping[lang]
        },
        getThemes: function() {
            return [{
                name: "LIGHT",
                code: "one",
                pro: !1,
                book: "BOOK_43",
                chapter: 12,
                verse: 46
            }, {
                name: "DARK",
                code: "two",
                pro: !1,
                book: "BOOK_44",
                chapter: 18,
                verse: 9
            }, {
                name: "FLOWER",
                code: "flower",
                pro: !0,
                book: "BOOK_02",
                chapter: 25,
                verse: 33
            }, {
                name: "LEAF",
                code: "leaf",
                pro: !0,
                book: "BOOK_24",
                chapter: 17,
                verse: 8
            }, {
                name: "WATER",
                code: "water",
                pro: !0,
                book: "BOOK_43",
                chapter: 7,
                verse: 38
            }, {
                name: "FIRE",
                code: "fire",
                pro: !0,
                book: "BOOK_19",
                chapter: 105,
                verse: 39
            }, {
                name: "SNOW",
                code: "snow",
                pro: !0,
                book: "BOOK_23",
                chapter: 1,
                verse: 18
            }]
        },
        getFonts: function() {
            return [{
                name: "FONT_SANS_SERIF",
                code: "sans-serif"
            }, {
                name: "FONT_SERIF",
                code: "serif"
            }]
        },
        getIndexByBookname: function(lang, bookname) {
            var booklist;
            return "en" === lang ? booklist = ["Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua", "Judges", "Ruth", "1 Samuel", "2 Samuel", "1 Kings", "2 Kings", "1 Chronicles", "2 Chronicles", "Ezra", "Nehemiah", "Esther", "Job", "Psalms", "Proverbs", "Ecclesiastes", "Song of Songs", "Isaiah", "Jeremiah", "Lamentations", "Ezekiel", "Daniel", "Hosea", "Joel", "Amos", "Obadiah", "Jonah", "Micah", "Nahum", "Habakkuk", "Zephaniah", "Haggai", "Zechariah", "Malachi", "Matthew", "Mark", "Luke", "John", "Acts", "Romans", "1 Corinthians", "2 Corinthians", "Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians", "2 Thessalonians", "1 Timothy", "2 Timothy", "Titus", "Philemon", "Hebrews", "James", "1 Peter", "2 Peter", "1 John", "2 John", "3 John", "Jude", "Revelation"] : "ko" === lang && (booklist = ["창세기", "출애굽기", "레위기", "민수기", "신명기", "여호수아", "사사기", "룻기", "사무엘상", "사무엘하", "열왕기상", "열왕기하", "역대상", "역대하", "에스라", "느헤미야", "에스더", "욥기", "시편", "잠언", "전도서", "아가", "이사야", "예레미야", "예레미야애가", "에스겔", "다니엘", "호세아", "요엘", "아모스", "오바댜", "요나", "미가", "나훔", "하박국", "스바냐", "학개", "스가랴", "말라기", "마태복음", "마가복음", "누가복음", "요한복음", "사도행전", "로마서", "고린도전서", "고린도후서", "갈라디아서", "에베소서", "빌립보서", "골로새서", "데살로니가전서", "데살로니가후서", "디모데전서", "디모데후서", "디도서", "빌레몬서", "히브리서", "야고보서", "베드로전서", "베드로후서", "요한일서", "요한이서", "요한삼서", "유다서", "요한계시록"]), booklist.indexOf(bookname) + 1
        },
        getIntroVersion: function() {
            return 1
        }
    }
}), ovModule.factory("DB", function() {
    return {
        create: function() {
            console.log("SQLITE:DROP_DB create() called");
            var db = this.open("oneverse");
            db.transaction(function(tx) {
                tx.executeSql("CREATE TABLE IF NOT EXISTS tag (id integer primary key, tagName text, note text, language text, createdAt text, privacy text, syncID text, syncedAt text, isDeleted integer)"), tx.executeSql("CREATE TABLE IF NOT EXISTS tagVerse (id integer primary key, tagId integer REFERENCES tag(id) ON DELETE CASCADE, bibleId text, createdAt text, syncID text, syncedAt text, isDeleted integer)")
            })
        },
        drop: function(callback) {
            console.log("SQLITE:DROP_DB drop() called");
            var db = this.open("oneverse");
            db.transaction(function(tx) {
                var query = "DROP TABLE IF EXISTS tag";
                tx.executeSql(query, [], function() {});
                var query2 = "DROP TABLE IF EXISTS tagVerse";
                tx.executeSql(query2, [], function() {
                    callback()
                })
            })
        },
        open: function(dbName) {
            var db = null;
            return "undefined" != typeof window.sqlitePlugin && (db = window.sqlitePlugin.openDatabase(ionic.Platform.isAndroid() ? {
                name: dbName + ".db",
                androidDatabaseImplementation: 2,
                androidLockWorkaround: 1
            } : {
                name: dbName + ".db",
                location: 2,
                createFromLocation: 1
            }), console.log("open database: " + angular.toJson(db))), db
        },
        preload: function(dbName, callback) {
            "undefined" != typeof window.plugins && window.plugins.sqlDB.copy(dbName + ".db", function() {
                console.log("db copied successfully"), callback()
            }, function(err) {
                console.log("db copy error: " + angular.toJson(err)), callback()
            })
        },
        select: function(db, table, field, extraClause, callback) {
            db.transaction(function(tx) {
                var query = "SELECT " + field + " FROM " + table;
                extraClause.length > 0 && (query += " " + extraClause + ";"), tx.executeSql(query, [], function(tx, res) {
                    for (var result = [], i = 0; i < res.rows.length; i++) result.push(res.rows.item(i));
                    callback(result)
                })
            }, function(e) {
                console.log("DB ERROR: " + e.message)
            })
        },
        "delete": function(db, table, extraClause, callback) {
            db.transaction(function(tx) {
                var query = "DELETE FROM " + table + " WHERE " + extraClause;
                tx.executeSql(query, [], function(tx, res) {
                    callback(res)
                })
            }, function(e) {
                console.log("DB delete ERROR: " + e.message)
            })
        },
        update: function(db, table, setClause, whereClause, callback) {
            console.log("SQL: DB.update() called"), db.transaction(function(tx) {
                var query = "UPDATE " + table + " SET " + setClause + " WHERE " + whereClause;
                console.log("SQL: query - " + query), tx.executeSql(query, [], function(tx, res) {
                    callback(res)
                })
            }, function(e) {
                console.log("DB update ERROR: " + e.message)
            })
        }
    }
}), ovModule.factory("Debug", function() {
    return {
        getBibleData: function() {
            return [{
                version: "kjv",
                book: "BOOK_43",
                verses: [{
                    id: 43001001,
                    b: 43,
                    c: 1,
                    v: 1,
                    t: "In the beginning was the Word, and the Word was with God, and the Word was God.",
                    tags: [{
                        id: 3,
                        tagName: "holy spirit",
                        note: null,
                        language: "en",
                        createdAt: "1441857753381",
                        privacy: "private",
                        syncID: "r2OnVzU4lb",
                        syncedAt: "1441857753381",
                        isDeleted: "false"
                    }]
                }, {
                    id: 43001002,
                    b: 43,
                    c: 1,
                    v: 2,
                    t: "The same was in the beginning with God."
                }, {
                    id: 43001003,
                    b: 43,
                    c: 1,
                    v: 3,
                    t: "All things were made by him; and without him was not any thing made that was made."
                }, {
                    id: 43001004,
                    b: 43,
                    c: 1,
                    v: 4,
                    t: "In him was life; and the life was the light of men."
                }, {
                    id: 43001005,
                    b: 43,
                    c: 1,
                    v: 5,
                    t: "And the light shineth in darkness; and the darkness comprehended it not."
                }, {
                    id: 43001006,
                    b: 43,
                    c: 1,
                    v: 6,
                    t: "There was a man sent from God, whose name was John."
                }, {
                    id: 43001007,
                    b: 43,
                    c: 1,
                    v: 7,
                    t: "The same came for a witness, to bear witness of the Light, that all men through him might believe."
                }, {
                    id: 43001008,
                    b: 43,
                    c: 1,
                    v: 8,
                    t: "He was not that Light, but was sent to bear witness of that Light."
                }, {
                    id: 43001009,
                    b: 43,
                    c: 1,
                    v: 9,
                    t: "That was the true Light, which lighteth every man that cometh into the world."
                }, {
                    id: 43001010,
                    b: 43,
                    c: 1,
                    v: 10,
                    t: "He was in the world, and the world was made by him, and the world knew him not."
                }, {
                    id: 43001011,
                    b: 43,
                    c: 1,
                    v: 11,
                    t: "He came unto his own, and his own received him not."
                }, {
                    id: 43001012,
                    b: 43,
                    c: 1,
                    v: 12,
                    t: "But as many as received him, to them gave he power to become the sons of God, even to them that believe on his name:"
                }, {
                    id: 43001013,
                    b: 43,
                    c: 1,
                    v: 13,
                    t: "Which were born, not of blood, nor of the will of the flesh, nor of the will of man, but of God."
                }, {
                    id: 43001014,
                    b: 43,
                    c: 1,
                    v: 14,
                    t: "And the Word was made flesh, and dwelt among us, (and we beheld his glory, the glory as of the only begotten of the Father,) full of grace and truth."
                }, {
                    id: 43001015,
                    b: 43,
                    c: 1,
                    v: 15,
                    t: "John bare witness of him, and cried, saying, This was he of whom I spake, He that cometh after me is preferred before me: for he was before me."
                }, {
                    id: 43001016,
                    b: 43,
                    c: 1,
                    v: 16,
                    t: "And of his fulness have all we received, and grace for grace."
                }, {
                    id: 43001017,
                    b: 43,
                    c: 1,
                    v: 17,
                    t: "For the law was given by Moses, but grace and truth came by Jesus Christ."
                }, {
                    id: 43001018,
                    b: 43,
                    c: 1,
                    v: 18,
                    t: "No man hath seen God at any time, the only begotten Son, which is in the bosom of the Father, he hath declared him."
                }, {
                    id: 43001019,
                    b: 43,
                    c: 1,
                    v: 19,
                    t: "And this is the record of John, when the Jews sent priests and Levites from Jerusalem to ask him, Who art thou?"
                }, {
                    id: 43001020,
                    b: 43,
                    c: 1,
                    v: 20,
                    t: "And he confessed, and denied not; but confessed, I am not the Christ."
                }, {
                    id: 43001021,
                    b: 43,
                    c: 1,
                    v: 21,
                    t: "And they asked him, What then? Art thou Elias? And he saith, I am not. Art thou that prophet? And he answered, No."
                }, {
                    id: 43001022,
                    b: 43,
                    c: 1,
                    v: 22,
                    t: "Then said they unto him, Who art thou? that we may give an answer to them that sent us. What sayest thou of thyself?"
                }, {
                    id: 43001023,
                    b: 43,
                    c: 1,
                    v: 23,
                    t: "He said, I am the voice of one crying in the wilderness, Make straight the way of the Lord, as said the prophet Esaias."
                }, {
                    id: 43001024,
                    b: 43,
                    c: 1,
                    v: 24,
                    t: "And they which were sent were of the Pharisees."
                }, {
                    id: 43001025,
                    b: 43,
                    c: 1,
                    v: 25,
                    t: "And they asked him, and said unto him, Why baptizest thou then, if thou be not that Christ, nor Elias, neither that prophet?"
                }, {
                    id: 43001026,
                    b: 43,
                    c: 1,
                    v: 26,
                    t: "John answered them, saying, I baptize with water: but there standeth one among you, whom ye know not;"
                }, {
                    id: 43001027,
                    b: 43,
                    c: 1,
                    v: 27,
                    t: "He it is, who coming after me is preferred before me, whose shoe's latchet I am not worthy to unloose."
                }, {
                    id: 43001028,
                    b: 43,
                    c: 1,
                    v: 28,
                    t: "These things were done in Bethabara beyond Jordan, where John was baptizing."
                }, {
                    id: 43001029,
                    b: 43,
                    c: 1,
                    v: 29,
                    t: "The next day John seeth Jesus coming unto him, and saith, Behold the Lamb of God, which taketh away the sin of the world."
                }, {
                    id: 43001030,
                    b: 43,
                    c: 1,
                    v: 30,
                    t: "This is he of whom I said, After me cometh a man which is preferred before me: for he was before me."
                }]
            }, {
                version: "asv",
                book: "BOOK_43",
                verses: [{
                    id: 43001001,
                    b: 43,
                    c: 1,
                    v: 1,
                    t: "In the beginning was the Word, and the Word was with God, and the Word was God."
                }, {
                    id: 43001002,
                    b: 43,
                    c: 1,
                    v: 2,
                    t: "He was in the beginning with God."
                }, {
                    id: 43001003,
                    b: 43,
                    c: 1,
                    v: 3,
                    t: "All things came into being through Him, and apart from Him nothing came into being that has come into being."
                }, {
                    id: 43001004,
                    b: 43,
                    c: 1,
                    v: 4,
                    t: "In Him was life, and the life was the Light of men."
                }, {
                    id: 43001005,
                    b: 43,
                    c: 1,
                    v: 5,
                    t: "And the light shineth in darkness; and the darkness comprehended it not."
                }, {
                    id: 43001006,
                    b: 43,
                    c: 1,
                    v: 6,
                    t: "There was a man sent from God, whose name was John"
                }, {
                    id: 43001007,
                    b: 43,
                    c: 1,
                    v: 7,
                    t: "The same came for a witness, to bear witness of the Light, that all men through him might believe."
                }, {
                    id: 43001008,
                    b: 43,
                    c: 1,
                    v: 8,
                    t: "He was not that Light, but was sent to bear witness of that Light."
                }, {
                    id: 43001009,
                    b: 43,
                    c: 1,
                    v: 9,
                    t: "That was the true Light, which lighteth every man that cometh into the world."
                }, {
                    id: 43001010,
                    b: 43,
                    c: 1,
                    v: 10,
                    t: "He was in the world, and the world was made by him, and the world knew him not."
                }, {
                    id: 43001011,
                    b: 43,
                    c: 1,
                    v: 11,
                    t: "He came unto his own, and his own received him not."
                }, {
                    id: 43001012,
                    b: 43,
                    c: 1,
                    v: 12,
                    t: "But as many as received him, to them gave he power to become the sons of God, even to them that believe on his name:"
                }, {
                    id: 43001013,
                    b: 43,
                    c: 1,
                    v: 13,
                    t: "Which were born, not of blood, nor of the will of the flesh, nor of the will of man, but of God."
                }, {
                    id: 43001014,
                    b: 43,
                    c: 1,
                    v: 14,
                    t: "And the Word was made flesh, and dwelt among us, (and we beheld his glory, the glory as of the only begotten of the Father,) full of grace and truth."
                }, {
                    id: 43001015,
                    b: 43,
                    c: 1,
                    v: 15,
                    t: "John bare witness of him, and cried, saying, This was he of whom I spake, He that cometh after me is preferred before me: for he was before me."
                }, {
                    id: 43001016,
                    b: 43,
                    c: 1,
                    v: 16,
                    t: "And of his fulness have all we received, and grace for grace."
                }, {
                    id: 43001017,
                    b: 43,
                    c: 1,
                    v: 17,
                    t: "For the law was given by Moses, but grace and truth came by Jesus Christ."
                }, {
                    id: 43001018,
                    b: 43,
                    c: 1,
                    v: 18,
                    t: "No man hath seen God at any time, the only begotten Son, which is in the bosom of the Father, he hath declared him."
                }, {
                    id: 43001019,
                    b: 43,
                    c: 1,
                    v: 19,
                    t: "And this is the record of John, when the Jews sent priests and Levites from Jerusalem to ask him, Who art thou?"
                }, {
                    id: 43001020,
                    b: 43,
                    c: 1,
                    v: 20,
                    t: "And he confessed, and denied not; but confessed, I am not the Christ."
                }, {
                    id: 43001021,
                    b: 43,
                    c: 1,
                    v: 21,
                    t: "And they asked him, What then? Art thou Elias? And he saith, I am not. Art thou that prophet? And he answered, No."
                }, {
                    id: 43001022,
                    b: 43,
                    c: 1,
                    v: 22,
                    t: "Then said they unto him, Who art thou? that we may give an answer to them that sent us. What sayest thou of thyself?"
                }, {
                    id: 43001023,
                    b: 43,
                    c: 1,
                    v: 23,
                    t: "He said, I am the voice of one crying in the wilderness, Make straight the way of the Lord, as said the prophet Esaias."
                }, {
                    id: 43001024,
                    b: 43,
                    c: 1,
                    v: 24,
                    t: "And they which were sent were of the Pharisees."
                }, {
                    id: 43001025,
                    b: 43,
                    c: 1,
                    v: 25,
                    t: "And they asked him, and said unto him, Why baptizest thou then, if thou be not that Christ, nor Elias, neither that prophet?"
                }, {
                    id: 43001026,
                    b: 43,
                    c: 1,
                    v: 26,
                    t: "John answered them, saying, I baptize with water: but there standeth one among you, whom ye know not;"
                }, {
                    id: 43001027,
                    b: 43,
                    c: 1,
                    v: 27,
                    t: "He it is, who coming after me is preferred before me, whose shoe's latchet I am not worthy to unloose."
                }, {
                    id: 43001028,
                    b: 43,
                    c: 1,
                    v: 28,
                    t: "These things were done in Bethabara beyond Jordan, where John was baptizing."
                }, {
                    id: 43001029,
                    b: 43,
                    c: 1,
                    v: 29,
                    t: "The next day John seeth Jesus coming unto him, and saith, Behold the Lamb of God, which taketh away the sin of the world."
                }, {
                    id: 43001030,
                    b: 43,
                    c: 1,
                    v: 30,
                    t: "This is he of whom I said, After me cometh a man which is preferred before me: for he was before me."
                }]
            }]
        },
        books: function() {
            return [{
                b: 43,
                c: 1,
                v: 31
            }, {
                b: 43,
                c: 2,
                v: 25
            }, {
                b: 43,
                c: 3,
                v: 24
            }, {
                b: 43,
                c: 4,
                v: 26
            }, {
                b: 43,
                c: 5,
                v: 32
            }, {
                b: 43,
                c: 6,
                v: 22
            }, {
                b: 43,
                c: 7,
                v: 24
            }, {
                b: 43,
                c: 8,
                v: 22
            }, {
                b: 43,
                c: 9,
                v: 29
            }, {
                b: 43,
                c: 10,
                v: 32
            }, {
                b: 43,
                c: 11,
                v: 32
            }, {
                b: 43,
                c: 12,
                v: 20
            }, {
                b: 43,
                c: 13,
                v: 18
            }, {
                b: 43,
                c: 14,
                v: 24
            }, {
                b: 43,
                c: 15,
                v: 21
            }, {
                b: 43,
                c: 16,
                v: 16
            }, {
                b: 43,
                c: 17,
                v: 27
            }, {
                b: 43,
                c: 18,
                v: 33
            }, {
                b: 43,
                c: 19,
                v: 38
            }, {
                b: 43,
                c: 20,
                v: 18
            }, {
                b: 43,
                c: 21,
                v: 34
            }, {
                b: 43,
                c: 22,
                v: 24
            }, {
                b: 43,
                c: 23,
                v: 20
            }, {
                b: 43,
                c: 24,
                v: 67
            }, {
                b: 43,
                c: 25,
                v: 34
            }, {
                b: 43,
                c: 26,
                v: 35
            }, {
                b: 43,
                c: 27,
                v: 46
            }, {
                b: 43,
                c: 28,
                v: 22
            }, {
                b: 43,
                c: 29,
                v: 35
            }, {
                b: 43,
                c: 30,
                v: 43
            }, {
                b: 43,
                c: 31,
                v: 55
            }, {
                b: 43,
                c: 32,
                v: 32
            }, {
                b: 43,
                c: 33,
                v: 20
            }, {
                b: 43,
                c: 34,
                v: 31
            }, {
                b: 43,
                c: 35,
                v: 29
            }, {
                b: 43,
                c: 36,
                v: 43
            }, {
                b: 43,
                c: 37,
                v: 36
            }, {
                b: 43,
                c: 38,
                v: 30
            }, {
                b: 43,
                c: 39,
                v: 23
            }, {
                b: 43,
                c: 40,
                v: 23
            }, {
                b: 43,
                c: 41,
                v: 57
            }, {
                b: 43,
                c: 42,
                v: 38
            }, {
                b: 43,
                c: 43,
                v: 34
            }, {
                b: 43,
                c: 44,
                v: 34
            }, {
                b: 43,
                c: 45,
                v: 28
            }, {
                b: 43,
                c: 46,
                v: 34
            }, {
                b: 43,
                c: 47,
                v: 31
            }, {
                b: 43,
                c: 48,
                v: 22
            }, {
                b: 43,
                c: 49,
                v: 33
            }, {
                b: 43,
                c: 50,
                v: 26
            }, {
                b: 2,
                c: 1,
                v: 22
            }, {
                b: 2,
                c: 2,
                v: 25
            }, {
                b: 2,
                c: 3,
                v: 22
            }, {
                b: 2,
                c: 4,
                v: 31
            }, {
                b: 2,
                c: 5,
                v: 23
            }, {
                b: 2,
                c: 6,
                v: 30
            }, {
                b: 2,
                c: 7,
                v: 25
            }, {
                b: 2,
                c: 8,
                v: 32
            }, {
                b: 2,
                c: 9,
                v: 35
            }, {
                b: 2,
                c: 10,
                v: 29
            }, {
                b: 2,
                c: 11,
                v: 10
            }, {
                b: 2,
                c: 12,
                v: 51
            }, {
                b: 2,
                c: 13,
                v: 22
            }, {
                b: 2,
                c: 14,
                v: 31
            }, {
                b: 2,
                c: 15,
                v: 27
            }, {
                b: 2,
                c: 16,
                v: 36
            }, {
                b: 2,
                c: 17,
                v: 16
            }, {
                b: 2,
                c: 18,
                v: 27
            }, {
                b: 2,
                c: 19,
                v: 25
            }, {
                b: 2,
                c: 20,
                v: 26
            }, {
                b: 2,
                c: 21,
                v: 36
            }, {
                b: 2,
                c: 22,
                v: 31
            }, {
                b: 2,
                c: 23,
                v: 33
            }, {
                b: 2,
                c: 24,
                v: 18
            }, {
                b: 2,
                c: 25,
                v: 40
            }, {
                b: 2,
                c: 26,
                v: 37
            }, {
                b: 2,
                c: 27,
                v: 21
            }, {
                b: 2,
                c: 28,
                v: 43
            }, {
                b: 2,
                c: 29,
                v: 46
            }, {
                b: 2,
                c: 30,
                v: 38
            }, {
                b: 2,
                c: 31,
                v: 18
            }, {
                b: 2,
                c: 32,
                v: 35
            }, {
                b: 2,
                c: 33,
                v: 23
            }, {
                b: 2,
                c: 34,
                v: 35
            }, {
                b: 2,
                c: 35,
                v: 35
            }, {
                b: 2,
                c: 36,
                v: 38
            }, {
                b: 2,
                c: 37,
                v: 29
            }, {
                b: 2,
                c: 38,
                v: 31
            }, {
                b: 2,
                c: 39,
                v: 43
            }, {
                b: 2,
                c: 40,
                v: 38
            }, {
                b: 3,
                c: 1,
                v: 17
            }, {
                b: 3,
                c: 2,
                v: 16
            }, {
                b: 3,
                c: 3,
                v: 17
            }, {
                b: 3,
                c: 4,
                v: 35
            }, {
                b: 3,
                c: 5,
                v: 19
            }, {
                b: 3,
                c: 6,
                v: 30
            }, {
                b: 3,
                c: 7,
                v: 38
            }, {
                b: 3,
                c: 8,
                v: 36
            }, {
                b: 3,
                c: 9,
                v: 24
            }, {
                b: 3,
                c: 10,
                v: 20
            }, {
                b: 3,
                c: 11,
                v: 47
            }, {
                b: 3,
                c: 12,
                v: 8
            }, {
                b: 3,
                c: 13,
                v: 59
            }, {
                b: 3,
                c: 14,
                v: 57
            }, {
                b: 3,
                c: 15,
                v: 33
            }, {
                b: 3,
                c: 16,
                v: 34
            }, {
                b: 3,
                c: 17,
                v: 16
            }, {
                b: 3,
                c: 18,
                v: 30
            }, {
                b: 3,
                c: 19,
                v: 37
            }, {
                b: 3,
                c: 20,
                v: 27
            }, {
                b: 3,
                c: 21,
                v: 24
            }, {
                b: 3,
                c: 22,
                v: 33
            }, {
                b: 3,
                c: 23,
                v: 44
            }, {
                b: 3,
                c: 24,
                v: 23
            }, {
                b: 3,
                c: 25,
                v: 55
            }, {
                b: 3,
                c: 26,
                v: 46
            }, {
                b: 3,
                c: 27,
                v: 34
            }, {
                b: 4,
                c: 1,
                v: 54
            }, {
                b: 4,
                c: 2,
                v: 34
            }, {
                b: 4,
                c: 3,
                v: 51
            }, {
                b: 4,
                c: 4,
                v: 49
            }, {
                b: 4,
                c: 5,
                v: 31
            }, {
                b: 4,
                c: 6,
                v: 27
            }, {
                b: 4,
                c: 7,
                v: 89
            }, {
                b: 4,
                c: 8,
                v: 26
            }, {
                b: 4,
                c: 9,
                v: 23
            }, {
                b: 4,
                c: 10,
                v: 36
            }, {
                b: 4,
                c: 11,
                v: 35
            }, {
                b: 4,
                c: 12,
                v: 16
            }, {
                b: 4,
                c: 13,
                v: 33
            }, {
                b: 4,
                c: 14,
                v: 45
            }, {
                b: 4,
                c: 15,
                v: 41
            }, {
                b: 4,
                c: 16,
                v: 50
            }, {
                b: 4,
                c: 17,
                v: 13
            }, {
                b: 4,
                c: 18,
                v: 32
            }, {
                b: 4,
                c: 19,
                v: 22
            }, {
                b: 4,
                c: 20,
                v: 29
            }, {
                b: 4,
                c: 21,
                v: 35
            }, {
                b: 4,
                c: 22,
                v: 41
            }, {
                b: 4,
                c: 23,
                v: 30
            }, {
                b: 4,
                c: 24,
                v: 25
            }, {
                b: 4,
                c: 25,
                v: 18
            }, {
                b: 4,
                c: 26,
                v: 65
            }, {
                b: 4,
                c: 27,
                v: 23
            }, {
                b: 4,
                c: 28,
                v: 31
            }, {
                b: 4,
                c: 29,
                v: 40
            }, {
                b: 4,
                c: 30,
                v: 16
            }, {
                b: 4,
                c: 31,
                v: 54
            }, {
                b: 4,
                c: 32,
                v: 42
            }, {
                b: 4,
                c: 33,
                v: 56
            }, {
                b: 4,
                c: 34,
                v: 29
            }, {
                b: 4,
                c: 35,
                v: 34
            }, {
                b: 4,
                c: 36,
                v: 13
            }, {
                b: 5,
                c: 1,
                v: 46
            }, {
                b: 5,
                c: 2,
                v: 37
            }, {
                b: 5,
                c: 3,
                v: 29
            }, {
                b: 5,
                c: 4,
                v: 49
            }, {
                b: 5,
                c: 5,
                v: 33
            }, {
                b: 5,
                c: 6,
                v: 25
            }, {
                b: 5,
                c: 7,
                v: 26
            }, {
                b: 5,
                c: 8,
                v: 20
            }, {
                b: 5,
                c: 9,
                v: 29
            }, {
                b: 5,
                c: 10,
                v: 22
            }, {
                b: 5,
                c: 11,
                v: 32
            }, {
                b: 5,
                c: 12,
                v: 32
            }, {
                b: 5,
                c: 13,
                v: 18
            }, {
                b: 5,
                c: 14,
                v: 29
            }, {
                b: 5,
                c: 15,
                v: 23
            }, {
                b: 5,
                c: 16,
                v: 22
            }, {
                b: 5,
                c: 17,
                v: 20
            }, {
                b: 5,
                c: 18,
                v: 22
            }, {
                b: 5,
                c: 19,
                v: 21
            }, {
                b: 5,
                c: 20,
                v: 20
            }, {
                b: 5,
                c: 21,
                v: 23
            }, {
                b: 5,
                c: 22,
                v: 30
            }, {
                b: 5,
                c: 23,
                v: 25
            }, {
                b: 5,
                c: 24,
                v: 22
            }, {
                b: 5,
                c: 25,
                v: 19
            }, {
                b: 5,
                c: 26,
                v: 19
            }, {
                b: 5,
                c: 27,
                v: 26
            }, {
                b: 5,
                c: 28,
                v: 68
            }, {
                b: 5,
                c: 29,
                v: 29
            }, {
                b: 5,
                c: 30,
                v: 20
            }, {
                b: 5,
                c: 31,
                v: 30
            }, {
                b: 5,
                c: 32,
                v: 52
            }]
        },
        allTags: function() {
            return [{
                id: 1,
                tagName: "tthhfcv",
                note: null,
                language: "en",
                createdAt: "2015-06-23T03:24:09.766Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 2,
                tagName: "tagtest",
                note: null,
                language: "en",
                createdAt: "2015-06-23T05:42:53.421Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "true"
            }, {
                id: 3,
                tagName: "crazy",
                note: null,
                language: "en",
                createdAt: "2015-06-23T18:09:25.630Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 4,
                tagName: "trst",
                note: null,
                language: "en",
                createdAt: "2015-06-23T18:15:19.452Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 5,
                tagName: "test",
                note: null,
                language: "en",
                createdAt: "2015-06-23T18:29:39.202Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 6,
                tagName: "wow",
                note: null,
                language: "ko",
                createdAt: "2015-06-24T01:25:19.554Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 7,
                tagName: "네비게이토 성경암송 60구절",
                note: null,
                language: "ko",
                createdAt: "2015-06-24T01:57:43.850Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }]
        },
        history: function() {
            return [{
                book: 43,
                chapter: 1,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 2,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 3,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 4,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 5,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 6,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 7,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 8,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 9,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 10,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 11,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 12,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 13,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 14,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }]
        }
    }
}), ovModule.factory("File", function($cordovaFileTransfer, $cordovaFile, $timeout, Config, Model, ParseFactory) {
    return {
        getTargetPath: function() {
            var targetPath = "";
            return ionic.Platform.isAndroid() ? targetPath = "/data/data/" + Config.getPackageName() + "/databases/" : ionic.Platform.isIOS() && (targetPath = cordova.file.dataDirectory), targetPath
        },
        download: function(filename, successCallback, errorCallback) {
            console.log("download filename: " + filename);
            var targetPath = this.getTargetPath();
            ParseFactory.find({
                className: "BibleVersions",
                equalTo: [{
                    field: "bibleCode",
                    value: filename
                }]
            }, function(result) {
                if ("undefined" != typeof result) {
                    var url = encodeURI(result.get("bibleFile").url()),
                        options = {},
                        trustHosts = !0;
                    $cordovaFileTransfer.download(url, targetPath + filename + ".db", options, trustHosts).then(function(result) {
                        console.log("download " + url + " to " + targetPath + " succeeded : " + angular.toJson(result)), successCallback()
                    }, function(err) {
                        console.log("download error: " + angular.toJson(err))
                    }, function() {})
                } else errorCallback()
            }, function(err) {
                console.log("File.download error: " + angular.toJson(err)), errorCallback()
            })
        },
        getInitData: function($scope, successCallback, errorCallback) {
            var filesToDownload = [{
                    bibleCode: "bible"
                }, {
                    bibleCode: "kjv"
                }],
                lang = $scope.meta.settings.language;
            filesToDownload.push("ko" === lang ? {
                bibleCode: "krv"
            } : "zh" === lang ? {
                bibleCode: "cuv"
            } : {
                bibleCode: "asv"
            });
            var totalFileSize = 26116589972,
                progressFileSize = 0,
                targetPath = this.getTargetPath();
            $scope.downloadProgress = 0;
            var bibleMeta = Model.fetch("bible_meta");
            bibleMeta.versions = [], bibleMeta.downloads = [];
            var downloadData = function(files) {
                var filesToUse = angular.copy(files),
                    file = filesToUse.pop();
                "undefined" != typeof file && ParseFactory.find({
                    className: "BibleVersions",
                    equalTo: [{
                        field: "bibleCode",
                        value: file.bibleCode
                    }]
                }, function(result) {
                    var url = encodeURI(result.get("bibleFile").url()),
                        trustHosts = !0,
                        options = {};
                    $cordovaFileTransfer.download(url, targetPath + file.bibleCode + ".db", options, trustHosts).then(function(result) {
                        console.log("Parse: download " + url + " to " + targetPath + " succeeded : " + angular.toJson(result)), console.log("filesToUse: " + filesToUse), "bible" !== file.bibleCode && -1 == bibleMeta.versions.indexOf(file.bibleCode) && (bibleMeta.versions.push(file.bibleCode), bibleMeta.downloads.push(file.bibleCode)), filesToUse.length > 0 ? downloadData(filesToUse) : ($scope.$$phase ? $scope.downloadProgress = 100 : $scope.$apply(function() {
                            $scope.downloadProgress = 100
                        }), $scope.bibleMeta = Model.save(bibleMeta, "bible_meta"), successCallback())
                    }, function(err) {
                        console.log("Parse: download error: " + angular.toJson(err))
                    }, function(progress) {
                        $timeout(function() {
                            progressFileSize += parseInt(progress.loaded), $scope.downloadProgress = parseInt(progressFileSize / totalFileSize * 100), $scope.downloadProgress > 100 && ($scope.$$phase ? $scope.downloadProgress = 100 : $scope.$apply(function() {
                                $scope.downloadProgress = 100
                            }))
                        })
                    })
                }, function(err) {
                    console.log("Parse error download init data: " + angular.toJson(err)), errorCallback()
                })
            };
            downloadData(filesToDownload)
        }
    }
}), ovModule.factory("Model", function() {
    return {
        generateKey: function(key) {
            return "ONEVERSE_" + key
        },
        fetch: function(key) {
            console.log("fetch : " + key);
            var fromStorage = window.localStorage[this.generateKey(key)];
            return fromStorage || (fromStorage = this.getSchema(this.generateKey(key)), this.save(fromStorage, key)), angular.fromJson(fromStorage)
        },
        save: function(data, key) {
            console.log("save : " + key), key = this.generateKey(key), window.localStorage[key] = angular.toJson(data)
        },
        getSchema: function(key) {
            return key === this.generateKey("settings") ? {
                language: null,
                theme: "one",
                font: "sans-serif",
                appVersion: "0.0.0",
                sharedCount: 0,
                introVersion: []
            } : key === this.generateKey("device") ? {
                init: !0,
                ios_no_cloud: !0,
                font: 25,
                font_allverse: 20,
                showFooter: !1,
                allverse: 1,
                limitchar: 65,
                showtags: !0
            } : key === this.generateKey("bible_meta") ? {
                versions: ["asv", "kjv"],
                downloads: ["asv", "kjv"],
                version: "kjv",
                book: 43,
                chapter: 1,
                verse: 1
            } : key === this.generateKey("history") ? [] : key === this.generateKey("supportedVersions") ? {} : key === this.generateKey("app") ? {} : key === this.generateKey("sync") ? {} : key === this.generateKey("local") ? {
                bibleListVersion: 0
            } : key === this.generateKey("localBibleVersions") ? {} : key === this.generateKey("supportedVersionsMeta") ? {} : key === this.generateKey("userprofile") ? {} : key === this.generateKey("expiresAt") ? {} : key === this.generateKey("memoryVerses") ? [] : null
        },
        fifo: function(key, jsonData, limit) {
            var fromStorage = this.fetch(key);
            return fromStorage.length > limit && fromStorage.pop(), fromStorage.unshift(jsonData), fromStorage
        },
        collectHistory: function(jsonData) {
            console.log("collectHistory called with : " + angular.toJson(jsonData));
            var key = "history",
                fromStorage = this.fetch(key);
            if (fromStorage.length > 0) {
                var firstItem = fromStorage[0];
                firstItem.book === jsonData.book && firstItem.chapter === jsonData.chapter ? (console.log("book and chapter same"), firstItem.verse = jsonData.verse, firstItem.date = moment().format("MMMM Do YYYY, h:mm:ss a"), fromStorage[0] = firstItem) : fromStorage = this.fifo(key, jsonData, 99)
            } else console.log("not found, so pushing"), fromStorage.push(jsonData);
            return this.save(fromStorage, key), fromStorage
        }
    }
}), ovModule.factory("ParseFactory", function(Config) {
    return {
        start: function() {
            Parse.initialize(Config.getKey("ps"), Config.getSecret("ps"))
        },
        signUp: function(option, app, successCallback, errorCallback) {
            console.log("parseFactory signUp called");
            var user = new Parse.User,
                username = (Config.getPlatform(), option.email),
                password = Config.getPassword(option.email, app.gateway);
            "direct" === option.provider && (password = option.password);
            var getCurrentOrLogin = this.getCurrentOrLogin;
            user.set("username", username), user.set("password", password), user.set("email", username), "undefined" != typeof option.picture && user.set("picture", option.picture), "undefined" != typeof option.name && user.set("name", option.name), "undefined" != typeof option.language && user.set("language", option.language), "undefined" != typeof option.deviceLanguage && user.set("deviceLanguage", option.deviceLanguage), user.set("provider", option.provider), user.signUp(null, {
                success: function(user) {
                    console.log("parseService.signUp - signup succeeded"), console.log("user: " + angular.toJson(user)), successCallback(user)
                },
                error: function(user, error) {
                    console.log("parseService.signUp - signup failed"), console.log("error: " + angular.toJson(error)), error.code === Parse.Error.INVALID_SESSION_TOKEN && Parse.User.logOut(), getCurrentOrLogin(option, app, function(user) {
                        successCallback(user)
                    }, function(error) {
                        errorCallback(error)
                    })
                }
            })
        },
        getCurrentOrLogin: function(option, app, successCallback, errorCallback) {
            var user = Parse.User.current(),
                updateUser = function(option, user) {
                    "undefined" != typeof option.picture && user.set("picture", option.picture), "undefined" != typeof option.name && user.set("name", option.name), "undefined" != typeof option.provider && user.set("provider", option.provider), user.save(null, {
                        success: function() {
                            console.log("user updated")
                        }
                    })
                };
            if (user) console.log("user's username: " + user.get("username")), updateUser(option, user), successCallback(angular.fromJson(user));
            else {
                var username = (Config.getPlatform(), option.email),
                    password = Config.getPassword(option.email, app.gateway);
                "direct" === option.provider && (password = option.password), Parse.User.logIn(username, password, {
                    success: function(user) {
                        updateUser(option, user), successCallback(user)
                    },
                    error: function() {
                        errorCallback()
                    }
                })
            }
        },
        extendPro: function(day, successCallback, errorCallback) {
            var options = {
                className: "UserConfig",
                equalTo: [{
                    field: "uuid",
                    value: uuidIs
                }, {
                    field: "platform",
                    value: platformIs
                }]
            };
            this.find(options, function(result) {
                var userConfig = result,
                    expiresAt = userConfig.get("expiresAt");
                console.log("EXTEND_PRO expiresAt: " + expiresAt);
                var expiresAtDate = new Date(expiresAt),
                    today = new Date;
                today > expiresAtDate && (expiresAtDate = today);
                var extended = expiresAtDate.getDate() + day;
                console.log("EXTEND_PRO: " + extended), expiresAtDate.setDate(extended), userConfig.set("expiresAt", expiresAtDate), userConfig.save(), successCallback(expiresAtDate)
            }, function(error) {
                errorCallback(error)
            })
        },
        getConfig: function(successCallback, errorCallback) {
            Parse.Config.get().then(function(config) {
                console.log("app config: " + angular.toJson(config)), successCallback(config)
            }, function(err) {
                errorCallback(err)
            })
        },
        getQuery: function(className) {
            var classObj = Parse.Object.extend(className),
                query = new Parse.Query(classObj);
            return query
        },
        getQueryForCreate: function(className) {
            var classObj = Parse.Object.extend(className),
                query = new classObj;
            return query
        },
        find: function(options, successCallback, errorCallback) {
            var query = this.getQuery(options.className);
            angular.forEach(options.equalTo, function(val) {
                query.equalTo(val.field, val.value)
            }), query.first({
                success: function(result) {
                    console.log("Parse: find() - result : " + angular.toJson(result)), angular.isDefined(result) ? successCallback(result) : errorCallback(null)
                },
                error: function(err) {
                    errorCallback(err)
                }
            })
        },
        findAll: function(options, successCallback, errorCallback) {
            var query = this.getQuery(options.className);
            angular.isDefined(options.equalTo) && angular.forEach(options.equalTo, function(val) {
                query.equalTo(val.field, val.value)
            }), angular.isDefined(options.fieldValues) && options.fieldValues.length > 0 && query.containsAll(options.field, options.fieldValues), angular.isDefined(options.order) && ("asc" == options.order ? query.ascending(options.orderBy) : query.descending(options.orderBy)), query.find({
                success: function(results) {
                    successCallback(results)
                },
                error: function(err) {
                    errorCallback(err)
                }
            })
        },
        save: function(options, successCallback, errorCallback) {
            var query = this.getQueryForCreate(options.className);
            angular.forEach(options.setValues, function(val) {
                query.set(val.field, val.value)
            }), query.save(null, {
                success: function(savedObject) {
                    successCallback(savedObject)
                },
                error: function(savedObject, error) {
                    errorCallback(savedObject, error)
                }
            })
        },
        update: function(options) {
            var query = this.getQuery(options.className);
            angular.forEach(options.setValues, function(val) {
                query.set(val.field, val.value)
            }), query.save()
        },
        "delete": function(objectToDelete, successCallback) {
            objectToDelete.destroy({
                success: function() {
                    console.log("Parse: successfully deleted"), successCallback()
                },
                error: function(myObject, error) {
                    console.log("Parse: failed to delete - " + angular.toJson(error))
                }
            })
        }
    }
}), ovModule.factory("Purchase", function(Analytics, Model, UI) {
    return {
        get: function(productAlias) {
            return "pro" === productAlias ? "com.codeinfaith.proversion" : ""
        },
        start: function() {
            var proId = this.get("pro");
            "undefined" != typeof store && (store.register({
                id: proId,
                alias: "pro",
                type: store.NON_CONSUMABLE
            }), console.log("Purchase - store registered"), store.ready(function() {
                console.log("Purchase - store is ready")
            }))
        },
        getProduct: function(productAlias) {
            return "undefined" == typeof store ? null : store.get(productAlias)
        },
        purchase: function(productId, callback) {
            "undefined" != typeof store && (console.log("Purchase - purchase called"), console.log("store is defined.. and calling order"), store.order(productId).then(function() {
                console.log("Successfully called to order"), callback()
            }).error(function(err) {
                console.log("Failed to call order: " + angular.toJson(err))
            }))
        },
        render: function(product, $scope, $rootScope) {
            console.log("Product state inside render: " + product.state);
            var proId = this.get("pro");
            product ? product.state === store.REGISTERED ? console.log("Product registered") : product.state === store.INVALID ? console.log("Product invalid") : product.state === store.VALID ? console.log("Product valid") : product.state === store.REQUESTED ? console.log("Product requested") : product.state === store.INITIATED ? console.log("Product initiated") : product.state === store.APPROVED ? (console.log("Product approved"), product.finish()) : product.state === store.FINISHED ? (console.log("Product finished"), console.log("product: " + angular.toJson(product)), "undefined" != typeof product.transaction && Analytics.track("Purchased", {
                id: "" + product.id,
                type: "" + product.type,
                price: "" + product.price,
                currency: "" + product.currency,
                transaction_id: "" + product.transaction.id,
                transaction_type: "" + product.transaction.type
            }), console.log("Killing store listener"), store.off()) : product.state === store.OWNED ? (console.log("Product owned"), product.id === proId && (console.log("Product - PRO VERSION owned!"), UI.toast("PRO_VERSION", "long", "bottom"), $rootScope.$apply(function() {
                $rootScope.userProfile.isProPurchased = !0
            }), $scope.purchaseOrShareAlert && $scope.purchaseOrShareAlert.close(), Model.save($rootScope.userProfile, "userprofile"))) : (console.log("Product (else) state: " + product.state), console.log("product.transaction: " + angular.toJson(product.transaction))) : console.log("Product not found!")
        }
    }
}), ovModule.factory("Share", function($cordovaClipboard, $cordovaSocialSharing, $translate, Analytics, Config, UI) {
    return {
        toApp: function(message, subject, link, hashtags, successCallback, errorCallback) {
            var file = null;
            Analytics.track("ShareToApp", {
                message: message + " " + hashtags,
                subject: subject,
                uuid: uuidIs
            }), isDevice ? $cordovaSocialSharing.share(message + " " + hashtags, subject, file, link).then(function(result) {
                console.log("Share toApp success: " + angular.toJson(result)), successCallback(result)
            }, function(err) {
                console.log("Share toApp error: " + angular.toJson(err)), errorCallback(err)
            }) : console.log("Social toApp triggered")
        },
        toService: function(provider, link, hashtags, callback) {
            var message = "";
            "twitter" === provider ? isDevice ? (message = $translate.instant("SHARE_MSG_SHORT") + " " + hashtags + " @codeinfaith", $cordovaSocialSharing.shareViaTwitter(message, null, link).then(function(result) {
                console.log("share to twitter: " + angular.toJson(result)), Analytics.track("ShareToTwitter", {
                    message: message,
                    uuid: uuidIs
                }), console.log("after tracking"), callback()
            }, function(err) {
                console.log("share to twitter failed: " + angular.toJson(err)), UI.toast("SHARE_FAILED_SHARE", "short", "center")
            })) : (console.log(">>> TWITTER share triggered"), callback()) : "facebook" === provider && (isDevice ? (message = $translate.instant("SHARE_MSG_LONG") + " " + hashtags + " @oneversebible", $cordovaSocialSharing.shareViaFacebook(message, null, link).then(function(result) {
                console.log("share to facebook: " + angular.toJson(result)), Analytics.track("ShareToFacebook", {
                    message: message,
                    uuid: uuidIs
                }), callback()
            }, function(err) {
                console.log("share to facebook failed: " + angular.toJson(err)), UI.toast("SHARE_FAILED_SHARE", "short", "center")
            })) : (console.log(">>> FACEBOOK share triggered"), callback()))
        },
        toClipboard: function(message, link, successCallback, errorCallback) {
            Analytics.track("ShareToClipboard", {
                message: message,
                uuid: uuidIs
            }), isDevice && $cordovaClipboard.copy(message + " " + link).then(function() {
                UI.toast("MSG_CLIPBOARD_SUCCESS", "short", "bottom"), successCallback()
            }, function() {
                UI.toast("MSG_CLIPBOARD_ERROR", "short", "bottom"), errorCallback()
            })
        },
        toFacebook: function(message, subject, successCallback, errorCallback) {
            var link = Config.getStoreUrl(),
                options = {
                    method: "feed",
                    link: link,
                    caption: message
                };
            this.toClipboard(message, function() {}, function() {}), facebookConnectPlugin.showDialog(options, function(result) {
                console.log("Share to FB success: " + angular.toJson(result)), successCallback(result)
            }, function(error) {
                console.log("Share to FB error: " + angular.toJson(error)), facebookConnectPlugin.login(["email"], function(resultLogin) {
                    "connected" === resultLogin.status && facebookConnectPlugin.showDialog(options, function(secondResult) {
                        successCallback(secondResult)
                    }, function(secondError) {
                        errorCallback(secondError)
                    })
                })
            })
        }
    }
}), ovModule.factory("Speech", function(Config) {
    return {
        start: function(lang, successCallback, errorCallback) {
            if (isDevice) {
                var recognition = new SpeechRecognition;
                return recognition.lang = Config.getSpeechLanguage(lang), recognition.onerror = function() {
                    console.log("onerror event"), errorCallback()
                }, recognition.onresult = function(event) {
                    if (event.results.length > 0) {
                        var captured = event.results[0][0].transcript;
                        console.log("speech captured: " + captured), successCallback(captured)
                    }
                }, recognition
            }
            return null
        },
        process: function(lang, transcript, successCallback, errorCallback) {
            var pre = "",
                matched = null,
                selectedBookname = null,
                selectedChapter = null,
                selectedVerse = null,
                bookIndex = 0;
            return console.log("original transcript: " + transcript), "en" === lang ? (pre = -1 !== transcript.indexOf("1st") ? "1" : -1 !== transcript.indexOf("2nd") ? "2" : "", transcript = transcript.replace("1st", ""), transcript = transcript.replace("2nd", ""), matched = transcript.match(/\d+/g), null !== matched ? (transcript = transcript.trim(), console.log("transcript.split(' '): " + transcript.split(" ")), selectedBookname = transcript.split(" ")[0], pre.length > 0 && (selectedBookname = pre + " " + selectedBookname), selectedChapter = matched[0], selectedVerse = "undefined" == typeof matched[1] ? 1 : matched[1], console.log("selectedBookname: " + selectedBookname), console.log("selectedChapter: " + selectedChapter), console.log("selectedVerse: " + selectedVerse), bookIndex = Config.getIndexByBookname(lang, selectedBookname), successCallback(bookIndex, parseInt(selectedChapter), parseInt(selectedVerse))) : errorCallback()) : "ko" === lang && (transcript = transcript.replace(/ /g, ""), console.log("transcript: " + transcript), matched = transcript.match(/\d+/g), null !== matched ? (selectedBookname = transcript.substring(0, transcript.indexOf(matched[0])), selectedChapter = matched[0], selectedVerse = "undefined" == typeof matched[1] ? 1 : matched[1], console.log("selectedBookname: " + selectedBookname), console.log("selectedChapter: " + selectedChapter), console.log("selectedVerse: " + selectedVerse), bookIndex = Config.getIndexByBookname(lang, selectedBookname), successCallback(bookIndex, parseInt(selectedChapter), parseInt(selectedVerse))) : errorCallback()), !1
        }
    }
}), ovModule.factory("Sync", function($timeout, DB, Model, ParseFactory) {
    return {
        syncTables: function() {
            return [{
                local: "tag",
                cloud: "Tag"
            }, {
                local: "tagVerse",
                cloud: "TagVerse"
            }]
        },
        cleanUp: function(successCallback) {
            console.log("SYNC:cleanup: called");
            var db = DB.open("oneverse"),
                localTables = this.syncTables().map(function(obj) {
                    return obj.local
                });
            angular.forEach(localTables, function(localTable, key) {
                console.log("SYNC:cleanUp: deleting from - " + localTable), DB["delete"](db, localTable, "syncID IS NULL AND isDeleted = 'true'", function(res) {
                    console.log("SYNC:cleanUp: deleted - " + angular.toJson(res))
                }), key === localTables.length - 1 && successCallback()
            })
        },
        toCloud: function(userObject) {
            console.log("SYNC: toCloud called");
            var db = DB.open("oneverse");
            DB.select(db, "tag", "*", "WHERE syncID IS NULL AND isDeleted = 'false'", function(tags) {
                console.log("SYNC:toCloud: tags found - " + angular.toJson(tags)), angular.forEach(tags, function(tag) {
                    console.log("SYNC: tag.tagName: " + tag.tagName), console.log("SYNC: userObject: " + angular.toJson(userObject)), $timeout(function() {
                        ParseFactory.find({
                            className: "Tag",
                            equalTo: [{
                                field: "tagName",
                                value: tag.tagName
                            }, {
                                field: "user",
                                value: userObject
                            }, {
                                field: "isDeleted",
                                value: !1
                            }]
                        }, function(result) {
                            console.log("SYNC:toCloud: checking whether tag exists - " + angular.toJson(result))
                        }, function(err) {
                            null === err ? (console.log("SYNC:toCloud: verified that tag does not exists"), ParseFactory.save({
                                className: "Tag",
                                setValues: [{
                                    field: "user",
                                    value: userObject
                                }, {
                                    field: "tagName",
                                    value: tag.tagName
                                }, {
                                    field: "note",
                                    value: tag.note
                                }, {
                                    field: "language",
                                    value: tag.language
                                }, {
                                    field: "privacy",
                                    value: tag.privacy
                                }, {
                                    field: "isDeleted",
                                    value: !1
                                }]
                            }, function(savedObject) {
                                console.log("SYNC:toCloud: saved tag to parse - " + angular.toJson(savedObject));
                                var setClause = "syncID = '" + savedObject.id + "', syncedAt = '" + new Date(savedObject.createdAt).getTime() + "'";
                                DB.update(db, "tag", setClause, "id = " + tag.id, function() {
                                    console.log("SYNC:toCloud: successfully updated tag - " + tag.id)
                                })
                            }, function(savedObject, error) {
                                console.log("SYNC:toCloud: saving tag to parse failed - " + angular.toJson(error))
                            })) : console.log("SYNC:toCloud: error calling parse - " + angular.toJson(err))
                        })
                    }, 500)
                })
            }), DB.select(db, "tagVerse", "*", "WHERE syncID IS NULL AND isDeleted = 'false'", function(tagVerses) {
                console.log("SYNC:toCloud: tagVerse found - " + angular.toJson(tagVerses)), angular.forEach(tagVerses, function(tagVerse) {
                    DB.select(db, "tag", "*", "WHERE syncID IS NOT NULL AND id = " + tagVerse.tagId, function(tagResults) {
                        if (console.log("SYNC:toCloud: tagResults - " + angular.toJson(tagResults)), tagResults.length > 0) {
                            var tagObjectId = tagResults[0].syncID,
                                query = ParseFactory.getQuery("Tag");
                            query.get(tagObjectId, {
                                success: function(tagObject) {
                                    console.log("SYNC:toCloud - tagObject found - " + angular.toJson(tagObject)), ParseFactory.save({
                                        className: "TagVerse",
                                        setValues: [{
                                            field: "user",
                                            value: userObject
                                        }, {
                                            field: "tag",
                                            value: tagObject
                                        }, {
                                            field: "bibleId",
                                            value: tagVerse.bibleId
                                        }, {
                                            field: "isDeleted",
                                            value: !1
                                        }]
                                    }, function(savedObject) {
                                        console.log("SYNC:toCloud - tagVerse saved to parse - " + console.log(savedObject));
                                        var setClause = "syncID = '" + savedObject.id + "', syncedAt = '" + new Date(savedObject.createdAt).getTime() + "'";
                                        DB.update(db, "tagVerse", setClause, "id = " + tagVerse.id, function() {
                                            console.log("SYNC:toCloud: successfully updated tagVerse - " + tagVerse.id)
                                        })
                                    }, function(savedObject, error) {
                                        console.log("SYNC:toCloud - tagVerse failed to save to parse " + angular.toJson(error))
                                    })
                                },
                                error: function(tagObject, error) {
                                    console.log("SYNC:toCloud - tagObject not found - " + angular.toJson(error))
                                }
                            })
                        }
                    })
                })
            }), DB.select(db, "tag", "*", "WHERE syncID IS NOT NULL AND isDeleted = 'false' AND syncedAt IS NULL", function(tags) {
                console.log("SYNC:TAG_UPDATE:toCloud: found tags to update to Cloud" + angular.toJson(tags)), angular.forEach(tags, function(tag) {
                    var query = ParseFactory.getQuery("Tag");
                    query.get(tag.syncID, {
                        success: function(tagObject) {
                            console.log("SYNC:TAG_UPDATE:toCloud - tagObject found for update: " + angular.toJson(tagObject)), tagObject.set("tagName", tag.tagName), tagObject.save(null, {
                                success: function(savedObject) {
                                    console.log("SYNC:TAG_UPDATE - successfully saved parse tag - " + angular.toJson(savedObject));
                                    var setClause = "syncedAt = '" + new Date(savedObject.createdAt).getTime() + "'";
                                    console.log("SYNC:TAG_UPDATE - setClause - " + setClause), DB.update(db, "tag", setClause, "id = " + tag.id, function(result) {
                                        console.log("SYNC:TAG_UPDATE - updated syncedAt for - " + angular.toJson(result))
                                    })
                                },
                                error: function(savedObject, error) {
                                    console.log("SYNC:TAG_UPDATE - error updated syncedAt for - " + angular.toJson(error))
                                }
                            })
                        },
                        error: function(tagObject, error) {
                            console.log("SYNC:TAG_UPDATE:toCloud - tagObject not found for update - error: " + angular.toJson(error))
                        }
                    })
                })
            }), angular.forEach(this.syncTables(), function(syncTable) {
                DB.select(db, syncTable.local, "*", "WHERE syncID IS NOT NULL AND isDeleted = 'true'", function(objsToDelete) {
                    console.log("SYNC:toCloud - found objects that are deleted - " + angular.toJson(objsToDelete)), angular.forEach(objsToDelete, function(objToDelete) {
                        var query = ParseFactory.getQuery(syncTable.cloud);
                        query.get(objToDelete.syncID, {
                            success: function(tagObject) {
                                tagObject.set("isDeleted", !0), tagObject.save(null, {
                                    success: function() {
                                        DB["delete"](db, syncTable.local, "syncID = '" + objToDelete.syncID + "'", function() {
                                            console.log("SYNC:toCloud: (" + syncTable.cloud + ") successfully marked as deleted - " + objToDelete.syncID)
                                        })
                                    },
                                    error: function() {}
                                })
                            },
                            error: function() {}
                        })
                    })
                })
            })
        },
        fromCloud: function(userObject, callback) {
            console.log("SYNC: fromCloud called");
            var db = DB.open("oneverse");
            angular.forEach(this.syncTables(), function(syncTable) {
                ParseFactory.findAll({
                    className: syncTable.cloud,
                    equalTo: [{
                        field: "user",
                        value: userObject
                    }, {
                        field: "isDeleted",
                        value: !0
                    }]
                }, function(results) {
                    console.log("SYNC:fromCloud - found objects that are deleted (cloud) - " + angular.toJson(results)), angular.forEach(results, function(result) {
                        DB["delete"](db, syncTable.local, "syncID = '" + result.id + "'", function() {
                            console.log("SYNC:fromCloud - deleted from local to match with parse - " + result.id)
                        })
                    })
                }, function() {})
            });
            var sync = Model.fetch("sync");
            DB.select(db, "tag", "*", "", function(res) {
                if (console.log("SYNC:fromCloud - sync_account " + sync.account), 0 === res.length || "undefined" == typeof sync.account) {
                    console.log("SYNC:fromCloud - no data found, getting from parse"), sync.account = userObject.get("email"), Model.save(sync, "sync");
                    var query = ParseFactory.getQuery("Tag");
                    query.equalTo("user", userObject), query.find({
                        success: function(results) {
                            angular.forEach(results, function(result) {
                                db.transaction(function(tx) {
                                    tx.executeSql("INSERT INTO tag (tagName, note, language, createdAt, privacy, syncID, syncedAt, isDeleted) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", [result.get("tagName"), result.get("note"), result.get("language"), new Date(result.createdAt).getTime(), result.get("privacy"), result.id, new Date(result.updatedAt).getTime(), result.get("isDeleted")], function(tx, insertres) {
                                        console.log("SYNC:init fromCloud - inserted into tag - " + angular.toJson(insertres)), console.log("SYNC:init fromCloud - what is result.id - " + result.id);
                                        var queryVerse = ParseFactory.getQuery("TagVerse");
                                        queryVerse.equalTo("user", userObject);
                                        var Tag = Parse.Object.extend("Tag");
                                        tag = new Tag, tag.id = result.id, queryVerse.equalTo("tag", tag), queryVerse.find({
                                            success: function(resultsVerse) {
                                                console.log("SYNC:init found TagVerse to insert - " + angular.toJson(resultsVerse)), angular.forEach(resultsVerse, function(resultVerse) {
                                                    db.transaction(function(tx) {
                                                        tx.executeSql("INSERT INTO tagVerse (tagId, bibleId, createdAt, syncID, syncedAt, isDeleted) VALUES (?, ?, ?, ?, ?, ?)", [insertres.insertId, resultVerse.get("bibleId"), new Date(resultVerse.createdAt).getTime(), resultVerse.id, new Date(resultVerse.updatedAt).getTime(), resultVerse.get("isDeleted")], function(tx, insertedverse) {
                                                            console.log("SYNC:init fromCloud - inserted tagVerse - " + angular.toJson(insertedverse))
                                                        })
                                                    }, function(e) {
                                                        console.log("SYNC: ERROR #4: " + angular.toJson(e))
                                                    })
                                                })
                                            },
                                            error: function(err) {
                                                console.log("SYNC: ERROR #1: " + angular.toJson(err))
                                            }
                                        })
                                    })
                                }, function(e) {
                                    console.log("SYNC: ERROR #2: " + angular.toJson(e))
                                })
                            })
                        },
                        error: function(err) {
                            console.log("SYNC: ERROR #3: " + angular.toJson(err))
                        }
                    })
                }
            }), angular.forEach(this.syncTables(), function(syncTable) {
                DB.select(db, syncTable.local, "*", "WHERE syncedAt IS NOT NULL ORDER BY syncedAt DESC LIMIT 1", function(res) {
                    console.log("SYNC:fromCloud - largest is - " + angular.toJson(res));
                    var syncedAtToDate = new Date(parseInt(res[0].syncedAt));
                    if (console.log("SYNC:fromCloud - syncedAtToDate - " + syncedAtToDate), res.length > 0) {
                        var query = ParseFactory.getQuery(syncTable.cloud);
                        query.equalTo("user", userObject), query.greaterThan("updatedAt", syncedAtToDate), query.find({
                            success: function(results) {
                                angular.forEach(results, function(result) {
                                    "tag" === syncTable.local ? DB.select(db, syncTable.local, "*", "WHERE syncID = '" + result.id + "'", function(sqlres) {
                                        0 === sqlres.length ? (console.log("SYNC:fromCloud - syncID not found, so inserting .."), db.transaction(function(tx) {
                                            tx.executeSql("INSERT INTO tag (tagName, note, language, createdAt, privacy, syncID, syncedAt, isDeleted) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", [result.get("tagName"), result.get("note"), result.get("language"), new Date(result.createdAt).getTime(), result.get("privacy"), result.id, new Date(result.updatedAt).getTime(), result.isDeleted], function(tx, insertres) {
                                                console.log("SYNC:fromCloud - result.get('tagName'): " + result.get("tagName")), console.log("SYNC:fromCloud - inserted into " + syncTable.local + " - " + angular.toJson(insertres))
                                            }, function(e) {
                                                console.log("SYNC:fromCloud - error inserting - " + e.message)
                                            })
                                        })) : (console.log("SYNC:fromCloud - syncID found, so updating .. - " + angular.toJson(result)), console.log("SYNC:fromCloud - sqlres - " + angular.toJson(sqlres)), db.transaction(function(tx) {
                                            console.log("SYNC: id - " + result.id), console.log("SYNC: id#2 - " + result.get("id")), tx.executeSql("UPDATE tag SET tagName = ?, note = ?, language = ?, privacy = ?, syncedAt = ?, isDeleted = ? WHERE id = ?", [result.get("tagName"), result.get("note"), result.get("language"), result.get("privacy"), new Date(result.updatedAt).getTime(), result.get("isDeleted"), sqlres[0].id], function(tx, updateres) {
                                                console.log("SYNC:fromCloud - successfully updated - " + syncTable.local + " - " + angular.toJson(updateres))
                                            }, function(e) {
                                                console.log("SYNC:fromCloud - error updating - " + e.message)
                                            })
                                        }))
                                    }) : "tagVerse" === syncTable.local && DB.select(db, syncTable.local, "*", "WHERE syncID = '" + result.id + "'", function(sqlres) {
                                        0 === sqlres.length && (console.log("SYNC:fromCloud (tagVerse) - syncID not found, so inserting"), db.transaction(function(tx) {
                                            tx.executeSql("INSERT INTO tagVerse (tagId, bibleId, createdAt, syncID, syncedAt, isDeleted) VALUES ()", [], function() {})
                                        }))
                                    })
                                })
                            },
                            error: function(err) {
                                console.log("SYNC:fromCloud - error finding from parse - " + angular.toJson(err))
                            }
                        })
                    }
                })
            }), callback()
        }
    }
}), ovModule.factory("UI", function($cordovaDialogs, $cordovaToast, $cordovaVibration, $ionicActionSheet, $ionicLoading, $ionicModal, $ionicPopup, $rootScope, $timeout, $translate) {
    return {
        toast: function(msg, duration, position) {
            console.log("toast: " + $translate.instant(msg) + " duration: " + duration + " position: " + position), isDevice && $cordovaToast.show($translate.instant(msg), duration, position)
        },
        openModal: function(templateUrl, scope, callback) {
            console.log("openModal called"), $ionicModal.fromTemplateUrl(templateUrl, {
                scope: scope,
                animation: "slide-in-up",
                hardwareBackButtonClose: !1
            }).then(function(modal) {
                callback(modal)
            })
        },
        openModalFixed: function(templateUrl, scope, callback) {
            console.log("openModalFixed called"), $ionicModal.fromTemplateUrl(templateUrl, {
                scope: scope,
                animation: "slide-in-up",
                hardwareBackButtonClose: !1,
                backdropClickToClose: !1
            }).then(function(modal) {
                callback(modal)
            })
        },
        simpleAlert: function(msg, title, btnOk, successCallback) {
            $cordovaDialogs.alert($translate.instant(msg), $translate.instant(title), $translate.instant(btnOk)).then(successCallback)
        },
        simpleConfirm: function(msg, title, successCallback) {
            $cordovaDialogs.confirm($translate.instant(msg), $translate.instant(title), [$translate.instant("OK"), $translate.instant("CANCEL")]).then(function(buttonIndex) {
                1 === buttonIndex && successCallback()
            })
        },
        alert: function(title, templateUrl, scope) {
            return $ionicPopup.alert({
                title: $translate.instant(title),
                templateUrl: templateUrl,
                scope: scope,
                okText: $translate.instant("OK"),
                cssClass: "oneverse-popup"
            })
        },
        customAlert: function(title, templateUrl, scope) {
            return $ionicPopup.show({
                title: $translate.instant(title),
                scope: scope,
                templateUrl: templateUrl,
                cssClass: "oneverse-popup"
            })
        },
        confirm: function(title, templateUrl, okText, scope, callback) {
            var confirmBox = $ionicPopup.confirm({
                title: $translate.instant(title),
                templateUrl: templateUrl,
                cssClass: "oneverse-popup",
                scope: scope,
                okText: $translate.instant(okText),
                cancelText: $translate.instant("CANCEL")
            });
            return confirmBox.then(function(res) {
                res ? callback() : confirmBox.close()
            }), confirmBox
        },
        showSpinner: function() {
            $rootScope.showingSpinner = !0, $ionicLoading.show({
                template: "<div class='global-spinner'><div><img src='img/logo200x200.png' style='width: 32px;' /></div><div><ion-spinner icon='circles' class='spinner-calm'></ion-spinner></div></div>"
            })
        },
        hideSpinner: function() {
            $rootScope.showingSpinner = !1, $ionicLoading.hide()
        },
        showStarred: function() {
            $ionicLoading.show({
                template: "<div class='global-spinner'><div><span class='icon ion-android-star star-effect text-xlarge'></span></div></div>"
            })
        },
        hideStarred: function() {
            $timeout(function() {
                $ionicLoading.hide()
            }, 1e3)
        },
        vibrate: function(duration) {
            console.log("vibrated"), isDevice && $cordovaVibration.vibrate(duration)
        },
        actionSheet: function(titleText, cancelText, buttons, buttonsCallback) {
            var sheet = $ionicActionSheet.show({
                buttons: buttons,
                titleText: $translate.instant(titleText),
                cancelText: $translate.instant(cancelText),
                buttonClicked: function(index) {
                    return buttonsCallback(index), !0
                }
            });
            return sheet
        }
    }
}), ovModule.factory("Util", function() {
    return {
        shuffle: function(o) {
            for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
            return o
        },
        randomPick: function(arr) {
            return arr[Math.floor(Math.random() * arr.length)]
        }
    }
}), ovModule.filter("prouserLimit", function() {
    return function(input, isPro, isProPurchased) {
        if (isPro || isProPurchased) return input;
        var collected = [];
        return angular.forEach(input, function(val, key) {
            10 > key && collected.push(val)
        }), collected
    }
}).filter("prouserLimitExceeded", function($filter, $translate) {
    return function(input, isPro, isProPurchased) {
        return isPro || isProPurchased ? "" : "undefined" != typeof input && input.length > 10 ? "<div class='item text-center item-text-wrap'><div class='item-note chosen'>" + $translate.instant("YOU_HAVE_MORE_LIST") + "</div></div>" : ""
    }
}).filter("range", function() {
    return function(input, total) {
        total = parseInt(total);
        for (var i = 1; total >= i; i++) input.push(i);
        return input
    }
}).filter("getThemeName", function($filter, Config) {
    return function(input) {
        var themes = Config.getThemes(),
            themeName = "";
        return angular.forEach(themes, function(val) {
            val.code === input && (themeName = val.name)
        }), themeName
    }
}).filter("bytesToMB", function() {
    return function(bytes) {
        if (0 === bytes) return "0 B";
        var k = 1e3,
            sizes = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
            i = Math.floor(Math.log(bytes) / Math.log(k));
        return (bytes / Math.pow(k, i)).toPrecision(3) + " " + sizes[i]
    }
}).filter("checkExistence", function($filter, $translate) {
    return function(input) {
        return input.length > 0 ? input : $translate.instant("NONE_FOUND")
    }
}).filter("biblename", function() {
    return function(input) {
        var mapping = {
            kjv: "King James Version",
            asv: "American Standard Version",
            nasb: "New American Standard Bible",
            niv: "New International Version",
            krv: "개역한글",
            nkrv: "개역개정",
            cuv: "中文和合本 (Simplified)",
            rvr1960: "Reina-Valera 1960"
        };
        return mapping[input]
    }
}).filter("copyright", function() {
    return function(input) {
        var mapping = {
            kjv: "Crown Copyright in UK",
            asv: "Public Domain",
            nasb: "The Lockman Foundation",
            niv: "Biblica",
            krv: "대한성서공회",
            nkrv: "대한성서공회",
            cuv: "Public Domain",
            rvr1960: "United Bible Societies"
        };
        return mapping[input]
    }
}).filter("getBookName", function() {
    return function(input) {
        var bookNumber = parseInt(input) < 10 ? "0" + input : input;
        return "BOOK_" + bookNumber
    }
}).filter("bookFilter", function($filter, $ionicScrollDelegate, $translate) {
    return function(items, field) {
        if ("undefined" == typeof field || 0 === field.length) return items;
        var result = {};
        return angular.forEach(items, function(value, key) {
            (-1 !== $translate.instant(key).toLowerCase().indexOf(field.toLowerCase()) || -1 !== $translate.instant("ABBR_" + key).toLowerCase().indexOf(field.toLowerCase())) && (result[key] = value)
        }), $ionicScrollDelegate.$getByHandle("book").scrollTop([!0]), result
    }
}).filter("humanize", function() {
    return function(input) {
        return moment(input, "MMMM Do YYYY, h:mm:ss a").fromNow()
    }
}).filter("fromNow", function() {
    return function(input) {
        return moment(input).fromNow()
    }
}).filter("toNow", function() {
    return function(input) {
        return moment(input).toNow()
    }
}).filter("daysLeft", function() {
    return function(input) {
        var now = new Date,
            till = new Date(input),
            days = moment(till).diff(now, "days");
        return days > 0 ? days : 0
    }
}).filter("daysLeftLabel", function() {
    return function(input) {
        return 0 === input ? "PRO_EXPIRED" : 1 === input ? "DAY_LEFT" : "DAYS_LEFT"
    }
}).filter("calendar", function() {
    return function(input) {
        return moment(input).calendar()
    }
}).filter("highlightKeyword", function() {
    return function(input, field, fields) {
        if ("undefined" != typeof field && field.length > 0) {
            var searchPattern = new RegExp("(" + field + ")", "ig");
            input = input.replace(searchPattern, "<span class='assertive'>$1</span>")
        }
        return angular.forEach(fields, function(field) {
            if ("undefined" != typeof field.keyword && field.keyword.length > 0) {
                var searchPattern = new RegExp("(" + field.keyword + ")", "ig");
                input = input.replace(searchPattern, "<span class='assertive'>$1</span>")
            }
        }), input
    }
}).filter("reverse", function() {
    return function(items) {
        return "undefined" != typeof items ? items.slice().reverse() : []
    }
}).filter("getOriginalLangName", function($filter, Config) {
    return function(input) {
        return Config.getOriginalLangNames(input)
    }
}), ovModule.controller("booksCtrl", function($ionicPlatform, $ionicScrollDelegate, $location, $rootScope, $scope, $timeout, $window, UI) {
    $scope.setHeight = function() {
        var height = 200;
        return isIOS && (height = 225), {
            height: $window.innerHeight - height + "px"
        }
    }, console.log("$scope.setHeight: " + angular.toJson($scope.setHeight())), $scope.$on("copy-to-cloned", function() {
        console.log("copy-to-cloned called"), $scope.cloned = {
            bibleBook: angular.copy($rootScope.bibleBook),
            bibleChapter: angular.copy($rootScope.bibleChapter),
            bibleVerse: angular.copy($rootScope.currentVerse + 1)
        }
    }), $scope.$broadcast("copy-to-cloned"), console.log("$scope.$parent.bibleData.books: " + angular.toJson($scope.$parent.bibleData.books)), console.log("$scope.cloned: " + angular.toJson($scope.cloned)), $scope.totalChapters = Object.keys($scope.$parent.bibleData.books[$scope.cloned.bibleBook].chapters).length, $scope.totalVerses = $scope.$parent.bibleData.books[$scope.cloned.bibleBook].chapters["chapter_" + $scope.cloned.bibleChapter], $timeout(function() {
        angular.forEach(["chapter-selection-" + $scope.cloned.bibleChapter, "verse-selection-" + $scope.cloned.bibleVerse, "book-selection-" + $scope.cloned.bibleBook], function(val) {
            console.log("val: " + val);
            var elem = document.getElementById(val),
                handleKey = val.split("-")[0];
            console.log("elem: " + elem.id), console.log("offsetTop: " + elem.offsetTop), $ionicScrollDelegate.$getByHandle(handleKey).scrollTo(0, elem.offsetTop, [!0])
        })
    }), $scope.closeBooks = function() {
        console.log("closeBooks called"), $location.url("home")
    }, $scope.doneBooks = function() {
        $scope.$parent.bibleMeta.book = parseInt($scope.cloned.bibleBook.replace("BOOK_", "")), $scope.$parent.bibleMeta.chapter = $scope.cloned.bibleChapter, $scope.$parent.bibleMeta.verse = $scope.cloned.bibleVerse, console.log("$scope.$parent.bibleMeta: " + angular.toJson($scope.$parent.bibleMeta)), $scope.closeBooks()
    }, $scope.selectBook = function(book_id) {
        console.log("select book tapped"), $scope.cloned.bibleBook = book_id, $scope.cloned.bibleChapter = 1, $scope.cloned.bibleVerse = 1, $scope.totalChapters = Object.keys($scope.$parent.bibleData.books[book_id].chapters).length, $scope.selectChapter($scope.cloned.bibleChapter), $ionicScrollDelegate.$getByHandle("chapter").scrollTop([!0]), $ionicScrollDelegate.$getByHandle("verse").scrollTop([!0])
    }, $scope.selectChapter = function(chapter) {
        $scope.cloned.bibleChapter = chapter, $scope.cloned.bibleVerse = 1, $scope.totalVerses = $scope.$parent.bibleData.books[$scope.cloned.bibleBook].chapters["chapter_" + chapter], $ionicScrollDelegate.$getByHandle("verse").scrollTop([!0])
    };
    var updateBible = function() {
        console.log("updateBible called"), $scope.$parent.bibleMeta.book = parseInt($scope.cloned.bibleBook.replace("BOOK_", "")), $scope.$parent.bibleMeta.chapter = $scope.cloned.bibleChapter, $scope.$parent.bibleMeta.verse = $scope.cloned.bibleVerse, $rootScope.bibleBook = $scope.cloned.bibleBook, $rootScope.bibleChapter = $scope.$parent.bibleMeta.chapter, $rootScope.currentVerse = $scope.$parent.bibleMeta.verse - 1
    };
    $scope.selectVerse = function(verse) {
        $scope.cloned.bibleVerse = verse, updateBible(), $scope.closeBooks()
    }, $scope.nextChapter = function() {
        $scope.$broadcast("next-chapter")
    }, $scope.prevChapter = function() {
        $scope.$broadcast("prev-chapter")
    }, $scope.$on("next-chapter", function() {
        console.log("next chapter called"), $scope.$broadcast("copy-to-cloned"), "undefined" != typeof $scope.totalChapters && ($scope.totalChapters = Object.keys($scope.$parent.bibleData.books[$scope.cloned.bibleBook].chapters).length), $scope.cloned.bibleChapter < $scope.totalChapters ? ($scope.cloned.bibleChapter += 1, $scope.cloned.bibleVerse = 1, updateBible(), $scope.closeBooks()) : UI.toast("MSG_END_OF_CHAPTER", "short", "center")
    }), $scope.$on("prev-chapter", function() {
        console.log("prev chapter called"), $scope.cloned.bibleChapter > 1 ? ($scope.cloned.bibleChapter -= 1, $scope.cloned.bibleVerse = 1, updateBible(), $scope.closeBooks()) : UI.toast("MSG_FIRST_CHAPTER", "short", "center")
    })
}), ovModule.controller("compareAllCtrl", function($location, $scope, $timeout, DB) {
    $scope.allVersions = [];
    var loadAllBibleFromDB = function() {
        var bibleMeta = $scope.$parent.bibleMeta;
        angular.forEach(bibleMeta.downloads, function(version) {
            var db = DB.open(version);
            DB.select(db, "t_" + version, "id, b, c, v, t", "WHERE b = " + bibleMeta.book + " and c = " + bibleMeta.chapter + " and v = " + bibleMeta.verse, function(result) {
                result.length > 0 && $scope.allVersions.push({
                    version: version,
                    data: result[0],
                    order: $scope.$parent.meta.mapBibleCodeOrder[version]
                })
            })
        })
    };
    $timeout(function() {
        console.log(angular.toJson($scope.allVersions))
    }, 5e3), isDevice && loadAllBibleFromDB(), $scope.closeCompareAll = function() {
        $location.url("home")
    }
}), ovModule.controller("globalCtrl", function($cordovaAppVersion, $cordovaDevice, $cordovaFileTransfer, $cordovaInAppBrowser, $cordovaNetwork, $css, $filter, $ionicBackdrop, $ionicPlatform, $ionicSideMenuDelegate, $ionicSlideBoxDelegate, $ionicScrollDelegate, $location, $log, $rootScope, $scope, $timeout, $translate, $window, Analytics, Bible, Config, DB, Debug, File, Model, ParseFactory, Purchase, Share, Speech, Sync, UI, Util) {
    var platformStyle = "css/style.android.min.css";
    if (isIOS && (platformStyle = "css/style.ios.min.css"), $css.bind({
            href: platformStyle
        }, $scope), $scope.meta = {}, $scope.meta.settings = Model.fetch("settings"), "number" == typeof $scope.meta.settings.introVersion) {
        for (var i = 1; i <= parseInt($scope.meta.settings.introVersion); i++) 1 === i && ($scope.meta.settings.introVersion = []), $scope.meta.settings.introVersion.push(i);
        Model.save($scope.meta.settings, "settings")
    }
    $scope.meta.app = Model.fetch("app"), $scope.meta.sync = Model.fetch("sync"), $scope.meta.device = Model.fetch("device"), $rootScope.allverse = $scope.meta.device.allverse, $scope.meta.device.isIOS = isIOS, $scope.meta.localBibleVersions = Model.fetch("localBibleVersions"), $scope.meta.supportedVersionsMeta = Model.fetch("supportedVersionsMeta"), $scope.meta.memoryVerses = Model.fetch("memoryVerses"), $scope.bibleMeta = Model.fetch("bible_meta"), $rootScope.renderBibleCalled = !1;
    var continueRenderBible = !0;
    "undefined" == typeof $scope.meta.device.limitchar && ($scope.meta.device.limitchar = Model.getSchema(Model.generateKey("device")).limitchar), "undefined" == typeof $scope.meta.device.showtags && ($scope.meta.device.showtags = !0), "undefined" == typeof $scope.meta.device.font_allverse && ($scope.meta.device.font_allverse = 16), $scope.meta.device.allverse === !0 ? $scope.meta.device.allverse = 2 : $scope.meta.device.allverse === !1 && ($scope.meta.device.allverse = 1), $scope.meta.searchbook = "all", $scope.meta.searchbooks = [{
        code: "all",
        name: "ALL_TESTAMENT"
    }, {
        code: "new",
        name: "NEW_TESTAMENT"
    }, {
        code: "old",
        name: "OLD_TESTAMENT"
    }], $scope.meta.advancedSearches = [{
        keyword: "",
        classifier: "AND"
    }], $scope.meta.advancedClassifiers = [{
        code: "AND",
        name: "AND"
    }, {
        code: "OR",
        name: "OR"
    }, {
        code: "NOT",
        name: "NOT"
    }], $scope.meta.showAdvPanel = !1;
    for (var j = 1; 66 >= j; j++) $scope.meta.searchbooks.push({
        code: j,
        name: "BOOK_" + (10 > j ? "0" + j : j)
    });
    $scope.meta.user = null, $scope.meta.user_picture = Model.fetch("user_picture"), $scope.meta.user_email = Model.fetch("user_email"), $rootScope.userProfile = Model.fetch("userprofile"), $rootScope.showingSpinner = !1, console.log("DATA: $rootScope.userProfile - " + angular.toJson($rootScope.userProfile)), $rootScope.history = Model.fetch("history"), isDevice || ($rootScope.history = Debug.history()), moment.locale($scope.meta.settings.language), $css.bind({
        href: "css/font." + $scope.meta.settings.font + ".min.css"
    }, $scope), $rootScope.userProfile.isPro || $rootScope.userProfile.isProPurchased || -1 !== ["one", "two"].indexOf($scope.meta.settings.theme) || ($scope.meta.settings.theme = "one", Model.save($scope.meta.settings, "settings")), $css.bind({
        href: "css/theme." + $scope.meta.settings.theme + ".min.css"
    }, $scope);
    var updateReady = function(bibleCode, version) {
        var localBibleVersions = Model.fetch("localBibleVersions"),
            localVersion = localBibleVersions.hasOwnProperty(bibleCode) ? localBibleVersions[bibleCode] : null;
        return null !== localVersion && version !== parseInt(localVersion) ? !0 : !1
    };
    $scope.meta.mapBibleCodeOrder = {};
    var processSupportedVersion = function(results) {
        var collected = {};
        return angular.forEach(results, function(val) {
            0 !== val.get("order") && (collected[val.get("order")] = [])
        }), angular.forEach(results, function(val) {
            if ($scope.meta.mapBibleCodeOrder[val.get("bibleCode")] = val.get("order"), 0 !== val.get("order")) {
                $scope.meta.localBibleVersions.hasOwnProperty(val.get("bibleCode")) || ($scope.meta.localBibleVersions[val.get("bibleCode")] = val.get("version")), $scope.meta.supportedVersionsMeta[val.get("bibleCode")] = {
                    language: val.get("language"),
                    languageCode: val.get("languageCode"),
                    bibleName: val.get("bibleName"),
                    supported: val.get("supported")
                };
                var versionObj = {
                    bibleCode: val.get("bibleCode"),
                    is_downloading: !1,
                    supported: val.get("supported"),
                    isMerchant: val.get("isMerchant"),
                    language: val.get("language"),
                    languageCode: val.get("languageCode"),
                    version: val.get("version"),
                    bibleName: val.get("bibleName"),
                    copyright: val.get("copyright"),
                    iap: val.get("iap"),
                    is_update_ready: updateReady(val.get("bibleCode"), val.get("version"))
                };
                console.log("$rootScope.userProfile.forcePro - " + $rootScope.userProfile.forcePro), "undefined" != typeof $rootScope.userProfile.forcePro && $rootScope.userProfile.forcePro && (versionObj.isMerchant = !1, versionObj.iap = ""), collected[val.get("order")].push(versionObj)
            }
        }), console.log("bible versions collected: " + angular.toJson(collected)), collected
    };
    $scope.setUserProfile = function(expiresAt) {
        console.log("setUserProfile called : " + angular.toJson(expiresAt));
        try {
            $rootScope.$apply(function() {
                $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt)
            })
        } catch (e) {
            $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt)
        }
        console.log("$rootScope.userProfile.expiresAt: " + $rootScope.userProfile.expiresAt), $rootScope.userProfile.isPro = $rootScope.userProfile.expiresAt > 0, Model.save($rootScope.userProfile, "userprofile"), 0 === $rootScope.userProfile.expiresAt && !$scope.meta.device.init && $scope.meta.settings.introVersion.length > 0 && !$rootScope.userProfile.isProPurchased && $scope.purchaseOrShareToast()
    }, $scope.syncToCloud = function() {
        console.log("SYNC: syncToCloud called"), console.log("SYNC: user - " + $scope.meta.user), $scope.meta.user || ($scope.meta.user = Parse.User.current(), $scope.cacheProfileImage()), console.log("SYNC: $rootScope.userProfile.isPro - " + $rootScope.userProfile.isPro), $scope.meta.user && ($rootScope.userProfile.isPro || $rootScope.userProfile.isProPurchased) && (console.log("SYNC: cleanUp is called"), Sync.cleanUp(function() {
            Sync.fromCloud($scope.meta.user, function() {
                Sync.toCloud($scope.meta.user)
            })
        }))
    }, $rootScope.syncToCloud = function() {
        $scope.syncToCloud()
    };
    var showIntro = function() {
        UI.openModalFixed("templates/modules/modal-intro.html", $scope, function(modal) {
            $ionicSlideBoxDelegate.update(), $scope.introModal = modal, $scope.introModal.show();
            var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox");
            introSlidebox.enableSlide(!1)
        })
    };
    $scope.nextIntro = function() {
        var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox"),
            currentIndex = introSlidebox.currentIndex(),
            slideCount = introSlidebox.slidesCount();
        currentIndex === slideCount - 1 ? ($scope.meta.device.allverse = $scope.meta.device.allverse || 1, $scope.introModal.hide(), $scope.doneInit()) : ($scope.userProfile = Model.fetch("userprofile"), introSlidebox.next())
    }, $scope.skipIntroTouched = !1, $scope.skipIntro = function() {
        $scope.meta.device.allverse = $scope.meta.device.allverse || 1, $scope.skipIntroTouched = !0, $scope.introModal.hide(), $scope.introModal.remove(), console.log("#4 " + new Date), $scope.doneInit()
    }, $scope.prevIntro = function() {
        var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox"),
            currentIndex = introSlidebox.currentIndex();
        currentIndex > 0 && introSlidebox.previous()
    }, $scope.introSlideChanged = function() {
        var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox");
        $scope.introCurrentSlide = introSlidebox.currentIndex()
    }, $scope.chooseView = function(num) {
        $scope.meta.device.allverse = num, $scope.nextIntro()
    }, $scope.meta.supportedVersions = Model.fetch("supportedVersions");
    var hideSplashscreen = function() {
        isDevice && navigator.splashscreen.hide()
    };
    if ($ionicPlatform.ready(function() {
            console.log("Platform.ready called"), isDevice && cordova.plugins.notification.local.on("click", function(notification) {
                console.log("click notification to trigger renderbible"), console.log(angular.toJson(notification) + " clicked");
                var n_data = notification.data.split(":");
                continueRenderBible = !1, $scope.$apply(function() {
                    $scope.bibleMeta.book = n_data[0], $scope.bibleMeta.chapter = n_data[1], $scope.bibleMeta.verse = n_data[2]
                }), $rootScope.currentId = parseInt(n_data[3]), $timeout(function() {
                    console.log("renderbible 005"), $scope.renderBible(function() {
                        continueRenderBible = !0
                    })
                })
            }), Config.setTranslation(function(lang) {
                null === $scope.meta.settings.language && ($scope.meta.settings.language = lang, Model.save($scope.meta.settings, "settings")), $translate.use($scope.meta.settings.language), $scope.speechSupported = Config.getSpeechLanguage($scope.meta.settings.language), isDevice && hideSplashscreen()
            }), 0 === $scope.meta.settings.introVersion.length && (console.log("$scope.meta.settings.introVersion: " + $scope.meta.settings.introVersion), console.log(typeof $scope.meta.settings.introVersion), $timeout(function() {
                showIntro()
            }, 1e3)), console.log("CHECK"), console.log($scope.meta.settings.introVersion.indexOf(1)), console.log($scope.meta.settings.introVersion.indexOf(6)), -1 !== $scope.meta.settings.introVersion.indexOf(1) && -1 !== $scope.meta.settings.introVersion.indexOf(2) && -1 === $scope.meta.settings.introVersion.indexOf(6) && showIntroBibleVersion(), ParseFactory.getConfig(function(config) {
                $scope.meta.app.bibleVersion !== config.get("bibleVersion") || "undefined" != typeof $rootScope.userProfile.forcePro && $rootScope.userProfile.forcePro ? ParseFactory.findAll({
                    className: "BibleVersions",
                    order: "asc",
                    orderBy: "order"
                }, function(results) {
                    console.log("Parse: all bible versions: " + angular.toJson(results)), $scope.meta.supportedVersions = processSupportedVersion(results), Model.save($scope.meta.supportedVersions, "supportedVersions"), Model.save($scope.meta.localBibleVersions, "localBibleVersions"), Model.save($scope.meta.supportedVersionsMeta, "supportedVersionsMeta"), $scope.initPurchase(), $scope.updateSupportVersionsProduct()
                }, function(err) {
                    console.log("Parse: all bible versions error: " + angular.toJson(err))
                }) : ($scope.initPurchase(), $scope.updateSupportVersionsProduct()), $scope.meta.app = {
                    latestAndroidVersion: config.get("latestAndroidVersion"),
                    latestIOSVersion: config.get("latestIOSVersion"),
                    bibleVersion: config.get("bibleVersion"),
                    gateway: config.get("gateway"),
                    terms: config.get("terms"),
                    secret: config.get("secret"),
                    trial: config.get("trial"),
                    gauth: config.get("gauth"),
                    fauth: config.get("fauth"),
                    facebook: config.get("facebook"),
                    twitter: config.get("twitter"),
                    website: config.get("website"),
                    website2: config.get("website2"),
                    hashtags: config.get("hashtags"),
                    shareDay: config.get("shareDay"),
                    shareDayEnabled: config.get("shareDayEnabled"),
                    shareDayLimit: config.get("shareDayLimit")
                }, bypassIds = config.get("analyticsBypass"), Model.save($scope.meta.app, "app"), console.log("meta app: " + angular.toJson($scope.meta.app)), $scope.meta.user = Parse.User.current(), $cordovaAppVersion.getAppVersion().then(function(version) {
                    $scope.meta.user && ($scope.meta.user.set("language", $scope.meta.settings.language), $scope.meta.user.set("deviceLanguage", deviceLanguage), $scope.meta.user.set("appVersion", version), $scope.meta.user.set("platform", platformIs), $scope.meta.user.save(null, {
                        success: function() {
                            console.log("user updated")
                        }
                    }))
                }), $scope.cacheProfileImage(), console.log("Got user from cache? : " + angular.toJson($scope.meta.user))
            }, function() {
                $scope.meta.app = Model.fetch("app")
            }), isDevice && $cordovaAppVersion.getAppVersion().then(function(version) {
                if ($scope.meta.settings.appVersion = version, isIOS && version >= "1.0.2" && "undefined" == typeof $scope.meta.device.ios_no_cloud) {
                    var dbs = angular.copy($scope.bibleMeta.versions);
                    dbs.push("oneverse"), dbs.push("bible"), angular.forEach(dbs, function(db, key) {
                        window.resolveLocalFileSystemURL(cordova.file.documentsDirectory + "/" + db + ".db", function(fileEntry) {
                            console.log("$scope.bibleMeta.versions - " + angular.toJson($scope.bibleMeta.versions)), console.log("fileEntry - " + fileEntry), window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(dirEntry) {
                                fileEntry.moveTo(dirEntry, db + ".db", function() {
                                    console.log("file moved to " + cordova.file.dataDirectory), key === dbs.length - 1 && (console.log("renderBible after file moved to correct location"), $scope.meta.device.ios_no_cloud = !0, Model.save($scope.meta.device, "device"), "undefined" != typeof $scope.modalIntroBibleVersion && $scope.modalIntroBibleVersion.hide(), UI.hideSpinner(), $location.url("after-update"))
                                }, function() {
                                    console.log("failed file moving")
                                })
                            }, function() {})
                        }, function() {
                            console.log("err fileEntry")
                        })
                    })
                }
                var triggerUpdate = !1;
                isIOS ? $scope.meta.settings.appVersion < $scope.meta.app.latestIOSVersion && (triggerUpdate = !0) : $scope.meta.settings.appVersion < $scope.meta.app.latestAndroidVersion && (triggerUpdate = !0), triggerUpdate && UI.simpleConfirm("NEW_VERSION_AVAILABLE", "UPDATE", function() {
                    $cordovaInAppBrowser.open(Config.getStoreUrl(), "_system")
                })
            }), isDevice && DB.create(), Config.getUUID(function(uuid) {
                console.log("initUserConfig calling on ready..."), initUserConfig(uuid)
            }), $scope.meta.device.init || $timeout(function() {
                console.log("renderbible 001"), console.log("continueRenderBible - " + continueRenderBible), "1.0.2" === $scope.meta.settings.appVersion && isIOS && "undefined" == typeof $scope.meta.device.ios_no_cloud && (continueRenderBible = !1), continueRenderBible && $scope.renderBible(function() {
                    3 === $scope.meta.device.allverse && $scope.processSideBySide()
                })
            }), renderSpeech(), isDevice && cordova.plugins.notification.local.getScheduledIds(function(scheduledIds) {
                0 === scheduledIds.length && $scope.meta.memoryVerses.length > 0 && $scope.renderMemoryVerses($scope.meta.memoryVerses)
            });
            var onlineEvent = function() {
                $scope.initPurchase()
            };
            document.addEventListener("online", onlineEvent, !1)
        }), $scope.initPurchase = function(force) {
            console.log("initPurchase called"), Purchase.start(), angular.forEach($scope.meta.supportedVersions, function(ver) {
                "undefined" != typeof store && (angular.forEach(ver, function(val) {
                    val.iap && store.register({
                        id: val.iap,
                        alias: val.bibleCode,
                        type: store.NON_CONSUMABLE
                    })
                }), console.log("Purchase - done registering bible versions"))
            }), "undefined" != typeof store && (console.log("Purchase - adding listeners"), store.when("product").updated(function(p) {
                Purchase.render(p, $scope, $rootScope)
            }), store.error(function(err) {
                console.log("Purchase Error: " + angular.toJson(err))
            }), store.refresh()), "undefined" != typeof force && force && (UI.toast("INITIALIZING_PURCHASE", "short", "center"), "undefined" != typeof $scope.purchaseOrShareAlert && $scope.purchaseOrShareAlert.close(), "undefined" != typeof $scope.confirmPurchaseVersion && $scope.confirmPurchaseVersion.close())
        }, $scope.updateSupportVersionsProduct = function() {
            $timeout(function() {
                console.log("updateSupportVersionsProduct called - " + angular.toJson($scope.meta.supportedVersions)), angular.forEach($scope.meta.supportedVersions, function(ver) {
                    angular.forEach(ver, function(val) {
                        val.iap && (isDevice ? (val.product = Purchase.getProduct(val.bibleCode), console.log("Bible Product - " + angular.toJson(val.product))) : val.product = {
                            id: val.iap,
                            price: "$1.99",
                            currency: "USD",
                            owned: !1
                        })
                    })
                }), Model.save($scope.meta.supportedVersions, "supportedVersions")
            }, 750)
        }, $scope.$watch("meta.settings.language", function(newValue, oldValue) {
            newValue !== oldValue && ($translate.use(newValue), moment.locale(newValue), $scope.speechSupported = Config.getSpeechLanguage($scope.meta.settings.language), Model.save($scope.meta.settings, "settings"), renderSpeech())
        }), $scope.$watch("meta.settings.theme", function(newValue, oldValue) {
            oldValue !== newValue && $scope.changeTheme(newValue)
        }), $scope.$watch("meta.settings.font", function(newValue, oldValue) {
            oldValue !== newValue && $scope.changeFont(newValue)
        }), $scope.$watch("meta.device.font", function(newValue) {
            $scope.meta.device.lineheight = parseInt(newValue) + 10, Model.save($scope.meta.device, "device")
        }), $scope.$watch("meta.device.font_allverse", function(newValue) {
            $scope.meta.device.lineheight_allverse = parseInt(newValue) + 5, Model.save($scope.meta.device, "device")
        }), $scope.$watch("meta.device.allverse", function(newValue, oldValue) {
            newValue !== oldValue && ($rootScope.allverse = newValue, 2 === newValue ? (UI.showSpinner("LOADING"), $timeout(function() {
                console.log("Adjusting slidebox, scroll for all verse"), $ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").update();
                try {
                    $ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").slide($filter("reverse")($scope.bibleMeta.versions).indexOf($rootScope.bibleVersion))
                } catch (err) {
                    console.log("slide to version error: " + err)
                }
                $ionicScrollDelegate.$getByHandle("bible-version-" + $rootScope.bibleVersion).resize(), $scope.slideToListVerse(), UI.hideSpinner()
            }, 500)) : 3 === newValue ? (console.log("process side-by-side"), $scope.processSideBySide()) : (console.log("renderbible 002"), $scope.renderBible()), Model.save($scope.meta.device, "device"))
        }), $scope.$watch("meta.device.showtags", function(newValue, oldValue) {
            oldValue !== newValue && Model.save($scope.meta.device, "device")
        }), $scope.renderMemoryVerses = function(newValues) {
            Model.save(newValues, "memoryVerses"), isDevice && cordova.plugins.notification.local.cancelAll(function() {
                console.log("ok, all canceled");
                var db = DB.open("oneverse"),
                    tagIds = newValues.join(",");
                DB.select(db, "tagVerse", "*", "WHERE tagId in (" + tagIds + ") AND isDeleted = 'false'", function(result) {
                    var bibleIds = result.map(function(obj) {
                            return obj.bibleId
                        }).join(","),
                        bibleVersion = $rootScope.bibleVersion,
                        versionDB = DB.open(bibleVersion);
                    DB.select(versionDB, "t_" + bibleVersion, "id, b, c, v, t", "WHERE id in (" + bibleIds + ")", function(result2) {
                        console.log("SQL: found verses for memoryVerses - " + angular.toJson(result2));
                        var options = [];
                        if (result2.length > 0)
                            for (var i = 0; 31 > i; i++) {
                                var times = [moment().add(i, "day").set("hour", 8).set("minute", 0).set("second", 0), moment().add(i, "day").set("hour", 12).set("minute", 0).set("second", 0), moment().add(i, "day").set("hour", 18).set("minute", 0).set("second", 0)];
                                angular.forEach(times, function(triggerAt, key) {
                                    var picked = Util.randomPick(result2),
                                        bookNumber = parseInt(picked.b) < 10 ? "0" + picked.b : picked.b,
                                        option = {
                                            id: triggerAt.valueOf(),
                                            title: $translate.instant("GUESS_BIBLE_VERSE"),
                                            text: picked.t + "\n\n[" + $translate.instant("BOOK_" + bookNumber) + " " + picked.c + ":" + picked.v + "]",
                                            at: triggerAt.toDate(),
                                            data: picked.b + ":" + picked.c + ":" + picked.v + ":" + picked.id
                                        };
                                    triggerAt.toDate() > new Date && options.push(option), 30 === i && key === times.length - 1 && (console.log("memoryVerses - options: " + options), cordova.plugins.notification.local.schedule(options), UI.toast("NOTI_SCHEDULED", "short", "bottom"))
                                })
                            }
                    })
                })
            })
        }, !isIOS) {
        var elemLeft = document.getElementById("ov-side-menu-left"),
            elemRight = document.getElementById("ov-side-menu-right");
        $scope.$watch(function() {
            return $ionicSideMenuDelegate.isOpen()
        }, function(isOpen) {
            if (1 == isOpen)
                if ($ionicSideMenuDelegate.isOpenLeft()) elemRight.style.display = "none", elemLeft.style.display = "inherit", $ionicSlideBoxDelegate.$getByHandle("left-side-menu").update();
                else {
                    elemLeft.style.display = "none", elemRight.style.display = "inherit";
                    var elem = document.getElementById("main-verse-selection-" + $rootScope.currentVerse);
                    "undefined" != typeof elem && $ionicScrollDelegate.$getByHandle("scroll-sidemenu-right").scrollTo(0, elem.offsetTop, [!0])
                }
        }), $scope.$watch(function() {
            return $ionicSideMenuDelegate.getOpenRatio()
        }, function() {})
    }
    $scope.bibleData = {}, $rootScope.currentVerse = $scope.bibleMeta.verse - 1;
    var copiedVersions = angular.copy($scope.bibleMeta.versions);
    copiedVersions = copiedVersions.reverse(), $rootScope.versionIndex = copiedVersions.indexOf($scope.bibleMeta.version), $rootScope.bibleVersion = $scope.bibleMeta.version;
    var initTitles = function(bibles) {
        $rootScope.bibleBook = bibles[0].book, $rootScope.bibleChapter = bibles[0].verses[0].c, $rootScope.currentVerse = $scope.bibleMeta.verse - 1;
        try {
            $rootScope.currentId = bibles[0].verses[$rootScope.currentVerse].id
        } catch (e) {}
    };
    isDevice || ($scope.bibles = Debug.getBibleData(), initTitles($scope.bibles));
    var loadBibleRefFromDB = function() {
        console.log("loadBibleRefFromDB called");
        var version = "kjv";
        if ($scope.bibleData.books = Model.fetch("books"), null === $scope.bibleData.books) {
            var db = DB.open(version);
            DB.select(db, "t_" + version, "b,c,v", "GROUP BY b,c", function(result) {
                $scope.bibleData.books = Bible.processBooks(result), Model.save($scope.bibleData.books, "books")
            })
        }
    };
    $scope.meta.isLoading = !1;
    var loadBibleFromDB = function(versions, book, chapter, callback) {
        console.log("Loading bible from db"), console.log("versions: " + versions), console.log("book: " + book), console.log("chapter: " + chapter), UI.showSpinner("LOADING");
        var versionsToUse = angular.copy(versions),
            version = versionsToUse.pop(),
            appendTags = function(book, version, result) {
                var bookNumber = parseInt(book) < 10 ? "0" + book : book;
                $scope.$apply(function() {
                    $scope.bibles.push({
                        version: version,
                        book: "BOOK_" + bookNumber,
                        verses: result
                    }), 1 === $scope.bibles.length && initTitles($scope.bibles)
                })
            };
        if (console.log("version: " + version), "undefined" != typeof version) {
            var db = DB.open(version);
            DB.select(db, "t_" + version, "id, b, c, v, t", "WHERE b = " + book + " and c = " + chapter, function(result) {
                console.log("select query executed successfully");
                var allVerseIds = result.map(function(obj) {
                        return obj.id
                    }),
                    minId = Array.min(allVerseIds),
                    maxId = Array.max(allVerseIds),
                    ovDB = DB.open("oneverse");
                DB.select(ovDB, "tagVerse", "*", "WHERE bibleId >= " + minId + " AND bibleId <= " + maxId + " AND isDeleted = 'false'", function(resultTagVerse) {
                    0 === resultTagVerse.length && (appendTags(book, version, result), loadBibleFromDB(versionsToUse, book, chapter, callback)), angular.forEach(resultTagVerse, function(val, key) {
                        DB.select(ovDB, "tag", "*", "WHERE id = '" + val.tagId + "' AND isDeleted = 'false'", function(resultTag) {
                            angular.forEach(result, function(val2) {
                                if ("undefined" == typeof val2.tags && (val2.tags = []), parseInt(val2.id) === parseInt(val.bibleId)) {
                                    var existingTagIds = val2.tags.map(function(obj) {
                                        return obj.id
                                    });
                                    "undefined" != typeof resultTag[0] && -1 == existingTagIds.indexOf(resultTag[0].id) && val2.tags.push(resultTag[0])
                                }
                            }), key === resultTagVerse.length - 1 && (appendTags(book, version, result), loadBibleFromDB(versionsToUse, book, chapter, callback))
                        })
                    })
                })
            })
        } else {
            console.log("done loading bible verses"), "undefined" != typeof callback && callback(), loadBibleRefFromDB(), $rootScope.versionIndex = $filter("reverse")(versions).indexOf($rootScope.bibleVersion), 1 === $scope.meta.device.allverse ? angular.forEach($rootScope.allHorizontalSlides, function(val) {
                val.update()
            }) : $ionicScrollDelegate.$getByHandle("bible-version-" + $rootScope.bibleVersion).resize(), UI.hideSpinner(), $scope.meta.isLoading = !1;
            var isVersionFound = $filter("reverse")($scope.bibleMeta.versions).indexOf($rootScope.bibleVersion);
            $scope.changeVersion(-1 !== isVersionFound ? isVersionFound : 0), $rootScope.renderBibleCalled = !1
        }
    };
    $scope.slideToListVerse = function() {
        console.log("slideToListVerse called - " + $rootScope.bibleVersion + " : " + $rootScope.currentId);
        var scrollTarget = "bible-version-" + $rootScope.bibleVersion;
        if (3 === $scope.meta.device.allverse && (scrollTarget = "bible-side-by-side", $ionicScrollDelegate.$getByHandle(scrollTarget).resize()), 1 == $scope.bibleMeta.verse) return $ionicScrollDelegate.$getByHandle(scrollTarget).scrollTop([!0]), !1;
        var elemId = "verse-selection-" + $rootScope.bibleVersion + "-" + ($scope.bibleMeta.verse - 1);
        3 === $scope.meta.device.allverse && (elemId = "verse-selection-sbs-" + $rootScope.currentId);
        var elem = document.getElementById(elemId);
        console.log("slideToListVerse - elemId: " + elemId), $timeout(function() {
            null !== elem && (console.log("slideToListVerse - elem.offsetTop: " + elem.offsetTop), $ionicScrollDelegate.$getByHandle(scrollTarget).scrollTo(0, elem.offsetTop, [!0]))
        })
    }, $scope.changeVersion = function(index) {
        console.log("inside changeVersion - rootScope.bibleVersion - " + $rootScope.bibleVersion), 2 === $scope.meta.device.allverse ? ($ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").update(), $ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").slide(index), $scope.slideToListVerse()) : 3 === $scope.meta.device.allverse ? ($rootScope.bibleVersion = $filter("reverse")($scope.bibleMeta.versions)[index], $scope.processSideBySide()) : $scope.slideToVersion(index)
    };
    var initUserConfig = function(uuid) {
            console.log("initUserConfig called with uuid - " + uuid + " platform - " + platformIs), isDevice && $cordovaAppVersion.getAppVersion().then(function(version) {
                var dimensions = {
                    appVersion: version,
                    deviceLanguage: deviceLanguage,
                    language: $scope.meta.settings.language,
                    model: $cordovaDevice.getModel(),
                    osVersion: $cordovaDevice.getVersion(),
                    platform: platformIs,
                    uuid: uuid,
                    theme: $scope.meta.settings.theme,
                    view: "" + $scope.meta.device.allverse
                };
                Analytics.track("AppLaunch", dimensions)
            });
            var className = "UserConfig",
                options = {
                    className: className,
                    equalTo: [{
                        field: "uuid",
                        value: uuid
                    }, {
                        field: "platform",
                        value: platformIs
                    }]
                };
            ParseFactory.find(options, function(result) {
                console.log("initUserConfig: found existing user config, saving expiresAt"), console.log("uuid - " + uuid), console.log("platformIs - " + platformIs), console.log("result - " + angular.toJson(result));
                var expiresAt = result.get("expiresAt");
                Model.save(expiresAt, "expiresAt"), $scope.setUserProfile(expiresAt);
                var sharedCount = result.get("sharedCount");
                "undefined" == typeof sharedCount && (sharedCount = 0), console.log("settings.sharedCount: " + $scope.meta.settings.sharedCount), "undefined" == typeof $scope.meta.settings.sharedCount && ($scope.meta.settings.sharedCount = 0), $scope.meta.settings.sharedCount < sharedCount ? $scope.meta.settings.sharedCount = sharedCount : result.set("sharedCount", $scope.meta.settings.sharedCount), Model.save($scope.meta.settings, "settings"), result.set("deviceLanguage", deviceLanguage), result.set("language", $scope.meta.settings.language), result.set("appVersion", $scope.meta.settings.appVersion), isDevice && (result.set("model", $cordovaDevice.getModel()), result.set("osVersion", $cordovaDevice.getVersion())), result.save();
                var forcePro = result.get("forcePro");
                "undefined" != typeof forcePro && (forcePro ? ($rootScope.userProfile.isProPurchased = !0, $rootScope.userProfile.forcePro = !0, UI.toast("PRO_VERSION", "long", "bottom"), Model.save($rootScope.userProfile, "userprofile")) : ($rootScope.userProfile.isProPurchased = !1, $rootScope.userProfile.forcePro = !1, Model.save($rootScope.userProfile, "userprofile"))), $scope.syncToCloud()
            }, function() {
                console.log("initUserConfig: couldn't find uuid data, creating...");
                var expiresAt = new Date;
                expiresAt.setDate(expiresAt.getDate() + $scope.meta.app.trial);
                var optionsForCreate = {
                    className: className,
                    setValues: [{
                        field: "uuid",
                        value: uuid
                    }, {
                        field: "platform",
                        value: platformIs
                    }, {
                        field: "expiresAt",
                        value: expiresAt
                    }, {
                        field: "model",
                        value: $cordovaDevice.getModel()
                    }, {
                        field: "deviceLanguage",
                        value: deviceLanguage
                    }, {
                        field: "language",
                        value: $scope.meta.settings.language
                    }, {
                        field: "appVersion",
                        value: $scope.meta.settings.appVersion
                    }, {
                        field: "osVersion",
                        value: $cordovaDevice.getVersion()
                    }, {
                        field: "sharedCount",
                        value: $scope.meta.settings.sharedCount
                    }]
                };
                ParseFactory.save(optionsForCreate, function(userConfig) {
                    console.log("initUserConfig: successfully created user config obj - uuid: " + uuid), isDevice && $cordovaAppVersion.getAppVersion().then(function(version) {
                        Analytics.track("AppInstall", {
                            appVersion: version,
                            deviceLanguage: deviceLanguage,
                            language: $scope.meta.settings.language,
                            model: $cordovaDevice.getModel(),
                            osVersion: $cordovaDevice.getVersion(),
                            platform: platformIs,
                            uuid: uuid,
                            theme: $scope.meta.settings.theme,
                            view: "" + $scope.meta.device.allverse
                        })
                    });
                    var expiresAt = userConfig.get("expiresAt");
                    Model.save(expiresAt, "expiresAt"), $scope.setUserProfile(expiresAt)
                }, function() {
                    console.log("initUserConfig: failed creating user config obj - uuid: " + uuid)
                })
            })
        },
        progressDone = function() {
            $scope.bibleMeta = Model.fetch("bible_meta");
            var db = DB.open($scope.bibleMeta.versions[0]);
            DB.select(db, "t_" + $scope.bibleMeta.versions[0], "*", "WHERE id = 1001001", function() {
                $scope.downloadProgress = 100, $scope.meta.device.init = !1, console.log("dummy sql done")
            })
        },
        downloadInitData = function() {
            isDevice ? File.getInitData($scope, function() {
                console.log("Downloading completed"), $scope.$$phase ? progressDone() : $scope.$apply(function() {
                    progressDone()
                }), Model.save($scope.meta.device, "device"), console.log("before calling loadBibleFromDB inside downloadInitData"), loadBibleFromDB($scope.bibleMeta.versions, $scope.bibleMeta.book, $scope.bibleMeta.chapter, function() {})
            }, function() {
                $scope.meta.device.initFailed = !0
            }) : ($scope.downloadProgress = 0, $timeout(function() {
                $scope.downloadProgress = 100, $scope.meta.device.init = !1, initUserConfig(uuidIs)
            }, 1e3))
        };
    $scope.renderBible = function(callback) {
        return console.log("renderBible called"), $rootScope.renderBibleCalled ? (console.log("renderBibleCalled already, failing..."), !1) : ($rootScope.renderBibleCalled = !0, isDevice && ($scope.bibles = []), console.log("bibleMeta: " + angular.toJson($scope.bibleMeta)), void(isDevice ? (loadBibleFromDB($scope.bibleMeta.versions, $scope.bibleMeta.book, $scope.bibleMeta.chapter, callback), loadBibleRefFromDB()) : $timeout(function() {
            UI.hideSpinner()
        }, 1e3)))
    }, $scope.processSideBySide = function() {
        console.log("processSideBySide called"), UI.showSpinner("LOADING"), $timeout(function() {
            $scope.sbs = [];
            var store = {};
            angular.forEach($scope.bibles, function(bible) {
                angular.forEach(bible.verses, function(verse) {
                    "undefined" == typeof store[verse.id] && (store[verse.id] = []);
                    var valToPush = {
                            version: bible.version,
                            v: verse.v,
                            t: verse.t,
                            tags: verse.tags
                        },
                        collectedVersions = store[verse.id].map(function(obj) {
                            return obj.version
                        }); - 1 === collectedVersions.indexOf(bible.version) && ($rootScope.bibleVersion === bible.version ? store[verse.id].unshift(valToPush) : store[verse.id].push(valToPush))
                })
            }), $scope.sbs.push(store), $timeout(function() {
                $scope.slideToListVerse()
            }, 300), UI.hideSpinner()
        }, 300)
    }, $scope.crossReferenced = "", $scope.crossReferencedVersion = "", $scope.renderRefBible = function(id, bibleVersion) {
        if (isDevice) {
            if ($scope.crossReferenced !== id || $scope.crossReferencedVersion !== bibleVersion) {
                $rootScope.loadingRefBible = !0;
                var db = DB.open("bible");
                DB.select(db, "cross_reference", "vid, r, sv, ev", "WHERE vid = '" + id + "' order by r desc", function(result) {
                    console.log("bible ref result: " + angular.toJson(result)), 0 === result.length && (console.log("found no ref... setting loadingRefBible to false"), $rootScope.$apply(function() {
                        $rootScope.loadingRefBible = !1, $rootScope.refBibles = []
                    })), $rootScope.refBibles = [], angular.forEach(result, function(val) {
                        var db2 = DB.open(bibleVersion),
                            whereStmt = "WHERE id = " + val.sv;
                        0 !== val.ev && (whereStmt = "WHERE id BETWEEN " + val.sv + " AND " + val.ev), DB.select(db2, "t_" + bibleVersion, "id, b, c, v, t", whereStmt, function(result) {
                            console.log("refers: " + angular.toJson(result));
                            angular.forEach(result, function(val, key) {
                                $rootScope.refBibles.push(val), console.log("key: " + key), console.log("result.length: " + result.length), key === result.length - 1 && (console.log("update triggered: key - " + key), $rootScope.loadingRefBible = !1, $ionicSlideBoxDelegate.$getByHandle("left-side-menu").update(), $scope.crossReferenced = id, $scope.crossReferencedVersion = bibleVersion)
                            })
                        })
                    })
                })
            }
        } else $rootScope.refBibles = angular.fromJson('[{"id":5006016,"b":5,"c":6,"v":16,"t":"You shall not put the LORD your God to the test, as you tested [Him] at Massah."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."}]'), console.log("$rootScope.refBibles: " + $rootScope.refBibles)
    }, $rootScope.tagQuery = null, $scope.renderTags = function(id) {
        if (console.log("render tags called"), isDevice) {
            if ($rootScope.tagQuery !== id) {
                var tags = [],
                    db = DB.open("oneverse");
                DB.select(db, "tagVerse", "*", "WHERE bibleId = '" + id + "' AND isDeleted = 'false'", function(result) {
                    console.log("SQL: renderTags - " + angular.toJson(result)), angular.forEach(result, function(val, key) {
                        DB.select(db, "tag", "*", "WHERE id = '" + val.tagId + "' AND isDeleted = 'false'", function(sqlResult) {
                            console.log("SQL: getting tag info - " + angular.toJson(sqlResult)), "undefined" !== result[0] && tags.push(sqlResult[0]), key === result.length - 1 && $rootScope.$apply(function() {
                                $rootScope.tags = tags
                            })
                        })
                    }), 0 === result.length && $rootScope.$apply(function() {
                        $rootScope.tags = []
                    }), $rootScope.tagQuery = id
                })
            }
        } else $rootScope.tags = [{
            id: 1,
            tagName: "Test"
        }, {
            id: 2,
            tagName: "Holy Spirit"
        }]
    }, $rootScope.keywordQuery = "", $rootScope.keywordQuerySearchBook = "", $scope.renderSearchBible = function(word, bibleVersion) {
        if (isDevice) {
            $rootScope.loadingSearchBible = !0, $rootScope.keywordQuery = word, $rootScope.keywordQuerySearchBook = $scope.meta.searchbook;
            var db = DB.open(bibleVersion);
            word.replace(" ", "%");
            var whereStmt = "WHERE (t LIKE '%" + word + "%'";
            $scope.meta.advancedSearches && ($scope.meta.advancedSearches[0].keyword.length > 0 && angular.forEach($scope.meta.advancedSearches, function(advSearch) {
                advSearch.keyword.length > 0 && ("AND" == advSearch.classifier && (whereStmt += " " + advSearch.classifier + " t LIKE '%" + advSearch.keyword + "%'"), "NOT" == advSearch.classifier && (whereStmt += " AND t NOT LIKE '%" + advSearch.keyword + "%'"))
            }), whereStmt += ")", angular.forEach($scope.meta.advancedSearches, function(advSearch) {
                advSearch.keyword.length > 0 && "OR" == advSearch.classifier && (whereStmt += " " + advSearch.classifier + " t LIKE '%" + advSearch.keyword + "%'")
            })), "all" !== $scope.meta.searchbook && (whereStmt += "new" == $scope.meta.searchbook ? " AND b > 39" : "old" == $scope.meta.searchbook ? " AND b < 40" : " AND b = " + $scope.meta.searchbook), console.log("whereStmt: " + whereStmt), DB.select(db, "t_" + bibleVersion, "id, b, c, v, t", whereStmt, function(result) {
                console.log("searched results: " + angular.toJson(result)), 0 === result.length && UI.toast("NO_RESULTS_FOUND", "short", "center"), $rootScope.$apply(function() {
                    $rootScope.searchedVerses = result, $rootScope.loadingSearchBible = !1
                }), isDevice && (cordova.plugins.Keyboard.close(), $timeout(function() {
                    $ionicSlideBoxDelegate.$getByHandle("left-side-menu").update(), $ionicScrollDelegate.$getByHandle("side-menu-slide-3").resize()
                }))
            })
        } else $rootScope.searchedVerses = angular.fromJson('[{"id":61002007,"b":61,"c":2,"v":7,"t":"무법한 자들의 음란한 행실로 말미암아 고통 당하는 의로운 롯을 건지셨으니 무법한 자들의 음란한 행실로 말미암아 고통 당하는 의로운 롯을 건지셨으니"},{"id":61002007,"b":61,"c":2,"v":7,"t":"무법한 자들의 음란한 행실로 말미암아 고통 당하는 의로운 롯을 건지셨으니 무법한 자들의 음란한 행실로 말미암아 고통 당하는 의로운 롯을 건지셨으니"}]')
    };
    var showIntroBibleVersion = function() {
        UI.openModal("templates/modules/modal-intro-bible-version.html", $scope, function(modal) {
            $scope.modalIntroBibleVersion = modal, $scope.modalIntroBibleVersion.show(), $scope.modalIntroBibleVersionClose = function() {
                $scope.modalIntroBibleVersion.hide(), $scope.setIntroVersion(6)
            }
        })
    };
    $scope.doneInit = function() {
        $scope.meta.device.init = !1, Model.save($scope.meta.device, "device"), $scope.setIntroVersion(Config.getIntroVersion()), Model.save($scope.meta.settings, "settings");
        var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox");
        introSlidebox && introSlidebox.enableSlide(!0), $scope.renderBible(), showIntroBibleVersion()
    }, $scope.retryInit = function() {
        $scope.meta.device.initFailed = !1, downloadInitData()
    }, $scope.downloadInit = function() {
        downloadInitData()
    }, $scope.languages = Config.getLanguages(), $scope.showSettings = function() {
        UI.openModal("templates/modules/modal-settings.html", $scope, function(modal) {
            $scope.modalSettings = modal, $scope.modalSettings.show()
        })
    }, $scope.closeSettings = function() {
        $scope.modalSettings.hide()
    }, $scope.showThemes = function() {
        UI.openModal("templates/modules/modal-themes.html", $scope, function(modal) {
            $scope.modalThemes = modal, $scope.modalThemes.show()
        })
    }, $scope.closeThemes = function() {
        $scope.modalThemes.hide()
    }, $scope.allThemes = Config.getThemes(), $scope.changeTheme = function(code) {
        console.log("changeTheme clicked"), angular.forEach($scope.allThemes, function(val) {
            $css.remove(["css/theme." + val.code + ".min.css"])
        }), $css.bind({
            href: "css/theme." + code + ".min.css"
        }, $scope), $scope.meta.settings.theme = code, Model.save($scope.meta.settings, "settings"), "undefined" != typeof $scope.modalThemes && $scope.modalThemes.hide()
    }, $scope.changeThemeVia = function(theme) {
        !theme.pro || theme.pro && ($rootScope.userProfile.isProPurchased || $rootScope.userProfile.isPro) ? ($scope.changeTheme(theme.code), Analytics.track("ThemeChanged", {
            code: theme.code,
            isProPurchased: $rootScope.userProfile.isProPurchased,
            isPro: $rootScope.userProfile.isPro,
            platform: platformIs,
            uuid: uuidIs
        })) : UI.toast("GET_PRO", "short", "bottom")
    }, $scope.getCurrentTheme = function() {
        var currentIndex = 0;
        return angular.forEach($scope.allThemes, function(val, key) {
            val.code === $scope.meta.settings.theme && (currentIndex = key)
        }), currentIndex
    }, $scope.allFonts = Config.getFonts(), $scope.changeFont = function(code) {
        console.log("changeFont clicked"), angular.forEach($scope.allFonts, function(val) {
            $css.remove(["css/font." + val.code + ".min.css"])
        }), $css.bind({
            href: "css/font." + code + ".min.css"
        }, $scope), $scope.meta.settings.font = code, Model.save($scope.meta.settings, "settings")
    }, $rootScope.recognizedText = "", $rootScope.isRecognizedFailed = !1;
    var renderSpeech = function() {
        $scope.recognition = Speech.start($scope.meta.settings.language, function(transcript) {
            $scope.$apply(function() {
                $rootScope.recognizedText = transcript, $rootScope.isRecognizedFailed = !1
            }), Speech.process($scope.meta.settings.language, $rootScope.recognizedText, function(b, c, v) {
                console.log("GoTo: " + b + ":" + c + ":" + v);
                var book = parseInt(b) < 10 ? "0" + b : b,
                    totalChapters = Object.keys($scope.bibleData.books["BOOK_" + book].chapters).length,
                    totalVerses = "undefined" != typeof $scope.bibleData.books["BOOK_" + book] ? $scope.bibleData.books["BOOK_" + book].chapters["chapter_" + c] : 0;
                console.log("totalChapters: " + totalChapters), console.log("totalVerses: " + totalVerses), totalChapters >= c && totalVerses >= v && $scope.goTo(b, c, v), $rootScope.customAlert.close()
            }, function() {
                UI.toast("TRY_AGAIN_COULDNT_FIND", "short", "bottom")
            })
        }, function() {
            $rootScope.recognizedText = $translate.instant("TRY_AGAIN"), $rootScope.isRecognizedFailed = !0
        })
    };
    $scope.slideToVerse = function(verseIndex) {
        angular.forEach($rootScope.allVerticalSlides, function(val) {
            val !== $rootScope.currentSwiper && val.slideTo(verseIndex)
        })
    }, $scope.slideToVersion = function(versionIndex) {
        console.log("slideToVersion called: " + versionIndex), $rootScope.bibleVersion = $filter("reverse")($scope.bibleMeta.versions)[versionIndex], console.log("$rootScope.bibleVersion - " + $rootScope.bibleVersion), console.log("$scope.bibleMeta.versions - " + $scope.bibleMeta.versions), angular.forEach($rootScope.allHorizontalSlides, function(val) {
            val.slideTo(versionIndex)
        })
    }, $scope.slideTo = function(i) {
        2 === $scope.meta.device.allverse || 3 === $scope.meta.device.allverse ? ($scope.bibleMeta.verse = i, $rootScope.currentId = $scope.bibles[0].verses[i - 1].id, $rootScope.currentVerse = i - 1, console.log("$rootScope.currentId - " + $rootScope.currentId), console.log("$rootScope.currentVerse - " + $rootScope.currentVerse), 3 === $scope.meta.device.allverse ? $timeout(function() {
            $scope.slideToListVerse()
        }, 500) : $scope.slideToListVerse()) : angular.forEach($rootScope.allVerticalSlides, function(val) {
            val.slideTo(i - 1), $rootScope.currentVerse = i - 1
        }), $ionicSideMenuDelegate.toggleRight()
    }, $scope.setWindowHeight = function() {
        var height = $window.innerHeight;
        return isIOS && (height -= 30), {
            height: height + "px"
        }
    }, $scope.setWindowHeightWithHeader = function() {
        var height = $window.innerHeight - 50;
        return {
            height: height + "px"
        }
    }, $scope.setSideMenuHeight = function() {
        var height = $window.innerHeight - 70;
        return isIOS && (height -= 15), {
            height: height + "px"
        }
    }, $scope.nextChapter = function() {
        console.log("nextChapter called"), console.log("$scope.bibleMeta - " + angular.toJson($scope.bibleMeta));
        var bookChosen = parseInt($scope.bibleMeta.book) < 10 ? "0" + $scope.bibleMeta.book : $scope.bibleMeta.book;
        console.log("bookChosen - " + bookChosen);
        var totalChapters = Object.keys($scope.bibleData.books["BOOK_" + bookChosen].chapters).length;
        $scope.bibleMeta.chapter < totalChapters ? ($scope.bibleMeta.chapter += 1, $scope.bibleMeta.verse = 1, $scope.renderBible(function() {
            console.log("inside callback"), $rootScope.currentId = $scope.bibles[0].verses[0].id, console.log("TODO: check currentId - " + $rootScope.currentId)
        })) : parseInt($scope.bibleMeta.book) < 66 ? ($scope.bibleMeta.book += 1, $scope.bibleMeta.chapter = 1, $scope.bibleMeta.verse = 1, $scope.renderBible(function() {
            console.log("inside callback"), $rootScope.currentId = $scope.bibles[0].verses[0].id, console.log("TODO: check currentId - " + $rootScope.currentId)
        }), UI.toast("MSG_END_OF_CHAPTER_NEXT_BOOK", "short", "center")) : UI.toast("MSG_END_OF_CHAPTER", "short", "center"), $scope.expandMenu(!0)
    }, $scope.prevChapter = function() {
        console.log("prevChapter called"), $scope.bibleMeta.chapter > 1 ? ($scope.bibleMeta.chapter -= 1, $scope.bibleMeta.verse = 1, $scope.renderBible(function() {
            console.log("inside callback"), $rootScope.currentId = $scope.bibles[0].verses[0].id, console.log("TODO: check currentId - " + $rootScope.currentId)
        })) : UI.toast("MSG_FIRST_CHAPTER", "short", "center"), $scope.expandMenu(!0)
    }, $rootScope.starred = !1, $scope.starred = function() {
        return console.log("starred!"), $rootScope.currentId ? ($rootScope.starred = !$rootScope.starred, void($rootScope.starred && $scope.saveTag([{
            tagName: "favorite",
            tagNote: ""
        }], [], !0))) : (UI.toast("TRY_AGAIN", "short", "bottom"), !1)
    }, $scope.insertTagVerse = function(tx, tagId, callback) {
        console.log("insertTagVerse called"), console.log("tagId: " + tagId), console.log("$rootScope.currentId: " + $rootScope.currentId), tx.executeSql("SELECT id FROM tagVerse WHERE tagId = ? AND bibleId = ? AND isDeleted = ?", [tagId, $rootScope.currentId, !1], function(tx, res) {
            console.log("SQL: tag verse found - " + angular.toJson(res)), 0 === res.rows.length ? (console.log("tagId : " + tagId), console.log("currentId: " + $rootScope.currentId), console.log("createdAt: " + Date.now()), tx.executeSql("INSERT INTO tagVerse (tagId, bibleId, createdAt, syncID, syncedAt, isDeleted) VALUES (?, ?, ?, ?, ?, ?)", [tagId, $rootScope.currentId, Date.now(), null, null, !1], function(tx, res) {
                console.log("SQL: tag verse inserted - " + angular.toJson(res)), "undefined" != typeof callback && (console.log("SQL: tag verse inserted so calling callback"), callback(tagId)), $rootScope.syncToCloud()
            })) : (console.log("SQL: seems tag verse already exists??? " + angular.toJson(res)), $rootScope.starred = !1, UI.hideStarred())
        })
    }, $scope.saveTag = function(tags, markForDeletion, isStarred) {
        if (isStarred && UI.showStarred(), 0 === tags.length && 0 === markForDeletion.length) return UI.toast("TAG_AT_LEAST_ONE_REQUIRED", "short", "bottom"), !1;
        if (isDevice) {
            var db = DB.open("oneverse");
            db.transaction(function(tx) {
                console.log("SQL: trying to create table if not exists"), angular.forEach(tags, function(val) {
                    console.log("SQL: looping through tags");
                    var tagName = val.tagName.trim(),
                        tagNote = "undefined" == typeof val.tagNote ? null : val.tagNote.trim(),
                        successTagVerse = isStarred ? function(insertedTagId) {
                            UI.toast("STARRED", "short", "bottom"), console.log("tag verse inserted successfully");
                            var valToPush = {
                                id: insertedTagId,
                                tagName: "favorite"
                            };
                            angular.forEach($scope.bibles, function(bible) {
                                angular.forEach(bible.verses, function(verse) {
                                    $rootScope.currentId === verse.id && (console.log("found matching current id in bible verses"), "undefined" == typeof verse.tags && (verse.tags = []), -1 === verse.tags.map(function(obj) {
                                        return obj.id
                                    }).indexOf(insertedTagId) && (console.log("tag id not found, appending.. #1"), verse.tags.push(valToPush)))
                                })
                            }), angular.forEach($scope.sbs, function(each_sbs) {
                                console.log("appending star to sbs"), "undefined" == typeof each_sbs[$rootScope.currentId.toString()][0].tags && (each_sbs[$rootScope.currentId.toString()][0].tags = []), -1 === each_sbs[$rootScope.currentId.toString()][0].tags.map(function(obj) {
                                    return obj.id
                                }).indexOf(insertedTagId) && (console.log("tag id not found, appending.. #2"), each_sbs[$rootScope.currentId.toString()][0].tags.push(valToPush))
                            }), $rootScope.starred = !1, UI.hideStarred()
                        } : function() {};
                    console.log("now find tag and if tag is not found, then will insert"), tx.executeSql("SELECT id FROM tag WHERE tagName = ? AND isDeleted = ?", [tagName, !1], function(tx, res) {
                        if (0 === res.rows.length) {
                            console.log("SQL: tag not found - " + angular.toJson(res)), console.log("SQL: tag not found tagName - " + tagName);
                            var settings = Model.fetch("settings"),
                                language = settings.language;
                            console.log("SQL: language params - " + language), tx.executeSql("INSERT INTO tag (tagName, note, language, createdAt, privacy, syncID, syncedAt, isDeleted) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", [tagName, tagNote, language, Date.now(), "private", null, null, !1], function(tx, res) {
                                console.log("SQL: insert into tag called - " + angular.toJson(res)), 1 === res.rowsAffected && (console.log("SQL: inserted tag - " + angular.toJson(res)), $scope.insertTagVerse(tx, res.insertId, successTagVerse), console.log("done calling insertTagVerse #1"))
                            })
                        } else console.log("SQL: tag found - " + angular.toJson(res)), console.log("SQL: tag found tagName - " + tagName), $scope.insertTagVerse(tx, res.rows.item(0).id, successTagVerse), console.log("done calling insertTagVerse #2")
                    })
                }), console.log("now trying to delete if anything is marked for deletion - " + angular.toJson(markForDeletion)), angular.forEach(markForDeletion, function(val) {
                    tx.executeSql("UPDATE tagVerse SET isDeleted = ? WHERE tagId = ?", [!0, val.id], function(tx, res) {
                        console.log("SQL: updating tagVerse for deletion - " + angular.toJson(res)), 1 === res.rowsAffected && (console.log("SQL: updated tagVerse for deleted"), tx.executeSql("SELECT id FROM tagVerse WHERE id = ? AND isDeleted = ?", [val.id, !1], function(tx, res) {
                            0 === res.rows.length && tx.executeSql("UPDATE tag SET isDeleted = ? WHERE id = ?", [!0, val.id], function(tx, res) {
                                console.log("SQL: updating tag for deletion - " + angular.toJson(res)), 1 === res.rowsAffected && console.log("SQL: deleting tag")
                            })
                        }))
                    })
                })
            }, function(e) {
                console.log("SQL: db transaction error - " + angular.toJson(e)), UI.hideStarred(), $rootScope.starred = !1, UI.toast("OOPS", "short", "bottom")
            })
        }
        isStarred || ($location.url("home"), UI.toast("SAVED", "short", "bottom")), $rootScope.tagQuery = null
    }, $scope.menuExpanded = !1, $scope.expandMenu = function(forceClose) {
        console.log("expandMenu called"), $scope.menuExpanded = forceClose ? !1 : !$scope.menuExpanded
    }, $scope.verseDetail = function() {
        console.log("verseDetail called: " + $rootScope.currentId), $ionicScrollDelegate.$getByHandle("side-menu-left-content").scrollTop([!0]), $ionicSideMenuDelegate.toggleLeft(), $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(1), $rootScope.activeSideMenuSlideBox = 1, $scope.renderRefBible($rootScope.currentId, $rootScope.bibleVersion), $scope.expandMenu(!0)
    }, $scope.tagDetail = function() {
        $ionicScrollDelegate.$getByHandle("side-menu-left-content").scrollTop([!0]), $ionicSideMenuDelegate.toggleLeft(), $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(2), $rootScope.activeSideMenuSlideBox = 2, $scope.expandMenu(!0)
    }, $scope.verseTags = function() {
        console.log("verseTags called: " + $rootScope.currentId), $ionicScrollDelegate.$getByHandle("side-menu-left-content").scrollTop([!0]), $ionicSideMenuDelegate.toggleLeft(), $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(2), $rootScope.activeSideMenuSlideBox = 2
    }, $scope.goTo = function(book, chapter, verse) {
        console.log("goTo: book - " + book + " chapter " + chapter + " verse " + verse), $scope.bibleMeta.book = book, $scope.bibleMeta.chapter = chapter, $scope.bibleMeta.verse = verse, $scope.renderBible(function() {
            $rootScope.currentId = $scope.bibles[0].verses[$scope.bibleMeta.verse - 1].id
        })
    }, $scope.changeSideMenuSlide = function(index) {
        console.log("changeSideMenuSlide - " + index);
        var elem = document.getElementById("sideMenuButton-" + index);
        $ionicScrollDelegate.$getByHandle("scroll-sidemenu").scrollTo(elem.offsetLeft, 0, [!0]), $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(index), $ionicScrollDelegate.$getByHandle("side-menu-slide-" + index).scrollTop([!0])
    }, $scope.sideMenuSlideChange = function(index) {
        console.log("left slide change made : " + index), $rootScope.activeSideMenuSlideBox = index, 1 === index && $scope.renderRefBible($rootScope.currentId, $rootScope.bibleVersion), $ionicScrollDelegate.$getByHandle("side-menu-slide-" + index).scrollTop([!0]), $timeout(function() {
            $ionicSlideBoxDelegate.$getByHandle("left-side-menu").update()
        })
    }, $scope.searchKeyword = function(keyword) {
        console.log("searched keyword: " + keyword), console.log("searched keyword length: " + keyword.length);
        var language = $scope.meta.supportedVersionsMeta[$rootScope.bibleVersion].languageCode;
        console.log("language - " + language);
        var lengthCheck = 3;
        ("ko" === language || "zh" === language) && (lengthCheck = 2), angular.isDefined(keyword) && keyword.length >= lengthCheck ? $scope.renderSearchBible(keyword, $rootScope.bibleVersion) : UI.toast("KEYWORD_TOO_SHORT", "short", "center")
    }, $scope.openAdvPanel = function() {
        $scope.meta.showAdvPanel = !0
    }, $scope.resetAdvPanel = function() {
        $scope.meta.advancedSearches = [{
            keyword: "",
            classifier: "AND"
        }]
    }, $scope.moreAdvancedSearch = function() {
        $scope.meta.advancedSearches.push({
            keyword: "",
            classifier: "AND"
        })
    }, $scope.purchaseOrShare = function() {
        $scope.productPro = Purchase.getProduct("pro"), $timeout(function() {
            $scope.purchaseOrShareAlert = UI.customAlert("GET_PRO", "templates/modules/custom-purchase-or-share.html", $scope)
        })
    }, $scope.purchaseOrShareToast = function() {
        UI.toast("GET_PRO", "short", "bottom")
    }, $scope.purchaseProduct = function(productAlias) {
        if (console.log("Purchase -- purchaseProduct called with productAlias = " + productAlias), isDevice && $cordovaNetwork.isOnline()) {
            var productId = Purchase.get(productAlias);
            Purchase.purchase(productId, function() {
                console.log("callback after success purchse")
            })
        } else UI.toast("PLEASE_GET_ONLINE", "short", "bottom")
    }, $scope.onTap = function(e) {
        ionic.Platform.isIOS() && ($scope.barProgress = e.target.max / e.target.offsetWidth * (e.gesture.touches[0].screenX - e.target.offsetLeft))
    }, $scope.showShare = function() {
        $scope.purchaseOrShareAlert.close(), $scope.expandMenu(!0), $location.url("share")
    }, $scope.closePurchaseOrShare = function() {
        $scope.purchaseOrShareAlert.close()
    }, $scope.shareToApp = function() {
        var message = $translate.instant("SHARE_FRIENDLY_MSG"),
            subject = $translate.instant("SHARE_FRIENDLY_HEADER");
        Share.toApp(message, subject, $scope.meta.app.website2, $scope.meta.app.hashtags, function() {
            UI.toast("SHARE_SUCCESSFULLY_SHARED", "short", "bottom")
        }, function() {
            UI.toast("SHARE_FAILED_SHARE", "short", "bottom")
        })
    }, $scope.login = function() {
        $location.url("login")
    }, $scope.loginAndCloseIntro = function() {
        $scope.nextIntro(), $scope.login()
    }, $scope.addTag = function() {
        $scope.expandMenu(!0), $location.url("tag")
    }, $scope.viewTags = function() {
        $location.url("tags")
    }, $scope.showTagVerses = function(tagId) {
        $location.path("/tagverse/" + tagId)
    }, $scope.setIntroVersion = function(version) {
        console.log("setIntroVersion to " + version), -1 === $scope.meta.settings.introVersion.indexOf(parseInt(version)) && $scope.meta.settings.introVersion.push(parseInt(version)), Model.save($scope.meta.settings, "settings")
    }, $scope.visit = function(key) {
        var url = $scope.meta.app[key];
        $cordovaInAppBrowser.open(url, "_system")
    };
    var hiddenTouch = 0;
    $scope.getHiddenFeature = function() {
        if (hiddenTouch += 1, 10 === hiddenTouch && (UI.simpleAlert("UUID: " + uuidIs, "ALERT", "OK", function() {
                hiddenTouch = 0
            }), -1 !== bypassIds.indexOf(uuidIs) && isDevice)) {
            var option = {
                id: "1001001",
                title: $translate.instant("GUESS_BIBLE_VERSE"),
                text: "Genesis 1:1",
                data: "1:1:1:1001001"
            };
            cordova.plugins.notification.local.schedule(option)
        }
    }, $scope.cacheProfileImage = function() {
        var targetUrl = File.getTargetPath() + "profile.jpg";
        "undefined" != typeof $scope.meta.user && null !== $scope.meta.user && $cordovaNetwork.isOnline() && $cordovaFileTransfer.download($scope.meta.user.get("picture"), targetUrl, {}, !0).then(function(result) {
            console.log("profile has been saved to " + angular.toJson(result)), console.log("profile url: " + result.nativeURL), $scope.meta.user_picture = result.nativeURL, Model.save($scope.meta.user_picture, "user_picture")
        }, function(err) {
            console.log("profile failed to save: " + angular.toJson(err))
        })
    }, $scope.noRating = function() {
        UI.simpleConfirm("ARE_YOU_SURE", "INFO", function() {
            $scope.setIntroVersion(5), Analytics.track("RatingDeclined", {
                uuid: uuidIs,
                platform: platformIs,
                language: $scope.meta.settings.language,
                deviceLanguage: deviceLanguage
            })
        })
    }, $scope.yesRating = function() {
        var url = Config.getStoreUrl();
        $cordovaInAppBrowser.open(url, "_system"), UI.simpleConfirm("DID_YOU_RATE", "INFO", function() {
            ParseFactory.extendPro(10, function(expiresAt) {
                $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt), Model.save($rootScope.userProfile, "userprofile"), $scope.setIntroVersion(5), Analytics.track("RatingAccepted", {
                    uuid: uuidIs,
                    platform: platformIs,
                    language: $scope.meta.settings.language,
                    deviceLanguage: deviceLanguage,
                    expiresAt: "" + $rootScope.userProfile.expiresAt
                }), UI.simpleAlert($rootScope.userProfile.expiresAt + " " + $translate.instant($filter("daysLeftLabel")($rootScope.userProfile.expiresAt)), "INFO", "OK", function() {})
            }, function() {
                UI.toast("RATE_FAILED", "short", "bottom")
            })
        })
    }, $scope.shareToExtend = function() {
        $scope.meta.app.shareDayEnabled && ($scope.shareToExtendPopup = UI.customAlert("SHARE", "templates/modules/custom-share-to-extend.html", $scope))
    }, $scope.shareToService = function(provider) {
        $scope.shareToExtendPopup.close(), Share.toService(provider, $scope.meta.app.website2, $scope.meta.app.hashtags, function() {
            console.log("successfully shared"), UI.simpleConfirm("DID_YOU_SHARE", "INFO", function() {
                $scope.meta.app.shareDayLimit >= $scope.meta.settings.sharedCount ? ParseFactory.extendPro($scope.meta.app.shareDay, function(expiresAt) {
                    $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt), Model.save($rootScope.userProfile, "userprofile"), $rootScope.userProfile.expiresAt > 0 && ($rootScope.userProfile.isPro = !0), "undefined" == typeof $scope.meta.settings.sharedCount && ($scope.meta.settings.sharedCount = 0), $scope.meta.settings.sharedCount += 1, Model.save($scope.meta.settings, "settings"), UI.toast($rootScope.userProfile.expiresAt + " " + $translate.instant($filter("daysLeftLabel")($rootScope.userProfile.expiresAt)), "short", "bottom")
                }, function() {
                    UI.toast("SHARE_FAILED_SHARE", "short", "bottom")
                }) : UI.toast("SHARE_LIMIT_REACHED", "short", "bottom")
            })
        })
    }, $scope.closeShareToService = function() {
        $scope.shareToExtendPopup.close()
    }, $scope.$on("$ionicView.loaded", function() {
        console.log("view load event")
    }), $scope.$on("$stateChangeStart", function(event, current, currentParams, previous) {
        console.log("previous.name: " + previous.name), console.log("current.name: " + current.name), "" !== previous.name && "home" === current.name && 1 === $scope.meta.device.allverse ? (console.log("swiper updating since current view is 'home'"), console.log("renderbible 003"), $scope.renderBible()) : ("books" === previous.name || "tag" === previous.name) && "home" === current.name && $scope.meta.device.allverse > 1 ? (console.log("calling render bible"), console.log("renderbible 004"), $scope.renderBible()) : $scope.expandMenu(!0), "tagverse" === previous.name && "home" === current.name && $scope.renderMemoryVerses($scope.meta.memoryVerses)
    })
}), ovModule.controller("homeCtrl", function($css, $cordovaNetwork, $filter, $ionicBackdrop, $ionicPlatform, $ionicPopup, $ionicPosition, $ionicScrollDelegate, $ionicSideMenuDelegate, $ionicSlideBoxDelegate, $location, $rootScope, $scope, $timeout, $translate, $window, Analytics, Bible, Config, DB, Debug, File, Model, Purchase, Share, UI) {
    -1 === $rootScope.versionIndex && ($rootScope.versionIndex = 0), isDevice || ($scope.$parent.bibleData.books = Bible.processBooks(Debug.books())), $scope.totalChapters = 0, $scope.totalVerses = 0;
    var collectHistory = function() {
        $rootScope.history = Model.collectHistory({
            book: $scope.$parent.bibleMeta.book,
            chapter: $scope.$parent.bibleMeta.chapter,
            verse: $scope.$parent.bibleMeta.verse,
            date: moment().format("MMMM Do YYYY, h:mm:ss a")
        }), console.log("$scope.$parent.history: " + angular.toJson($scope.$parent.history))
    };
    $rootScope.customAlert = null, $rootScope.startRecognition = function() {
        $rootScope.userProfile.isPro || $rootScope.userProfile.isProPurchased ? ($rootScope.recognizedText = "", $rootScope.isRecognizedFailed = !1, $rootScope.customAlert = UI.customAlert("SAY", "templates/modules/custom-recognition.html", $rootScope), isDevice ? $scope.$parent.recognition.start() : $rootScope.recognizedText = "Sample Text") : $scope.$parent.purchaseOrShare()
    }, $rootScope.restartRecognition = function() {
        ($rootScope.recognizedText.length > 0 || $rootScope.isRecognizedFailed) && ($rootScope.recognizedText = "", $rootScope.isRecognizedFailed = !1, isDevice ? $scope.$parent.recognition.start() : $rootScope.recognizedText = "Sample Text")
    }, $rootScope.cancelRecognition = function() {
        isDevice && $scope.$parent.recognition.abort(), $rootScope.customAlert.close()
    }, -1 !== $scope.$parent.meta.settings.introVersion.indexOf(1) && -1 === $scope.$parent.meta.settings.introVersion.indexOf(2) && UI.openModal("templates/modules/modal-intro-home.html", $scope, function(modal) {
        $scope.modalIntroHome = modal, $scope.modalIntroHome.show(), $scope.modalIntroHomeClose = function() {
            $scope.$parent.setIntroVersion(2), $scope.modalIntroHome.hide()
        }
    }), $rootScope.allVerticalSlides = [], $rootScope.allHorizontalSlides = [], $rootScope.$watch("currentVerse", function(newValue, oldValue, scope) {
        if (oldValue !== newValue) {
            console.log("currentVerse changed to :" + newValue), console.log("bibles length - " + $scope.bibles.length), console.log("bibles - " + angular.toJson(scope.bibles)), $scope.$parent.bibleMeta.verse = newValue + 1, Model.save($scope.$parent.bibleMeta, "bible_meta"), collectHistory();
            var dimensions = {
                version: $rootScope.bibleVersion,
                bookDisplay: $translate.instant($filter("getBookName")($scope.$parent.bibleMeta.book)),
                book: "" + $scope.$parent.bibleMeta.book,
                chapter: "" + $scope.$parent.bibleMeta.chapter,
                verse: "" + $scope.$parent.bibleMeta.verse,
                uuid: uuidIs,
                view: "" + $scope.$parent.meta.device.allverse
            };
            Analytics.track("ReadBible", dimensions)
        }
        $scope.$parent.slideToVerse(newValue)
    }), $rootScope.$watch("bibleVersion", function(newValue, oldValue) {
        if (console.log("WATCH: bibleVersion: " + newValue), oldValue !== newValue) {
            $scope.$parent.bibleMeta.version = newValue, Model.save($scope.$parent.bibleMeta, "bible_meta"), collectHistory(), $rootScope.searchedVerses = [], $rootScope.searchedKeyword = "";
            var bibleName = "";
            angular.forEach($scope.$parent.meta.supportedVersions, function(val) {
                angular.forEach(val, function(version) {
                    version.bibleCode === newValue && (bibleName = version.bibleName)
                })
            }), UI.toast(bibleName, "short", "bottom")
        }
    }), $rootScope.$watch("currentId", function(newValue) {
        console.log("WATCH: currentId - " + newValue)
    }), $rootScope.$watch("currentIsEnd", function(newValue, oldValue) {
        oldValue !== newValue && newValue === !0 && (UI.toast("MSG_END_OF_VERSE", "short", "bottom"), $rootScope.currentIsEnd = !1)
    }), $scope.showBibleVersions = function() {
        $scope.$parent.updateSupportVersionsProduct(), UI.openModal("templates/modules/modal-bible-versions.html", $scope, function(modal) {
            $scope.modalBibleVersions = modal, $scope.modalBibleVersions.show()
        })
    }, $scope.closeBibleVersions = function() {
        if ($scope.$parent.bibleMeta.versions.length > 0 && $scope.$parent.bibleMeta.versions.length < 5) {
            var dimensions = {
                versions: $scope.$parent.bibleMeta.versions.join(","),
                uuid: uuidIs,
                language: $scope.$parent.meta.settings.language
            };
            Analytics.track("BibleVersions", dimensions);
            var modal = $scope.modalBibleVersions.hide();
            modal.then(function() {
                $scope.$parent.renderBible()
            })
        } else 0 === $scope.$parent.bibleMeta.versions.length ? UI.toast("MSG_CHOOSE_AT_LEAST_ONE_VERSION", "short", "center") : $scope.$parent.bibleMeta.versions.length > 4 && UI.toast("MSG_VERSIONS_ALLOWED", "short", "center")
    }, $scope.downloadVersion = function(version) {
        if (console.log("downloadVersion called"), console.log(angular.toJson(version)), !version.is_downloading)
            if (version.supported) $scope.selectedBible = version.bibleName, $scope.selectedVersion = version, !version.iap || version.product.owned ? UI.confirm("WARNING", "templates/modules/confirm-download.html", "OK", $scope, function() {
                version.is_downloading = !0, isDevice ? File.download(version.bibleCode, function() {
                    $scope.bibleMeta.downloads.push(version.bibleCode), Model.save($scope.$parent.bibleMeta, "bible_meta"), collectHistory(), version.is_downloading = !1, version.is_update_ready = !1, $scope.$parent.meta.localBibleVersions[version.bibleCode] = version.version, Model.save($scope.$parent.meta.localBibleVersions, "localBibleVersions"), angular.forEach($scope.$parent.meta.supportedVersions, function(ver) {
                        angular.forEach(ver, function(val) {
                            val.bibleCode === version.version && (val.is_update_ready = !1)
                        })
                    }), Model.save($scope.$parent.meta.supportedVersions, "supportedVersions")
                }, function() {
                    version.is_downloading = !1, UI.toast("SOMETHING_WRONG", "short", "center")
                }) : $timeout(function() {
                    version.is_downloading = !1
                }, 1e3)
            }) : version.product.owned || ($scope.$parent.confirmPurchaseVersion = UI.confirm("PURCHASE", "templates/modules/confirm-purchase-version.html", "OK", $scope, function() {
                Purchase.purchase(version.product.id, function() {
                    console.log("Purchase - in app purchase triggered"), UI.simpleAlert("AFTER_PURCHASE", "INFO", "OK", function() {})
                }), isDevice || (version.product.owned = !0)
            }));
            else {
                if ("undefined" == typeof version.count ? version.count = 1 : version.count += 1, version.count > 10) {
                    $rootScope.secretkey = "";
                    var secretPopup = $ionicPopup.show({
                        template: '<input type="password" ng-model="$root.secretkey">',
                        title: $translate.instant("ENTER_SECRET"),
                        cssClass: "oneverse-popup",
                        buttons: [{
                            text: $translate.instant("CANCEL")
                        }, {
                            text: "<b>" + $translate.instant("SUBMIT") + "</b>",
                            type: "button-calm",
                            onTap: function(e) {
                                return $rootScope.secretkey !== $scope.$parent.meta.app.secret ? (e.preventDefault(), !1) : !0
                            }
                        }]
                    });
                    secretPopup.then(function(res) {
                        res && (version.supported = !0)
                    })
                }
                UI.toast("NOT_SUPPORTED_VERSION", "short", "bottom")
            }
    }, $scope.versionHelp = function() {
        UI.alert("HELP", "templates/modules/alert-version-help.html", $scope)
    }, $scope.showBooks = function() {
        $location.url("books")
    }, $scope.toggleActionSheet = function() {
        UI.actionSheet("MORE", "CANCEL", [{
            text: $translate.instant("SELECT_VERSIONS") + "<span class='icon ion-ios-book-outline'></span>"
        }, {
            text: $translate.instant("COMPARE_ALL_VERSIONS") + "<span class='icon ion-ios-analytics'></span>"
        }, {
            text: $translate.instant("VIEW_ALL_TAGS") + "<span class='icon ion-ios-pricetags-outline'></span>"
        }, {
            text: $translate.instant("TAG_ADD") + "<span class='icon ion-ios-pricetag-outline'></span>"
        }, {
            text: $translate.instant("CROSS_REFERENCE") + "<span class='icon ion-ios-list-outline'></span>"
        }, {
            text: $translate.instant("SHARE_VERSE") + "<span class='icon ion-android-share-alt'></span>"
        }], function(idx) {
            switch (idx) {
                case 0:
                    $scope.showBibleVersions();
                    break;
                case 1:
                    $location.url("compareall");
                    break;
                case 2:
                    $scope.$parent.viewTags();
                    break;
                case 3:
                    $scope.$parent.addTag();
                    break;
                case 4:
                    $scope.$parent.verseDetail();
                    break;
                case 5:
                    $scope.onHold($rootScope.currentId)
            }
        })
    }, $scope.toggleRightMenu = function() {
        isIOS || (document.getElementById("ov-side-menu-left").style.display = "none"), $ionicSideMenuDelegate.toggleRight(), $timeout(function() {
            var elem = document.getElementById("main-verse-selection-" + $rootScope.currentVerse);
            $ionicScrollDelegate.$getByHandle("scroll-sidemenu-right").scrollTo(0, elem.offsetTop, [!0])
        })
    }, $scope.toggleLeftMenu = function() {
        isIOS || (document.getElementById("ov-side-menu-right").style.display = "none"), $ionicScrollDelegate.$getByHandle("side-menu-left-content").scrollTop([!0]), $ionicScrollDelegate.$getByHandle("side-menu-slide-0").scrollTop([!0]), $ionicSideMenuDelegate.toggleLeft(), $rootScope.activeSideMenuSlideBox = 0, $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(0);
        var elem = document.getElementById("sideMenuButton-0");
        $ionicScrollDelegate.$getByHandle("scroll-sidemenu").scrollTo(elem.offsetLeft, 0, [!0])
    }, $scope.isRightMenuOpened = function() {
        return $ionicSideMenuDelegate.isOpenRight()
    }, $rootScope.multimode = !1, $rootScope.multimodeSelected = [], $scope.onHold = function(holdId, forceClose) {
        console.log("on hold"), console.log($rootScope.multimodeSelected), $rootScope.currentId = holdId, $rootScope.multimode = !$rootScope.multimode, "undefined" != typeof forceClose && ($rootScope.multimode = !1), $rootScope.multimodeSelected = $rootScope.multimode ? ["" + holdId] : [], $scope.$parent.meta.device.allverse > 1 && $scope.$parent.slideToListVerse(), UI.vibrate(100)
    }, $scope.closeOnHold = function() {
        UI.toast("CANCELLED", "short", "bottom"), $scope.onHold($rootScope.currentId)
    }, $scope.holdToCopy = function(verse, verseId) {
        console.log("holdToCopy - verse - " + angular.toJson(verse)), console.log("holdToCopy - verseId - " + angular.toJson(verseId)), verseId = verseId || null, verseId && (verseId = verseId.toString()), UI.vibrate(100);
        var chapter = "undefined" != typeof verse ? verse.c : null,
            verseNumber = "undefined" != typeof verse ? verse.v : null,
            bookNumber = "undefined" != typeof verse ? verse.b : null;
        verseId && (verseNumber = parseInt(verseId.substr(verseId.length - 3)), chapter = parseInt(verseId.substr(verseId.length - 6, 3)), bookNumber = verseId.replace(verseId.substr(verseId.length - 6), "")), console.log("bookNumber: " + bookNumber), console.log("verseNumber: " + verseNumber), bookNumber = parseInt(bookNumber) < 10 ? "0" + bookNumber : bookNumber;
        var ref = $translate.instant("BOOK_" + bookNumber) + " " + chapter + ":" + verseNumber,
            message = "(" + ref + ") " + verse.t;
        Share.toClipboard(message, $scope.$parent.meta.app.website2, function() {
            UI.toast("MSG_CLIPBOARD_SUCCESS", "short", "bottom")
        }, function() {
            UI.toast("MSG_CLIPBOARD_ERROR", "short", "bottom")
        })
    }, $scope.shareVerse = function(index) {
        if ($rootScope.multimodeSelected.length > 0) {
            var messageToShare = "",
                messageBibleVerse = "",
                bibleVersionName = $scope.$parent.meta.supportedVersionsMeta[$rootScope.bibleVersion].bibleName,
                bibleVersionSupported = $scope.$parent.meta.supportedVersionsMeta[$rootScope.bibleVersion].supported;
            bibleVersionName = bibleVersionSupported ? " ** " + bibleVersionName : "";
            var headerToShare = "One Verse " + $translate.instant("BIBLE") + bibleVersionName + "\n\n";
            console.log("$scope.$parent.meta.supportedVersionsMeta: " + angular.toJson($scope.$parent.meta.supportedVersionsMeta));
            var db = DB.open($rootScope.bibleVersion);
            0 === index || 1 === index || 3 === index ? DB.select(db, "t_" + $rootScope.bibleVersion, "b,c,v,t", "WHERE id in (" + $rootScope.multimodeSelected.join(",") + ") ORDER BY id", function(result) {
                angular.forEach(result, function(val, key) {
                    var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                    0 === key && (3 !== index && (messageBibleVerse += "("), messageBibleVerse += $translate.instant("BOOK_" + bookNumber) + " " + val.c + ":", messageBibleVerse += val.v, 1 == result.length ? 3 !== index && (messageBibleVerse += ")") : (messageBibleVerse += "~" + result[result.length - 1].v, 3 !== index && (messageBibleVerse += ")")), 3 !== index && (messageToShare += messageBibleVerse), messageToShare += "\n"), messageToShare += 3 === index ? "<span class='bible-verse'>" + val.v + "</span>" : val.v, messageToShare += " " + val.t + " \n"
                }), 0 === index ? Share.toClipboard(messageToShare + headerToShare, $scope.$parent.meta.app.website2, function() {
                    $scope.onHold($rootScope.currentId, !0)
                }, function() {
                    $scope.onHold($rootScope.currentId, !0)
                }) : 1 === index ? Share.toApp(messageToShare + headerToShare, headerToShare, $scope.$parent.meta.app.website2, "", function() {
                    $scope.onHold($rootScope.currentId, !0), UI.toast("SHARE_SUCCESSFULLY_SHARED", "short", "bottom")
                }, function() {
                    $scope.onHold($rootScope.currentId, !0), UI.toast("SHARE_FAILED_SHARE", "short", "bottom")
                }) : 3 === index && ($scope.messageBibleVerse = messageBibleVerse, $scope.messageToShare = messageToShare, UI.openModal("templates/modules/modal-screenshot-mode.html", $scope, function(modal) {
                    $scope.modalScreenshotMode = modal, $scope.modalScreenshotMode.show(), UI.toast("MSG_SLIDE_LEFT_RIGHT_CHANGE", "short", "bottom")
                }))
            }) : 2 === index ? DB.select(db, "t_" + $rootScope.bibleVersion, "b,c,v,t", "WHERE id in (" + $rootScope.multimodeSelected.join(",") + ") ORDER BY id", function(result) {
                angular.forEach(result, function(val) {
                    var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                    messageToShare += "[" + $translate.instant("BOOK_" + bookNumber) + " " + val.c + ":" + val.v + "] " + val.t
                }), Share.toFacebook(messageToShare, headerToShare, function() {
                    $location.url("home"), ParseFactory.extendOneDay(function(expiresAt) {
                        console.log("Check whether extended: " + expiresAt), $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt), Model.save($rootScope.userProfile, "userprofile"), UI.toast($rootScope.userProfile.expiresAt + " " + $translate.instant($filter("daysLeftLabel")($rootScope.userProfile.expiresAt)), "short", "bottom")
                    }, function() {
                        UI.toast("SHARE_FAILED_SHARE", "short", "center")
                    })
                }, function() {
                    UI.toast("SHARE_FAILED_SHARE", "short", "center")
                })
            }) : UI.toast("MSG_CHOOSE_AT_LEAST_ONE_VERSE", "short", "buttom")
        } else UI.toast("PLEASE_SELECT_AT_LEAST_ONE", "short", "bottom")
    }, $scope.closeScreenshotMode = function() {
        $scope.modalScreenshotMode.hide(), $scope.closeOnHold()
    }, $scope.nowTakeScreenshot = !1, $scope.takeScreenshot = function() {
        $scope.nowTakeScreenshot = !0, UI.toast("MSG_TAKE_SCREENSHOT", "short", "bottom"), $timeout(function() {
            $scope.nowTakeScreenshot = !1
        }, 1e4)
    }, $scope.showShare = function() {
        $location.url("share")
    }, $scope.bibleVersionChangeSlide = function(index) {
        console.log("slide changed"), $rootScope.bibleVersion = $filter("reverse")($scope.bibleMeta.versions)[index]
    }, $scope.touchedVerse = function(currentId, currentVerse) {
        $rootScope.currentId = currentId, $rootScope.currentVerse = currentVerse - 1
    }, $scope.setAllVerseHeight = function() {
        var height = $window.innerHeight - 145;
        return {
            height: height + "px"
        }
    }
}), ovModule.controller("loginCtrl", function($rootScope, $scope, $cordovaFileTransfer, $cordovaInAppBrowser, $cordovaOauth, $cordovaNetwork, $location, Analytics, API, DB, Debug, File, Model, ParseFactory, UI) {
    $scope.tagQuery = "", $scope.$parent.syncToCloud(), $scope.tagFilter = function(query) {
        return function(item) {
            return "undefined" != typeof query ? -1 !== item.tagName.toLowerCase().indexOf(query.toLowerCase()) : !0
        }
    };
    var loginSuccess = function(user) {
            console.log("Login succeeded"), Analytics.track("Login", {
                user: "" + angular.fromJson(user),
                uuid: "" + uuidIs,
                platform: "" + platformIs
            }), $scope.$parent.meta.user = angular.fromJson(user), null !== $scope.$parent.meta.user_email && $scope.$parent.meta.user_email !== $scope.$parent.meta.user.get("email") && (console.log("DROP_DB: found different email"), DB.drop(function() {
                DB.create()
            })), $location.url("home"), isDevice && $scope.$parent.cacheProfileImage(), Model.save($scope.$parent.meta.user.get("email"), "user_email"), $scope.$parent.syncToCloud(), UI.toast("LOGIN_SUCCESS", "short", "bottom")
        },
        loginFailure = function() {
            UI.toast("LOGIN_FAILED", "short", "bottom")
        };
    $scope.loginData = {
        username: "",
        password: "",
        name: ""
    }, $scope.register = function() {
        if (0 === $scope.loginData.name.length) return $scope.showNameField = !0, UI.toast("NAME_REQUIRED", "short", "bottom"), !1;
        if (console.log("proceeded?"), console.log("$scope.loginData - " + angular.toJson($scope.loginData)), $scope.loginData.username.length > 4 && $scope.loginData.password.length > 4 && $scope.loginData.name.length > 2) {
            var hash = CryptoJS.MD5($scope.loginData.username),
                gravatarUrl = "http://www.gravatar.com/avatar/" + hash + "?d=mm&s=400";
            console.log("before signup"), ParseFactory.signUp({
                email: $scope.loginData.username,
                password: $scope.loginData.password,
                name: $scope.loginData.name,
                provider: "direct",
                picture: gravatarUrl
            }, $scope.$parent.meta.app, function(user) {
                loginSuccess(user)
            }, function(error) {
                console.log("register:error - " + angular.toJson(error)), loginFailure()
            })
        } else UI.toast("USERNAME_PASSWORD_REQUIRED", "short", "bottom")
    }, $scope.login = function(provider) {
        $scope.showNameField = !1, isDevice ? $cordovaNetwork.isOnline() ? "google" === provider ? $cordovaOauth.google($scope.$parent.meta.app.gauth, ["https://www.googleapis.com/auth/userinfo.email"]).then(function(result) {
            console.log("SUCCESS: " + angular.toJson(result)), API.call({
                url: "https://www.googleapis.com/oauth2/v1/userinfo",
                data: {
                    access_token: result.access_token
                },
                success: function(value) {
                    ParseFactory.signUp({
                        email: value.email,
                        picture: value.picture,
                        name: value.name,
                        provider: "google"
                    }, $scope.$parent.meta.app, function(user) {
                        loginSuccess(user)
                    }, function() {
                        loginFailure()
                    })
                }
            })
        }, function(error) {
            console.log(error)
        }) : "facebook" === provider ? facebookConnectPlugin.login(["email"], function(result) {
            console.log("facebook login success: " + angular.toJson(result)), "connected" === result.status && API.call({
                url: "https://graph.facebook.com/me",
                data: {
                    access_token: result.authResponse.accessToken,
                    fields: "id,email,picture.height(1024),name"
                },
                success: function(value) {
                    console.log("FB: picture url - " + value.picture.data.url), ParseFactory.signUp({
                        email: value.email,
                        picture: value.picture.data.url,
                        name: value.name,
                        provider: "facebook"
                    }, $scope.$parent.meta.app, function(user) {
                        loginSuccess(user)
                    }, function() {
                        loginFailure()
                    })
                }
            })
        }, function(error) {
            console.log("facebook login failed: " + angular.toJson(error)), UI.toast("LOGIN_FAILED", "short", "bottom")
        }) : $scope.loginData.username.length > 0 && $scope.loginData.password.length > 0 ? Parse.User.logIn($scope.loginData.username, $scope.loginData.password, {
            success: function(user) {
                loginSuccess(user)
            },
            error: function(user, error) {
                loginFailure(), console.log("login:error - " + angular.toJson(error))
            }
        }) : UI.toast("USERNAME_PASSWORD_REQUIRED", "short", "bottom") : UI.toast("YOU_ARE_OFFLINE", "short", "bottom") : $scope.$parent.meta.user = new Field
    }, $scope.logout = function() {
        Parse.User.logOut(), $scope.$parent.meta.user = Parse.User.current(), UI.toast("LOGOUT_SUCCESS", "short", "bottom")
    }, $scope.reset = function() {
        $scope.loginData.username.length > 0 ? $cordovaNetwork.isOnline() ? Parse.User.requestPasswordReset($scope.loginData.username, {
            success: function() {
                UI.toast("PASSWORD_RESET_SENT", "short", "bottom"), $location.url("home")
            },
            error: function(error) {
                console.log("Error: " + error.code + " " + error.message)
            }
        }) : UI.toast("YOU_ARE_OFFLINE", "short", "bottom") : UI.toast("USERNAME_REQUIRED", "short", "bottom")
    }, $scope.closeLogin = function() {
        $location.url("home")
    }, $scope.allTags = [];
    var getAllTags = function() {
        if (isDevice) {
            var db = DB.open("oneverse");
            DB.select(db, "tag", "*", "WHERE isDeleted = 'false'", function(result) {
                $scope.allTags = result
            })
        } else $scope.allTags = angular.fromJson(Debug.allTags())
    };
    getAllTags(), $scope.unsyncedCount = 0;
    var getUnsynced = function() {
        if (isDevice) {
            var db = DB.open("oneverse");
            DB.select(db, "tag", "*", "WHERE syncID is NULL and isDeleted = 'false'", function(result) {
                console.log("found unsynced #1: " + angular.toJson(result)), $scope.$apply(function() {
                    $scope.unsyncedCount += result.length
                }), console.log("unsyncedCount #1: " + $scope.unsyncedCount)
            }), DB.select(db, "tagVerse", "*", "WHERE syncID is NULL and isDeleted = 'false'", function(result) {
                $scope.$apply(function() {
                    $scope.unsyncedCount += result.length
                }), console.log("found unsynced #2: " + angular.toJson(result)), console.log("unsyncedCount #2: " + $scope.unsyncedCount)
            })
        } else $scope.unsyncedCount = 10
    };
    getUnsynced(), $scope.checkToSyncToCloud = function() {
        $scope.meta.user && $rootScope.userProfile.isPro ? ($scope.$parent.syncToCloud(), UI.toast("SYNC_IN_PROGRESS", "short", "bottom"), $location.url("home")) : UI.toast("PRO_EXPIRED_OR_NOT_LOGGED_IN", "short", "bottom")
    }, $scope.terms = function() {
        $cordovaInAppBrowser.open($scope.$parent.meta.app.terms, "_blank")
    }
}), ovModule.controller("shareCtrl", function($ionicScrollDelegate, $filter, $location, $rootScope, $scope, $timeout, $translate, DB, Model, ParseFactory, Share, UI) {
    $scope.selectedBibleVerses = [], $scope.selectedVerses = [], angular.forEach($scope.$parent.bibles, function(val) {
        val.version === $rootScope.bibleVersion && ($scope.selectedBibleVerses = val.verses, $timeout(function() {
            var elem = document.getElementById("bible-share-" + ($rootScope.currentVerse + 1));
            $ionicScrollDelegate.$getByHandle("bible-share-handle").scrollTo(0, elem.offsetTop, [!0])
        }))
    }), angular.forEach($scope.selectedBibleVerses, function(val) {
        val.v === $rootScope.currentVerse + 1 && ($scope.selectedVerses = [val.id])
    }), $scope.closeShare = function() {
        $location.url("home")
    }, $scope.shareVerse = function() {
        $scope.selectedVerses.length > 0 && UI.actionSheet("SHARE", "CANCEL", [{
            text: $translate.instant("SHARE_COPY_TO_CLIPBOARD") + "<span class='icon ion-clipboard'></span>"
        }, {
            text: $translate.instant("SHARE_VIA_ANY_APP") + "<span class='icon ion-android-apps'></span>"
        }], function(index) {
            var messageToShare = "",
                bibleVersionName = $scope.$parent.meta.supportedVersionsMeta[$rootScope.bibleVersion].bibleName,
                bibleVersionSupported = $scope.$parent.meta.supportedVersionsMeta[$rootScope.bibleVersion].supported;
            bibleVersionName = bibleVersionSupported ? " ** " + bibleVersionName : "";
            var headerToShare = "\n\nOne Verse " + $translate.instant("BIBLE") + bibleVersionName;
            console.log("$scope.$parent.meta.supportedVersionsMeta: " + angular.toJson($scope.$parent.meta.supportedVersionsMeta));
            var db = DB.open($rootScope.bibleVersion);
            0 === index || 1 === index ? DB.select(db, "t_" + $rootScope.bibleVersion, "b,c,v,t", "WHERE id in (" + $scope.selectedVerses.join(",") + ") ORDER BY id", function(result) {
                angular.forEach(result, function(val, key) {
                    var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                    0 === key && (messageToShare += "(" + $translate.instant("BOOK_" + bookNumber) + " " + val.c + ":", messageToShare += val.v, messageToShare += 1 == result.length ? ")" : "~" + result[result.length - 1].v + ")", messageToShare += "\n"), messageToShare += val.v + " " + val.t + " \n"
                }), 0 === index ? Share.toClipboard(messageToShare + headerToShare, $scope.$parent.meta.app.website2, function() {
                    $location.url("home")
                }, function() {
                    $location.url("home")
                }) : 1 === index && Share.toApp(messageToShare, headerToShare, $scope.$parent.meta.app.website2, $scope.$parent.meta.app.hashtags, function() {
                    $location.url("home"), UI.toast("SHARE_SUCCESSFULLY_SHARED", "short", "center")
                }, function() {
                    UI.toast("SHARE_FAILED_SHARE", "short", "center"), $location.url("home")
                })
            }) : 2 === index ? DB.select(db, "t_" + $rootScope.bibleVersion, "b,c,v,t", "WHERE id in (" + $scope.selectedVerses.join(",") + ") ORDER BY id", function(result) {
                angular.forEach(result, function(val) {
                    var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                    messageToShare += "[" + $translate.instant("BOOK_" + bookNumber) + " " + val.c + ":" + val.v + "] " + val.t
                }), Share.toFacebook(messageToShare, headerToShare, function() {
                    $location.url("home"), ParseFactory.extendPro(1, function(expiresAt) {
                        console.log("Check whether extended: " + expiresAt), $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt), Model.save($rootScope.userProfile, "userprofile"), UI.toast($rootScope.userProfile.expiresAt + " " + $translate.instant($filter("daysLeftLabel")($rootScope.userProfile.expiresAt)), "short", "bottom")
                    }, function() {
                        UI.toast("SHARE_FAILED_SHARE", "short", "center")
                    })
                }, function() {
                    UI.toast("SHARE_FAILED_SHARE", "short", "center")
                })
            }) : UI.toast("MSG_CHOOSE_AT_LEAST_ONE_VERSE", "short", "buttom")
        })
    }
}), ovModule.controller("tagCtrl", function($location, $rootScope, $scope, Analytics, DB, Debug, Model, UI) {
    $scope.closeTag = function() {
        $location.url("home")
    }, $scope.tags = [], $rootScope.tagName = "", $rootScope.tagNote = "", $rootScope.tagQuery == $rootScope.currentId && ($scope.tags = angular.copy($rootScope.tags)), $scope.allTags = [];
    var getAllTags = function() {
        if (isDevice) {
            var db = DB.open("oneverse");
            DB.select(db, "Tag", "*", "WHERE isDeleted = 'false'", function(result) {
                $scope.allTags = result
            })
        } else $scope.allTags = angular.fromJson(Debug.allTags())
    };
    getAllTags(), $scope.addFromExisting = function(tag) {
        var allTagNames = $scope.tags.map(function(obj) {
            return obj.tagName
        }); - 1 === allTagNames.indexOf(tag.tagName) && ($scope.tags.push(tag), $rootScope.tagName = "", $rootScope.tagNote = "")
    }, $scope.generateTag = function(tagName, tagNote) {
        if (tagName = angular.lowercase(tagName), Analytics.track("TagAdded", {
                tagName: tagName,
                tagNote: tagNote,
                uuid: uuidIs,
                platform: platformIs
            }), tagName.length > 1 && tagName.length <= 20) {
            var allTagNames = [];
            angular.forEach($scope.tags, function(val) {
                allTagNames.push(val.tagName)
            }), -1 === allTagNames.indexOf(tagName) ? $scope.tags.push({
                tagName: tagName,
                tagNote: tagNote
            }) : UI.toast("TAG_DUPLICATE_FOUND", "short", "bottom")
        } else UI.toast("TAG_TOO_LONG_OR_SHORT", "short", "bottom");
        $rootScope.tagName = "", $rootScope.tagNote = ""
    }, $scope.markForDeletion = [], $scope.deleteTag = function(index) {
        $scope.tags[index].hasOwnProperty("id") && $scope.markForDeletion.push($scope.tags[index]), $scope.tags.splice(index, 1)
    }, $scope.tagFilter = function(query) {
        return function(item) {
            return "undefined" != typeof query ? -1 !== item.tagName.toLowerCase().indexOf(query.toLowerCase()) : !0
        }
    }, $scope.tagsFilter = function() {
        return function(item) {
            var foundTag = !0;
            return angular.forEach($scope.tags, function(tag) {
                tag.tagName.toLowerCase() == item.tagName.toLowerCase() && (foundTag = !1)
            }), foundTag
        }
    }
}), ovModule.controller("tagsCtrl", function($location, $scope, DB, Debug) {
    $scope.tagQuery = "";
    $scope.closeTags = function() {
        $location.url("home")
    }, $scope.allTags = [];
    var getAllTags = function() {
        if (isDevice) {
            var db = DB.open("oneverse");
            DB.select(db, "Tag", "*", "WHERE isDeleted = 'false'", function(result) {
                $scope.allTags = result
            })
        } else $scope.allTags = angular.fromJson(Debug.allTags())
    };
    getAllTags(), $scope.tagFilter = function(query) {
        return function(item) {
            return "undefined" != typeof query ? -1 !== item.tagName.toLowerCase().indexOf(query.toLowerCase()) : !0
        }
    }
}), ovModule.controller("tagverseCtrl", function($filter, $ionicPopover, $ionicPopup, $location, $rootScope, $scope, $stateParams, $timeout, $translate, DB, UI) {
    var tagId = $stateParams.tagId;
    console.log("tagId: " + tagId), $scope.showReorder = !1, $scope.tagCheckbox = !1;
    var loadVerses = function() {
        console.log("loadVerses called");
        var db = DB.open("oneverse");
        DB.select(db, "tag", "*", "WHERE id = '" + tagId + "' AND isDeleted = 'false'", function(resultOne) {
            console.log("resultOne: " + angular.toJson(resultOne)), $scope.tag = resultOne[0], $scope.tagCheckbox = -1 !== $scope.$parent.meta.memoryVerses.indexOf($scope.tag.id), DB.select(db, "tagVerse", "*", "WHERE tagId = '" + tagId + "' AND isDeleted = 'false' ORDER BY id DESC", function(result) {
                var bibleIds = result.map(function(obj) {
                        return obj.bibleId
                    }).join(","),
                    bibleVersion = $rootScope.bibleVersion,
                    versionDB = DB.open(bibleVersion);
                DB.select(versionDB, "t_" + bibleVersion, "id, b, c, v, t", "WHERE id in (" + bibleIds + ")", function(result2) {
                    console.log("SQL: found verses - " + angular.toJson(result2)), $scope.$$phase ? $scope.tagverses = result2 : $scope.$apply(function() {
                        $scope.tagverses = result2
                    })
                })
            })
        })
    };
    $scope.toggleNoti = function(tagId, checkbox) {
        console.log("tagId - " + tagId + " checkbox - " + checkbox);
        var findIndex = $scope.$parent.meta.memoryVerses.indexOf(tagId); - 1 == findIndex ? $scope.$parent.meta.memoryVerses.push(tagId) : $scope.$parent.meta.memoryVerses.splice(findIndex, 1), console.log("$scope.$parent.meta.memoryVerses - " + $scope.$parent.meta.memoryVerses)
    }, $ionicPopover.fromTemplateUrl("templates/modules/popover-tagverse.html", {
        scope: $scope
    }).then(function(popover) {
        $scope.popover = popover
    }), isDevice ? loadVerses() : ($scope.tag = {
        tagName: "Navigator Memory Verses 50",
        id: "2842322"
    }, $scope.tagverses = [{
        id: 43001003,
        b: 43,
        c: 1,
        v: 3,
        t: "만물이 그로 말미암아 지은 바 되었으니 지은 것이 하나도 그가 없이는 된 것이 없느니라\r\n"
    }, {
        id: 43001009,
        b: 43,
        c: 1,
        v: 9,
        t: "참 빛 곧 세상에서 각 사람에게 비추는 빛이 있었나니\r\n"
    }]), $scope.toggleReorder = function() {
        $scope.showReorder = !$scope.showReorder
    }, $scope.closeTagVerse = function() {
        $location.url("home")
    }, $scope.printTag = function() {
        if ($scope.popover.hide(), $rootScope.userProfile.isPro || $rootScope.userProfile.isProPurchased) {
            var page = "<h2 style='text-align: center;'>" + $scope.tag.tagName + "(" + $scope.tagverses.length + ")</h2>";
            page += "<div style='text-align: right'>" + new Date + "</div><br><br>", angular.forEach($scope.tagverses, function(verse) {
                page += "<div>", page += "<h4 style='display: inline;'>" + $translate.instant($filter("getBookName")(verse.b)) + " " + verse.c + ":" + verse.v + "</h4>&nbsp;&nbsp;", page += verse.t, page += "</div>"
            }), page += "<br><br><h6 style='text-align: center'>" + $translate.instant("ONE_VERSE") + " " + $translate.instant("BIBLE") + " - http://www.onever.se</h6>", cordova.plugins.printer.isAvailable(function(isAvailable) {
                isAvailable ? cordova.plugins.printer.print(page, "Document.html", function() {
                    UI.toast("DONE", "short", "bottom")
                }) : UI.toast("NOT_SUPPORTED", "short", "bottom")
            })
        } else $scope.$parent.purchaseOrShare()
    }, $scope.deleteTag = function() {
        $scope.popover.hide(), UI.confirm("ALERT", "templates/modules/confirm-delete-tag.html", "OK", $scope, function() {
            if (isDevice) {
                var db = DB.open("oneverse");
                DB.update(db, "tagVerse", "isDeleted = 'true'", "tagId = '" + tagId + "'", function() {}), DB.update(db, "tag", "isDeleted = 'true'", "id = '" + tagId + "'", function() {})
            }
            $location.url("home")
        })
    }, $scope.editTag = function() {
        $scope.popover.hide(), $rootScope.tagNameClone = angular.copy($scope.tag.tagName);
        var editTagPopup = $ionicPopup.show({
            template: '<input type="text" ng-model="$root.tagNameClone">',
            title: $translate.instant("EDIT"),
            cssClass: "oneverse-popup",
            scope: $scope,
            buttons: [{
                text: $translate.instant("CANCEL"),
                onTap: function() {
                    return !1
                }
            }, {
                text: "<b>" + $translate.instant("SUBMIT") + "</b>",
                type: "button-calm",
                onTap: function() {
                    return !0
                }
            }]
        });
        editTagPopup.then(function(res) {
            if (res) {
                var db = DB.open("oneverse");
                if (console.log("$rootScope.tagNameClone: " + $rootScope.tagNameClone), $rootScope.tagNameClone = angular.lowercase($rootScope.tagNameClone.trim()), !($rootScope.tagNameClone.length > 1 && $rootScope.tagNameClone.length <= 20)) return UI.toast("TAG_TOO_LONG_OR_SHORT", "short", "bottom"), !1;
                DB.update(db, "tag", "tagName = '" + $rootScope.tagNameClone + "', syncedAt = NULL", "id = '" + tagId + "'", function(resTag) {
                    console.log(angular.toJson(resTag)), 1 === resTag.rowsAffected && (console.log("updated completed"), $scope.tag.tagName = angular.copy($rootScope.tagNameClone))
                })
            }
        })
    }, $scope.deleteVerse = function(verse, idx) {
        UI.confirm("ALERT", "templates/modules/confirm-delete-verse.html", "OK", $scope, function() {
            console.log("trying to delete : " + angular.toJson(verse));
            var db = DB.open("oneverse");
            DB.update(db, "tagVerse", "isDeleted = 'true'", "tagId = '" + tagId + "' AND bibleId = '" + verse.id + "'", function(resVerse) {
                console.log("SQL: updated - " + angular.toJson(resVerse)), DB.select(db, "tagVerse", "*", "WHERE tagId = '" + tagId + "' AND isDeleted = 'false'", function() {
                    console.log("SQL : if there's no verses attached, then should delete the tag"), 0 === resVerse.length ? (console.log("no result found, so deleting tag"), DB.update(db, "tag", "isDeleted = 'true'", "id = '" + tagId + "'", function(resUpdate) {
                        console.log("deleted tag : " + angular.toJson(resUpdate)), 1 === resUpdate.rowsAffected && (console.log("change to home"), $timeout(function() {
                            $location.url("home")
                        }))
                    })) : (console.log("$scope.tagverses - " + angular.toJson($scope.tagverses)), console.log("idx - " + idx), $scope.$$phase ? $scope.tagverses.splice(idx, 1) : $scope.$apply(function() {
                        $scope.tagverses.splice(idx, 1)
                    }), console.log("after splice: " + angular.toJson($scope.tagverses)))
                })
            })
        })
    }, $scope.goToVerse = function(b, c, v) {
        $scope.$parent.goTo(b, c, v), $location.url("home")
    }
});