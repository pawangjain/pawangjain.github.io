function Field() {
    this.get = function (attr) {
        return "picture" === attr ? "https://lh3.googleusercontent.com/-vFpM2A5N2Wg/AAAAAAAAAAI/AAAAAAAABh8/cRg-oqAL8mQ/s120-c/photo.jpg" : "name" === attr ? "Young Park" : "createdAt" === attr ? new Date : ""
    }
}


var ovModule = angular.module("oneverse", ["ionic", "pascalprecht.translate", "door3.css", "ksSwiper", "ngCordova", "ngStorage", "ngIOS9UIWebViewPatch", "checklist-model", "parse-angular", "parse-angular.enhance", "angular.filter", "truncate"]),
    isDevice = ionic.Platform.isIOS() || ionic.Platform.isAndroid(),
    isIOS = ionic.Platform.isIOS(),
    isTablet = !1,
    platformIs = isIOS ? "ios" : "android",
    uuidIs = null,
    deviceLanguage = null,
    bypassIds = [];

    //isDevice && (console.log = function () {
    //});

    Array.min = function (array) {
        return Math.min.apply(Math, array)
    };
    Array.max = function (array) {
        return Math.max.apply(Math, array)
    };

    ovModule.config(function ($stateProvider, $urlRouterProvider, $httpProvider, $ionicConfigProvider) {
    $httpProvider.defaults.useXDomain = !0, delete $httpProvider.defaults.headers.common["X-Requested-With"], $ionicConfigProvider.views.transition("none"), $ionicConfigProvider.views.forwardCache(!0), $stateProvider
        .state("home", {
            url: "/",
            templateUrl: "templates/home.html",
            controller: "homeCtrl"
        })
        .state("books", {
            url: "/books",
            templateUrl: "templates/books.html",
            controller: "booksCtrl"
        })
        .state("share", {
            url: "/share",
            templateUrl: "templates/share.html",
            controller: "shareCtrl"
        })
        .state("tag", {
            url: "/tag",
            templateUrl: "templates/tag.html",
            controller: "tagCtrl"
        })
        .state("tags", {
            url: "/tags",
            templateUrl: "templates/tags.html",
            controller: "tagsCtrl"
        })
        .state("tagverse", {
            url: "/tagverse/:tagId",
            templateUrl: "templates/tagverse.html",
            controller: "tagverseCtrl"
        })
        .state("compareall", {
            url: "/compareall",
            templateUrl: "templates/compareall.html",
            controller: "compareAllCtrl"
        })
        .state("after-update", {
            url: "/after-update",
            templateUrl: "templates/after-update.html"
        }), $urlRouterProvider.otherwise("/")
});

    ovModule.run(function ($ionicPlatform, Analytics, Config, ParseFactory) {
        window.onerror = function (msg, url, line, col, error) {
            var extra = col ? "\ncolumn: " + col : "";
            extra += error ? "\nerror: " + error : "";
            var errorMessage = "Error: " + msg + "\nurl: " + url + "\nline: " + line + extra;
            console.log(errorMessage);
            var suppressErrorAlert = !0;
            return suppressErrorAlert
        };
        $ionicPlatform.ready(function () {
            debugger;
            window.cordova && window.cordova.plugins.Keyboard && cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0);
            window.StatusBar && StatusBar.styleDefault();
            isTablet = true;//window.isTablet;
            !isTablet && isDevice && screen.lockOrientation("portrait");
            console.log("isTablet : " + isTablet);
            Config.getUUID(function (uuid) {
                uuidIs = uuid
            });
            ParseFactory.start();
            //var notificationOpenedCallback = function (jsonData) {
            //    console.log("didReceiveRemoteNotificationCallBack: " + JSON.stringify(jsonData))
            //};
            //isDevice && window.plugins.OneSignal.init("3947cb74-7420-11e5-aebe-23e2dbae46f3", {
            //    googleProjectNumber: "325321612936"
            //}, notificationOpenedCallback)
        })
    });

    ovModule.config(function ($translateProvider) {
    $translateProvider.translations("en", {
        ADV_SEARCH_TOUCH: "Touch for advanced search",
        ADV_SEARCH_RESET: "Reset advanced search",
        AFTER_PURCHASE: "After purchase, touch the download icon to download the purchased version",
        AGREE_TERMS: "By signing up you agree to the Terms of Service and Privacy Policy",
        ALERT: "Alert",
        ALL_TAGS: "All tags",
        ALL_TAGS_HELP: "or choose from existing",
        ALL_TESTAMENT: "Search all books",
        ALL_VERSE_VIEW: "All Verse View",
        ALL_VERSE_VIEW_DESC: "To read faster, grasp the contents",
        AND: "And",
        ANONYMOUS: "Anonymous",
        APP_NAME: "One Verse",
        APP_SETTINGS: "App Settings",
        ARE_YOU_SURE: "Are you sure?",
        ARE_YOU_SURE_TO_DELETE: "Are you sure you want to delete?",
        ARE_YOU_SURE_TO_DELETE_TAG: "Are you sure you want to delete this Tag?",
        ARE_YOU_SURE_TO_DOWNLOAD: "Are you sure to download {{value}}?",
        ARE_YOU_SURE_TO_PURCHASE: "Are you sure to purchase {{value}}?",
        BACK: "Back",
        BIBLE: "Bible",
        BIBLE_SEARCH_HELP: "Enter book name (Abbr: Ecclesiastes -> Eccl)",
        BIBLE_VERSIONS: "Bible Versions",
        BOOKS: "Books",
        CANCEL: "Cancel",
        CANCELLED: "Cancelled",
        CHANGE_THEME: "Change Theme",
        CHANGE_VERSE: "Change verse",
        CHINESE: "Chinese",
        CLOSE: "Close",
        CHOOSE_UPTO_FOUR: "Limiting to choose upto four versions is to prevent slowing down when loading data.",
        COMPARE_ALL_HELP: "Download more versions to compare more!",
        COMPARE_ALL_VERSIONS: "Compare all versions",
        CROSS_REFERENCE: "Cross reference",
        CURRENT_TAGS: "Tags in current verse",
        DAY_LEFT: "day left",
        DAYS_LEFT: "days left",
        DELETE: "Delete",
        DEVELOPER: "Developer",
        DID_YOU_RATE: "Did you finish rating?",
        DID_YOU_SHARE: "Did you finish sharing?",
        DISPLAY: "Display",
        DISPLAY_SETTINGS: "Display settings",
        DONE: "Done",
        DONE_DOWNLOADING: "Download completed!",
        EDIT: "Edit",
        EMAIL: "Email",
        EMAIL_DESC: "Your email address",
        ENGLISH: "English",
        ENTER_SECRET: "Enter access key",
        FACEBOOK: "Facebook",
        FONT: "Font",
        FONT_SANS_SERIF: "Sans Serif",
        FONT_SERIF: "Serif",
        FONT_SIZE: "Font size",
        FREE: "Free",
        FREE_EXPIRED: "Your trial period for Pro Version has expired. You will be using as Free Version.",
        FREE_TRIAL: "You can use One Verse Bible as Pro version for {{value}} day(s). After {{value}} day(s), you will be using as Free Version.",
        FRENCH: "French",
        GET_PRO: "Upgrade to PRO",
        GET_MORE_THEMES: "Get more themes",
        GOOGLE: "Google",
        GOT_IT: "Got it",
        GUESS_BIBLE_VERSE: "Guess the Bible Verse?",
        HELP: "Help",
        HISTORY: "History",
        IF_YOU_LIKE_THE_APP: "If you like the app, purchase the Pro version by buying us a cup of coffee. With the fund we raise, we can spend more time to make the better Bible app!",
        INFO: "Info",
        INIT_DOWNLOAD_INSTRUCTION: "About to download initial data (= 5MB). This may consume your data usage. Do you want to proceed?",
        INIT_DOWNLOAD: "Yes, download",
        INITIALIZING_PURCHASE: "Initializing purchase",
        INTRO_ONE_TITLE: "Slide up or down to navigate verses",
        INTRO_TWO_TITLE: "Select and compare with other bible versions for better understanding",
        INTRO_THREE_TITLE: "Make tags to categorize bible verses",
        INTRO_FOUR_TITLE: "Change display settings for better readability",
        INTRO_FIVE_TITLE: "Choose how you want to view verses.",
        INTRO_SIX_TITLE: "Sign up and become a member of One Verse Bible to backup your tags and reading activities.",
        INTRO_SEVEN_TITLE: "Touch the star button to save as your favorite (or make tags). Turn on notification for your saved verses and One Verse Bible will notify you three times a day to train you memorize the Bible verses!",
        IS_THIS_RIGHT_LANGUAGE: "Is this the main language you use?",
        JOHN_1_1: "In the beginning was the Word, and the Word was with God, and the Word was God (John 1:1)",
        KEYWORD_SEARCH_HELP: "Enter Keyword",
        KEYWORD_TOO_SHORT: "Keyword is too short",
        KOREAN: "Korean",
        LANGUAGE: "Language",
        LOADING: "Loading",
        LOGIN: "Log In",
        LOGIN_BENEFIT: "Once you login, all meta data including Tags will be synced to the Cloud (only for Pro version). If you do not login, you data will be remain on your device only. If you want to use same data among all the devices you have, we recommend you to login.",
        LOGIN_OR_SIGN_UP: "Log In / Sign Up",
        LOGIN_REQUIRED_FEATURE: "To use this feature, please log in/register",
        LOGIN_TO_BACKUP_TAGS: "To backup your tags to One Verse Cloud, please log in/register after your purchase",
        LOGIN_TO_USE_CLOUD: "Log in to back up your data to One Verse Cloud",
        LOGIN_FAILED: "Log in failed. Maybe you forgot password?",
        LOGIN_SUCCESS: "Log in succeeded",
        LOGIN_WITH_FACEBOOK: "Login with Facebook",
        LOGOUT: "Logout",
        LOGOUT_SUCCESS: "Logout succeeded",
        MORE: "More",
        MSG_END_OF_CHAPTER: "Reached end of chapter",
        MSG_END_OF_CHAPTER_NEXT_BOOK: "Reached end of this book, reading next book",
        MSG_END_OF_VERSE: "Reached end of verses",
        MSG_FIRST_CHAPTER: "No previous chapter found",
        MSG_CHOOSE_AT_LEAST_ONE_VERSION: "Please choose at least one bible version.",
        MSG_CHOOSE_AT_LEAST_ONE_VERSE: "Please choose at least one verse to share.",
        MSG_VERSIONS_ALLOWED: "Maximum of four bible versions are allowed. Choose from one to four versions.",
        MSG_CLIPBOARD_SUCCESS: "Copied to clipboard",
        MSG_CLIPBOARD_ERROR: "Failed copying to clipboard",
        MSG_RESTART: "There was an important update. Please close the app and restart ;-)",
        MSG_SLIDE_LEFT_RIGHT_CHANGE: "Slide left/right to change background",
        MSG_TAKE_SCREENSHOT: "Take screenshot in 10 seconds and share",
        NAME: "Name",
        NAME_DESC: "Your name",
        NAME_REQUIRED: "Name is required for registration",
        NEW_TESTAMENT: "New Testament",
        NEW_VERSION_AVAILABLE: "New version is available on the store. Please update to the latest version for better experience.",
        NEXT: "Next",
        NEXT_CHAPTER: "Next chapter",
        NO_RESULTS_FOUND: "No results found.",
        NO_TAGS_FOUND: "No tags found",
        NO_THANKS: "No, thanks",
        NOT: "Not",
        NOT_SUPPORTED: "Your device is not supported",
        NOT_SUPPORTED_VERSION: "This version is not yet supported.",
        NOTE: "Note",
        NOTI_SCHEDULED: "Notification scheduled",
        OK: "OK",
        OLD_TESTAMENT: "Old Testament",
        ONE_VERSE: "One Verse",
        ONE_VERSE_CLOUD: "One Verse Cloud",
        ONE_VERSE_VIEW: "One Verse View",
        ONE_VERSE_VIEW_DESC: "For in depth reading to focus better",
        OOPS: "Oops, try again",
        OR: "Or",
        OUTDATED: "Found data out of sync. Sync will be automatically performed when launching the app.",
        PASSWORD: "Password",
        PASSWORD_DESC: "Your secure password",
        PASSWORD_RESET_SENT: "Link to reset password has been sent to your email address",
        PLEASE_GET_ONLINE: "Please get online first",
        PLEASE_WAIT_DOWNLOADING: "Please wait while downloading data",
        PLEASE_SELECT_AT_LEAST_ONE: "Please select at least one",
        PREVIOUS: "Previous",
        PREVIOUS_CHAPTER: "Previous chapter",
        PRINT: "Print",
        PRO: "PRO",
        PRO_EXPIRED: "Free Version",
        PRO_EXPIRED_OR_NOT_LOGGED_IN: "Pro expired or not logged in. Please purchase to upgrade to Pro version or share verse to extend 1 day!",
        PRO_VERSION: "PRO Version",
        PURCHASE: "Purchase",
        PURCHASE_OR_SHARE: "Touch here to purchase app to use unlimited PRO features",
        RATE_FAILED: "Failed to rate.",
        RATE_NOW: "Okay, rate now",
        RATE_TO_EXTEND: "Like our app? Rate us 5 stars with reviews and extend 10 days of Pro version",
        REGISTER: "Register",
        REORDER: "Reorder",
        RESET_PASSWORD: "Reset password",
        RESTORE_PURCHASE: "Restore purchase",
        SAY: "Say",
        SAVE: "Save",
        SAVED: "Saved",
        SEARCH: "Search",
        SETTINGS: "Settings",
        SELECT_VERSIONS: "Select Bible Versions",
        SELECT_VERSIONS_HELP: "Touch here to change or add the Bible versions",
        SEND_NOTIFICATION_3_TIMES: "Use daily notification (morning, noon, evening)",
        SHARE: "Share",
        SHARE_VERSE: "Share, copy, or screenshot",
        SHARE_COPY_TO_CLIPBOARD: "Copy to Clipboard",
        SHARE_FRIENDLY_HEADER: "One Verse Bible App",
        SHARE_FRIENDLY_MSG: "Hi, I am using One Verse Bible to read Bible everyday. Check it out!",
        SHARE_FAILED_SHARE: "Failed to share. Please try again.",
        SHARE_LIMIT_REACHED: "Share limit reached.",
        SHARE_MSG_LONG: "Hey, start reading the Bible and know who Jesus Christ is! Read John 3:16 using the One Verse Bible app!",
        SHARE_MSG_SHORT: "Hey, start reading the Bible and know who Jesus is!",
        SHARE_SUCCESSFULLY_SHARED: "Successfully shared!",
        SHARE_TO_FACEBOOK_TO_EXTEND: "Share via Facebook to extend 1 day",
        SHARE_TO_EXTEND: "Touch here to share to SNS to extend more days for Pro Version",
        SHARE_TO_EXTEND_DAYS: "Share to extend Pro Version for {{value}} day(s)",
        SHARE_VIA_ANY_APP: "Share via any Apps",
        SHOW_ALL_VERSES: "List View",
        SHOW_TAGS_NEXT_TO_VERSE: "Show tags next to verse",
        SIDE_BY_SIDE_VIEW: "Side by Side View",
        SIDE_BY_SIDE_VIEW_DESC: "To compare easily for better understanding",
        SKIP: "Skip",
        SKIP_DESC: "You can always login or sign up later",
        SOON_SUPPORTED: "Soon",
        SOMETHING_WRONG: "Something is technically wrong. Are you offline?",
        SPANISH: "Spanish",
        STARRED: "Added to favorite",
        SUBMIT: "Submit",
        SUGGESTED: "Suggested",
        SWIPE_LEFT_FOR_MORE_ACTIONS: "Swipe left on each verse for more actions",
        SWIPE_TO_CHANGE: "Swipe to change",
        SWIPE_TOP_TO_NAVIGATE: "Touch here to navigate between verses",
        SYNC_IN_PROGRESS: "Sync in progress",
        SYNC_TO_CLOUD: "Sync to cloud",
        TAG_ADD: "Add tag",
        TAG_AT_LEAST_ONE_REQUIRED: "At least one tag is required. If you have entered, please press enter key to confirm.",
        TAG_DUPLICATE_FOUND: "The tag you have entered already exists",
        TAG_ENTER_HELP: "Enter tag name and press enter",
        TAG_OR_FAVORITE: "Tag / Favorite",
        TAG_NAME: "Enter tag name",
        TAG_TOO_LONG_OR_SHORT: "Tag name too short or long",
        TAGS: "Tags",
        TAGS_OTHERS: "Others Tags",
        TAKE_TO_TUTORIAL: "Take me to tutorial",
        THANK_YOU_PURCHASE: "Thank you for your purchase",
        THEME: "Theme",
        TOUCH_TO_VIEW_PROFILE: "View profile",
        TRY_AGAIN: "Try again",
        TRY_AGAIN_COULDNT_FIND: "Could not find. Please try again.",
        TWITTER: "Twitter",
        VERSE_DETAIL: "Perform action on Verse",
        VERSION: "Version",
        VIEW_ALL_TAGS: "View All Tags",
        UPGRADE_PRO_MSG: "Support the developer by upgrading to PRO version! With PRO version you will be able to use all features with no limit and save your data safely on One Verse Cloud!",
        UPDATE: "Update",
        USERNAME_REQUIRED: "Enter your email address and touch again to reset",
        USERNAME_PASSWORD_REQUIRED: "Email/password is required",
        WARNING: "Warning",
        WHY_LANGUAGE_MATTERS: "This does not mean you are reading only the Bible in this language. This language selection is to show interface in your main language. We will add more languages as we update One Verse Bible.",
        YOU_ARE_OFFLINE: "You are offline!",
        YOU_HAVE_MORE_LIST: "Free version is limited to show 10 items. Upgrade to PRO version to see more!"
    })
});

    ovModule.config(function ($translateProvider) {
    $translateProvider.translations("es", {
        ADV_SEARCH_TOUCH: "Toque para búsqueda avanzada",
        ADV_SEARCH_RESET: "Restablecer búsqueda avanzada",
        AFTER_PURCHASE: "Después de la compra, pulse el icono de descarga para descargar la versión comprada",
        AGREE_TERMS: "Al suscribirse usted acepta los Términos de Servicio y Política de Privacidad",
        ALERT: "Alerta",
        ALL_TAGS: "Todas las etiquetas",
        ALL_TAGS_HELP: "o elegir existente",
        ALL_TESTAMENT: "Buscar en todos los libros",
        ALL_VERSE_VIEW: "Todo Verso Ver",
        ALL_VERSE_VIEW_DESC: "Para leer más rápido, comprender el contenido",
        AND: "Y",
        ANONYMOUS: "Anónimo",
        APP_NAME: "One Verse",
        APP_SETTINGS: "Configuración de la aplicación",
        ARE_YOU_SURE: "¿Estas seguro?",
        ARE_YOU_SURE_TO_DELETE: "¿Estas seguro que quieres borrarlo?",
        ARE_YOU_SURE_TO_DELETE_TAG: "¿Seguro que quieres borrar este Tag?",
        ARE_YOU_SURE_TO_DOWNLOAD: "¿Seguro descargar {{value}}?",
        ARE_YOU_SURE_TO_PURCHASE: "¿Seguro compre {{value}}?",
        BACK: "Atrás",
        BIBLE: "Biblia",
        BIBLE_SEARCH_HELP: "Introduzca el nombre del libro (Abreviatura: Eclesiastés -> Ecc)",
        BIBLE_VERSIONS: "Versiones de la Biblia",
        BOOKS: "Libros",
        CANCEL: "Cancelar",
        CANCELLED: "Cancelado",
        CHANGE_THEME: "Cambiar de tema",
        CHANGE_VERSE: "Cambio verso",
        CHINESE: "Chino",
        CLOSE: "Cerca",
        CHOOSE_UPTO_FOUR: "La limitación de elegir hasta cuatro versiones es evitar ralentizar al cargar datos.",
        COMPARE_ALL_HELP: "Descargar más versiones para comparar más!",
        COMPARE_ALL_VERSIONS: "Comparar versiones",
        CROSS_REFERENCE: "Referencia cruzada",
        CURRENT_TAGS: "Etiquetas en verso actual",
        DAY_LEFT: "días que quedan",
        DAYS_LEFT: "día la izquierda",
        DELETE: "Borrar",
        DEVELOPER: "Desarrollador",
        DID_YOU_RATE: "¿Terminaste calificación?",
        DID_YOU_SHARE: "¿Terminaste compartir?",
        DISPLAY: "Pantalla",
        DISPLAY_SETTINGS: "Configuración de pantalla",
        DONE: "Hecho",
        DONE_DOWNLOADING: "Descarga completa!",
        EDIT: "Editar",
        EMAIL: "Email",
        EMAIL_DESC: "Su dirección de correo electrónico",
        ENGLISH: "Inglés",
        ENTER_SECRET: "Introduzca la clave de acceso",
        FACEBOOK: "Facebook",
        FONT: "Tipo de letra",
        FONT_SANS_SERIF: "Sans Serif",
        FONT_SERIF: "Serif",
        FONT_SIZE: "Tamaño de fuente",
        FREE: "Gratis",
        FREE_EXPIRED: "Su período de prueba para la versión Pro ha expirado. Usted va a utilizar la versión libre.",
        FREE_TRIAL: "Puede usar la versión Pro para {{value}} días. Después de {{value}} días, que va a utilizar la versión libre.",
        FRENCH: "Francés",
        GET_PRO: "Actualizar a PRO",
        GET_MORE_THEMES: "Obtener más temas",
        GOOGLE: "Google",
        GOT_IT: "Lo tengo",
        GUESS_BIBLE_VERSE: "Adivina el verso de la biblia?",
        HELP: "Ayuda",
        HISTORY: "Historia",
        IF_YOU_LIKE_THE_APP: "Si te gusta la aplicación, comprar la versión Pro por nosotros comprar una taza de café. Con el fondo elevamos, podemos pasar más tiempo para hacer la mejor aplicación de la Biblia!",
        INFO: "Info",
        INIT_DOWNLOAD_INSTRUCTION: "A punto de descargar los datos iniciales (= 5 MB). Esto puede consumir su uso de datos. ¿Quieres proceder?",
        INIT_DOWNLOAD: "Sí, descarga",
        INITIALIZING_PURCHASE: "Compra Inicialización",
        INTRO_ONE_TITLE: "Deslice hacia arriba o hacia abajo para navegar versos",
        INTRO_TWO_TITLE: "Seleccionar y comparar con otras versiones de la Biblia para una mejor comprensión",
        INTRO_THREE_TITLE: "Haga etiquetas para categorizar versículos de la Biblia",
        INTRO_FOUR_TITLE: "Cambiar la configuración de pantalla para una mejor lectura",
        INTRO_FIVE_TITLE: "Elija cómo desea ver versos.",
        INTRO_SIX_TITLE: "Regístrate y llegar a ser un miembro de un versículo de la Biblia a la reserva sus etiquetas y actividades de lectura.",
        INTRO_SEVEN_TITLE: "Toque el botón de la estrella para guardar como su favorito (o hacer etiquetas). Activación de la notificación para sus versos guardados y One Verse Biblia te notificaremos tres veces al día para entrenar a memorizar los versículos de la Biblia!",
        IS_THIS_RIGHT_LANGUAGE: "¿Es este el idioma principal que utiliza?",
        JOHN_1_1: "En el principio era el Verbo, y el Verbo era con Dios, y el Verbo era Dios. (Juan 1:1)",
        KEYWORD_SEARCH_HELP: "Inserte palabra clave",
        KEYWORD_TOO_SHORT: "La palabra clave es demasiado corta",
        KOREAN: "Coreano",
        LANGUAGE: "Idioma",
        LOADING: "Cargando",
        LOGIN: "Iniciar sesión",
        LOGIN_BENEFIT: "Una vez que se conecte, todos los metadatos que incluyen las etiquetas se sincronizarán con la Nube (sólo para la versión Pro). Si no se conecte, datos bien permanecen en un solo dispositivo. Si desea utilizar los mismos datos entre todos los dispositivos que tenga, le recomendamos que se conecte.",
        LOGIN_OR_SIGN_UP: "Iniciar sesión / Contratar",
        LOGIN_REQUIRED_FEATURE: "Para utilizar esta función, por favor conectarse / registro",
        LOGIN_TO_BACKUP_TAGS: "Para respaldar sus etiquetas a One Verse Cloud, por favor Iniciar sesión / Registrar después de su compra",
        LOGIN_TO_USE_CLOUD: "Entra para realizar copias de seguridad de sus datos a One Verse Cloud",
        LOGIN_FAILED: "Error de inicio de sesion. Tal vez se le olvidó la contraseña?",
        LOGIN_SUCCESS: "Entrar logrado",
        LOGIN_WITH_FACEBOOK: "Iniciar sesión con Facebook",
        LOGOUT: "Cerrar sesión",
        LOGOUT_SUCCESS: "Cerrar sesión tuvo éxito",
        MORE: "Más",
        MSG_END_OF_CHAPTER: "Alcanzado final del capítulo",
        MSG_END_OF_CHAPTER_NEXT_BOOK: "Alcanzado final de este libro, la lectura libro siguiente",
        MSG_END_OF_VERSE: "Alcanzado final de los versos",
        MSG_FIRST_CHAPTER: "Sin capítulo anterior encontrado",
        MSG_CHOOSE_AT_LEAST_ONE_VERSION: "Por favor, elija al menos una versión de la biblia.",
        MSG_CHOOSE_AT_LEAST_ONE_VERSE: "Por favor, elija al menos un versículo para compartir.",
        MSG_VERSIONS_ALLOWED: "Máximo de cuatro versiones de la Biblia están permitidos. Elija entre una a cuatro versiones.",
        MSG_CLIPBOARD_SUCCESS: "Copiado al portapapeles",
        MSG_CLIPBOARD_ERROR: "No se pudo copiar al portapapeles",
        MSG_RESTART: "Hubo una actualización importante. Por favor, cierre la aplicación y reinicie. ;-)",
        MSG_SLIDE_LEFT_RIGHT_CHANGE: "Diapositiva izquierda / derecha para cambiar el fondo",
        MSG_TAKE_SCREENSHOT: "Tomar captura de pantalla en 10 segundos y compartir",
        NAME: "Nombre",
        NAME_DESC: "Su nombre",
        NAME_REQUIRED: "El nombre es necesario para el registro",
        NEW_TESTAMENT: "Nuevo Testamento",
        NEW_VERSION_AVAILABLE: "La nueva versión está disponible en la tienda. Por favor, actualice a la última versión para una mejor experiencia.",
        NEXT: "Siguiente",
        NEXT_CHAPTER: "Siguiente capítulo",
        NO_RESULTS_FOUND: "No se han encontrado resultados.",
        NO_TAGS_FOUND: "No se han encontrado etiquetas",
        NO_THANKS: "No, gracias",
        NOT: "No",
        NOT_SUPPORTED: "Este dispositivo no es compatible",
        NOT_SUPPORTED_VERSION: "Esta versión no es compatible.",
        NOTE: "Nota",
        NOTI_SCHEDULED: "Notificación programada",
        OK: "OK",
        OLD_TESTAMENT: "Antiguo testamento",
        ONE_VERSE: "One Verse",
        ONE_VERSE_CLOUD: "One Verse Cloud",
        ONE_VERSE_VIEW: "One Verse Ver",
        ONE_VERSE_VIEW_DESC: "Porque en lectura de profundidad y enfocar mejor",
        OOPS: "Vaya, inténtelo de nuevo",
        OR: "O",
        OUTDATED: "Datos que se encuentran fuera de sincronía. Sincronización se realizará automáticamente al iniciar la aplicación.",
        PASSWORD: "Clave",
        PASSWORD_DESC: "Su contraseña segura",
        PASSWORD_RESET_SENT: "Enlace para restablecer la contraseña ha sido enviada a su e-mail",
        PLEASE_GET_ONLINE: "Por favor, póngase en línea primero",
        PLEASE_WAIT_DOWNLOADING: "Por favor, espere mientras se descarga de datos",
        PLEASE_SELECT_AT_LEAST_ONE: "Por favor, seleccione al menos un",
        PREVIOUS: "Previo",
        PREVIOUS_CHAPTER: "Capítulo anterior",
        PRINT: "Impresión",
        PRO: "PRO",
        PRO_EXPIRED: "Versión Gratuita",
        PRO_EXPIRED_OR_NOT_LOGGED_IN: "Pro caducado o no iniciado sesión. Por favor, compre actualizar a la versión Pro o compartir verso extender de 1 día!",
        PRO_VERSION: "Versión Pro",
        PURCHASE: "Compra",
        PURCHASE_OR_SHARE: "Toque aquí para comprar la aplicación para utilizar las funciones ilimitadas PRO",
        RATE_FAILED: "No se ha podido puntuar",
        RATE_NOW: "Sí, tasa ahora",
        RATE_TO_EXTEND: "Al igual que nuestra aplicación? Nos puntuar 5 estrellas con reseñas y extender los 10 días de la versión Pro",
        REGISTER: "Registro",
        REORDER: "Reordenar",
        RESET_PASSWORD: "Restablecer la contraseña",
        RESTORE_PURCHASE: "Restaurar compra",
        SAY: "Decir",
        SAVE: "Guardar",
        SAVED: "Salvado",
        SEARCH: "Buscar",
        SETTINGS: "Ajustes",
        SELECT_VERSIONS: "Versiones de la Biblia",
        SELECT_VERSIONS_HELP: "Toque aquí para cambiar o añadir versiones de la Biblia",
        SEND_NOTIFICATION_3_TIMES: "Utilice la notificación al día (mañana, tarde, noche)",
        SHARE: "Compartir",
        SHARE_VERSE: "Share / copia / captura de pantalla",
        SHARE_COPY_TO_CLIPBOARD: "Copiar al portapapeles",
        SHARE_FRIENDLY_HEADER: "One Verse Biblia App",
        SHARE_FRIENDLY_MSG: "Hola, estoy usando One Verse Biblia para leer la Biblia todos los días. ¡Echale un vistazo!",
        SHARE_FAILED_SHARE: "Error al compartir. Por favor, vuelva a intentarlo.",
        SHARE_LIMIT_REACHED: "Compartir límite alcanzado",
        SHARE_MSG_LONG: "Hey, empezar a leer la Biblia y saber quién es Jesucristo! Lee Juan 3:16 con la aplicación One Verse Biblia!",
        SHARE_MSG_SHORT: "Hey, empezar a leer la Biblia y saber quién es Jesús!",
        SHARE_SUCCESSFULLY_SHARED: "Con éxito compartido!",
        SHARE_TO_FACEBOOK_TO_EXTEND: "Compartir a través de Facebook para extender 1 día",
        SHARE_TO_EXTEND: "Toque aquí para compartir al SNS para extender más días para la versión Pro",
        SHARE_TO_EXTEND_DAYS: "Comparte extender Pro Versión para {{value}} días",
        SHARE_VIA_ANY_APP: "Compartir a través de cualquier Aplicaciones",
        SHOW_ALL_VERSES: "Vista de la lista",
        SHOW_TAGS_NEXT_TO_VERSE: "Mostrar etiquetas junto al verso",
        SIDE_BY_SIDE_VIEW: "Lado a lado Ver",
        SIDE_BY_SIDE_VIEW_DESC: "Para comparar fácilmente para una mejor comprensión",
        SKIP: "Saltar",
        SKIP_DESC: "Siempre se puede iniciar sesión o regístrate tarde",
        SOON_SUPPORTED: "En Poco Tiempo",
        SOMETHING_WRONG: "Algo es técnicamente incorrecto. ¿Está fuera de línea?",
        SPANISH: "Español",
        STARRED: "Añadido a favoritos",
        SUBMIT: "Enviar",
        SUGGESTED: "Sugirió",
        SWIPE_LEFT_FOR_MORE_ACTIONS: "Desliza el dedo hacia la izquierda en cada verso para más acciones",
        SWIPE_TO_CHANGE: "Pase para cambiar",
        SWIPE_TOP_TO_NAVIGATE: "Toque aquí para navegar entre versos",
        SYNC_IN_PROGRESS: "Sincronización en curso",
        SYNC_TO_CLOUD: "Sync para la nube",
        TAG_ADD: "Añadir etiqueta",
        TAG_AT_LEAST_ONE_REQUIRED: "Se requiere al menos una etiqueta. Si ha introducido, pulse la tecla enter para confirmar.",
        TAG_DUPLICATE_FOUND: "La etiqueta que ha introducido ya existe",
        TAG_ENTER_HELP: "Introduzca nombre de la etiqueta y pulse ENTER",
        TAG_OR_FAVORITE: "Etiqueta / Favorite",
        TAG_NAME: "Introduzca nombre de etiqueta",
        TAG_TOO_LONG_OR_SHORT: "Nombre de la etiqueta demasiado corto o largo",
        TAGS: "Etiquetas",
        TAGS_OTHERS: "Otros Etiquetas",
        TAKE_TO_TUTORIAL: "Llévame al tutorial",
        THANK_YOU_PURCHASE: "Gracias por su compra",
        THEME: "Tema",
        TOUCH_TO_VIEW_PROFILE: "Ver perfil",
        TRY_AGAIN: "Inténtalo de nuevo",
        TRY_AGAIN_COULDNT_FIND: "No pudo encontrar. Por favor, vuelva a intentarlo.",
        TWITTER: "Twitter",
        VERSE_DETAIL: "Realice la acción en verso",
        VERSION: "Versión",
        VIEW_ALL_TAGS: "Ver todas las etiquetas",
        UPGRADE_PRO_MSG: "Apoyar el desarrollador mediante la actualización a la versión PRO! Con la versión PRO usted será capaz de utilizar todas las funciones sin límite y guardar sus datos de forma segura en One Verse Cloud!",
        UPDATE: "Actualización",
        USERNAME_REQUIRED: "Introduzca su dirección de correo electrónico y toca de nuevo para reiniciar",
        USERNAME_PASSWORD_REQUIRED: "Se requiere Email / contraseña",
        WARNING: "Advertencia",
        WHY_LANGUAGE_MATTERS: "Esto no significa que usted está leyendo solamente la Biblia en este idioma. Esta selección de idioma es mostrar la interfaz en su idioma principal. Vamos a añadir más idiomas ya que actualizamos One Verse Biblia.",
        YOU_ARE_OFFLINE: "¡Estas desconectado!",
        YOU_HAVE_MORE_LIST: "La versión gratuita está limitada a mostrar 10 artículos. Actualiza a la versión PRO para ver más!"
    })
});

    ovModule.config(function ($translateProvider) {
    $translateProvider.translations("en", {
        ABBR_BOOK_01: "Gen",
        ABBR_BOOK_02: "Ex",
        ABBR_BOOK_03: "Lev",
        ABBR_BOOK_04: "Num",
        ABBR_BOOK_05: "Deut",
        ABBR_BOOK_06: "Josh",
        ABBR_BOOK_07: "Judg",
        ABBR_BOOK_08: "Ruth",
        ABBR_BOOK_09: "1 Sam",
        ABBR_BOOK_10: "2 Sam",
        ABBR_BOOK_11: "1 Kin",
        ABBR_BOOK_12: "2 Kin",
        ABBR_BOOK_13: "1 Chr",
        ABBR_BOOK_14: "2 Chr",
        ABBR_BOOK_15: "Ezra",
        ABBR_BOOK_16: "Neh",
        ABBR_BOOK_17: "Esth",
        ABBR_BOOK_18: "Job",
        ABBR_BOOK_19: "Ps",
        ABBR_BOOK_20: "Prov",
        ABBR_BOOK_21: "Eccl",
        ABBR_BOOK_22: "Song",
        ABBR_BOOK_23: "Is",
        ABBR_BOOK_24: "Jer",
        ABBR_BOOK_25: "Lam",
        ABBR_BOOK_26: "Ezek",
        ABBR_BOOK_27: "Dan",
        ABBR_BOOK_28: "Hos",
        ABBR_BOOK_29: "Joel",
        ABBR_BOOK_30: "Amos",
        ABBR_BOOK_31: "Obad",
        ABBR_BOOK_32: "Jon",
        ABBR_BOOK_33: "Mic",
        ABBR_BOOK_34: "Nah",
        ABBR_BOOK_35: "Hab",
        ABBR_BOOK_36: "Zeph",
        ABBR_BOOK_37: "Hag",
        ABBR_BOOK_38: "Zech",
        ABBR_BOOK_39: "Mal",
        ABBR_BOOK_40: "Matt",
        ABBR_BOOK_41: "Mark",
        ABBR_BOOK_42: "Luke",
        ABBR_BOOK_43: "John",
        ABBR_BOOK_44: "Acts",
        ABBR_BOOK_45: "Rom",
        ABBR_BOOK_46: "1 Cor",
        ABBR_BOOK_47: "2 Cor",
        ABBR_BOOK_48: "Gal",
        ABBR_BOOK_49: "Eph",
        ABBR_BOOK_50: "Phil",
        ABBR_BOOK_51: "Col",
        ABBR_BOOK_52: "1 Thess",
        ABBR_BOOK_53: "2 Thess",
        ABBR_BOOK_54: "1 Tim",
        ABBR_BOOK_55: "2 Tim",
        ABBR_BOOK_56: "Titus",
        ABBR_BOOK_57: "Philem",
        ABBR_BOOK_58: "Heb",
        ABBR_BOOK_59: "James",
        ABBR_BOOK_60: "1 Pet",
        ABBR_BOOK_61: "2 Pet",
        ABBR_BOOK_62: "1 John",
        ABBR_BOOK_63: "2 John",
        ABBR_BOOK_64: "3 John",
        ABBR_BOOK_65: "Jude",
        ABBR_BOOK_66: "Rev",
        BOOK_01: "Genesis",
        BOOK_02: "Exodus",
        BOOK_03: "Leviticus",
        BOOK_04: "Numbers",
        BOOK_05: "Deuteronomy",
        BOOK_06: "Joshua",
        BOOK_07: "Judges",
        BOOK_08: "Ruth",
        BOOK_09: "1 Samuel",
        BOOK_10: "2 Samuel",
        BOOK_11: "1 Kings",
        BOOK_12: "2 Kings",
        BOOK_13: "1 Chronicles",
        BOOK_14: "2 Chronicles",
        BOOK_15: "Ezra",
        BOOK_16: "Nehemiah",
        BOOK_17: "Esther",
        BOOK_18: "Job",
        BOOK_19: "Psalms",
        BOOK_20: "Proverbs",
        BOOK_21: "Ecclesiastes",
        BOOK_22: "Song of Songs",
        BOOK_23: "Isaiah",
        BOOK_24: "Jeremiah",
        BOOK_25: "Lamentations",
        BOOK_26: "Ezekiel",
        BOOK_27: "Daniel",
        BOOK_28: "Hosea",
        BOOK_29: "Joel",
        BOOK_30: "Amos",
        BOOK_31: "Obadiah",
        BOOK_32: "Jonah",
        BOOK_33: "Micah",
        BOOK_34: "Nahum",
        BOOK_35: "Habakkuk",
        BOOK_36: "Zephaniah",
        BOOK_37: "Haggai",
        BOOK_38: "Zechariah",
        BOOK_39: "Malachi",
        BOOK_40: "Matthew",
        BOOK_41: "Mark",
        BOOK_42: "Luke",
        BOOK_43: "John",
        BOOK_44: "Acts",
        BOOK_45: "Romans",
        BOOK_46: "1 Corinthians",
        BOOK_47: "2 Corinthians",
        BOOK_48: "Galatians",
        BOOK_49: "Ephesians",
        BOOK_50: "Philippians",
        BOOK_51: "Colossians",
        BOOK_52: "1 Thessalonians",
        BOOK_53: "2 Thessalonians",
        BOOK_54: "1 Timothy",
        BOOK_55: "2 Timothy",
        BOOK_56: "Titus",
        BOOK_57: "Philemon",
        BOOK_58: "Hebrews",
        BOOK_59: "James",
        BOOK_60: "1 Peter",
        BOOK_61: "2 Peter",
        BOOK_62: "1 John",
        BOOK_63: "2 John",
        BOOK_64: "3 John",
        BOOK_65: "Jude",
        BOOK_66: "Revelation"
    })
});

    ovModule.config(function ($translateProvider) {
    $translateProvider.translations("es", {
        ABBR_BOOK_01: "Gen",
        ABBR_BOOK_02: "Exo",
        ABBR_BOOK_03: "Lev",
        ABBR_BOOK_04: "Num",
        ABBR_BOOK_05: "Deu",
        ABBR_BOOK_06: "Jos",
        ABBR_BOOK_07: "Jug",
        ABBR_BOOK_08: "Rut",
        ABBR_BOOK_09: "1sm",
        ABBR_BOOK_10: "2sm",
        ABBR_BOOK_11: "1kg",
        ABBR_BOOK_12: "2kg",
        ABBR_BOOK_13: "1ch",
        ABBR_BOOK_14: "2ch",
        ABBR_BOOK_15: "Ezr",
        ABBR_BOOK_16: "Neh",
        ABBR_BOOK_17: "Est",
        ABBR_BOOK_18: "Job",
        ABBR_BOOK_19: "Ps",
        ABBR_BOOK_20: "Pro",
        ABBR_BOOK_21: "Ecc",
        ABBR_BOOK_22: "Son",
        ABBR_BOOK_23: "Isa",
        ABBR_BOOK_24: "Jer",
        ABBR_BOOK_25: "Lam",
        ABBR_BOOK_26: "Eze",
        ABBR_BOOK_27: "Dan",
        ABBR_BOOK_28: "Hos",
        ABBR_BOOK_29: "Joe",
        ABBR_BOOK_30: "Amo",
        ABBR_BOOK_31: "Oba",
        ABBR_BOOK_32: "Jon",
        ABBR_BOOK_33: "Mic",
        ABBR_BOOK_34: "Nah",
        ABBR_BOOK_35: "Hab",
        ABBR_BOOK_36: "Zep",
        ABBR_BOOK_37: "Hag",
        ABBR_BOOK_38: "Zec",
        ABBR_BOOK_39: "Mal",
        ABBR_BOOK_40: "Mat",
        ABBR_BOOK_41: "Mak",
        ABBR_BOOK_42: "Luk",
        ABBR_BOOK_43: "Jhn",
        ABBR_BOOK_44: "Act",
        ABBR_BOOK_45: "Rom",
        ABBR_BOOK_46: "1co",
        ABBR_BOOK_47: "2co",
        ABBR_BOOK_48: "Gal",
        ABBR_BOOK_49: "Eph",
        ABBR_BOOK_50: "Phl",
        ABBR_BOOK_51: "Col",
        ABBR_BOOK_52: "1ts",
        ABBR_BOOK_53: "2ts",
        ABBR_BOOK_54: "1tm",
        ABBR_BOOK_55: "2tm",
        ABBR_BOOK_56: "Tit",
        ABBR_BOOK_57: "Ph,",
        ABBR_BOOK_58: "Heb",
        ABBR_BOOK_59: "Jam",
        ABBR_BOOK_60: "1Pe",
        ABBR_BOOK_61: "2Pe",
        ABBR_BOOK_62: "1Jn",
        ABBR_BOOK_63: "2Jn",
        ABBR_BOOK_64: "3Jn",
        ABBR_BOOK_65: "Jud",
        ABBR_BOOK_66: "Rev",
        BOOK_01: "Génesis",
        BOOK_02: "Éxodo",
        BOOK_03: "Levítico",
        BOOK_04: "Números",
        BOOK_05: "Deuteronomio",
        BOOK_06: "Josué",
        BOOK_07: "Jueces",
        BOOK_08: "Rut",
        BOOK_09: "1ra Samuel",
        BOOK_10: "2da Samuel",
        BOOK_11: "1ra Reyes",
        BOOK_12: "2da Reyes",
        BOOK_13: "1ra Crónicas",
        BOOK_14: "2da Crónicas",
        BOOK_15: "Esdras",
        BOOK_16: "Nehemías",
        BOOK_17: "Ester",
        BOOK_18: "Job",
        BOOK_19: "Salmos",
        BOOK_20: "Proverbios",
        BOOK_21: "Eclesiastés",
        BOOK_22: "Cantar de los Cantares",
        BOOK_23: "Isaias",
        BOOK_24: "Jeremías",
        BOOK_25: "Lamentaciones",
        BOOK_26: "Ezequiel",
        BOOK_27: "Daniel",
        BOOK_28: "Oseas",
        BOOK_29: "Joel",
        BOOK_30: "Amós",
        BOOK_31: "Abdías",
        BOOK_32: "Jonás",
        BOOK_33: "Miqueas",
        BOOK_34: "Nahúm",
        BOOK_35: "Habacuc",
        BOOK_36: "Sofonías",
        BOOK_37: "Hageo",
        BOOK_38: "Zacarías",
        BOOK_39: "Malaquías",
        BOOK_40: "Mateo",
        BOOK_41: "Marcos",
        BOOK_42: "Lucas",
        BOOK_43: "Juan",
        BOOK_44: "Hechos de los Apóstoles",
        BOOK_45: "Romanos",
        BOOK_46: "1ro Corintios",
        BOOK_47: "2do Corintios",
        BOOK_48: "Gálatas",
        BOOK_49: "Efesios",
        BOOK_50: "Filipenses",
        BOOK_51: "Colosenses",
        BOOK_52: "1ra Tesalonicenses",
        BOOK_53: "2da Tesalonicences",
        BOOK_54: "1st Timoteo",
        BOOK_55: "2nd Timoteo",
        BOOK_56: "Tito",
        BOOK_57: "Filemón",
        BOOK_58: "Hebreos",
        BOOK_59: "Santiago",
        BOOK_60: "1ra Pedro",
        BOOK_61: "2da Pedro",
        BOOK_62: "1ra Juan",
        BOOK_63: "2da Juan",
        BOOK_64: "3ra Juan",
        BOOK_65: "Judas",
        BOOK_66: "Apocalipsis"
    })
});

    var toggleSound = function () {
    //ionic.Platform.isAndroid() && window.plugins.deviceFeedback.acoustic()
};

    ovModule.directive("ngClick", function () {
    return {
        restrict: "A",
        link: function (scope, element) {
            element.bind("click", function () {
                toggleSound()
            })
        },
        controller: function () {
        }
    }
});

    ovModule.directive("href", function () {
        return {
            restrict: "A",
            link: function (scope, element) {
                element.bind("click", function () {
                    toggleSound()
                })
            },
            controller: function () {
            }
        }
    });

    ovModule.directive("toggle", function () {
        return {
            restrict: "C",
            link: function (scope, element) {
                element.bind("click", function () {
                    toggleSound()
                })
            },
            controller: function () {
            }
        }
    });

    ovModule.directive("selectToggle", function () {
        return {
            restrict: "A",
            link: function (scope, element) {
                element.bind("click", function () {
                    toggleSound()
                })
            },
            controller: function () {
            }
        }
    });


    ovModule.factory("API", function ($http) {
    return {
        call: function (option) {
            var defaultOption = {
                url: "",
                method: "GET",
                data: {},
                timeout: 1e4
            };
            defaultOption.url = option.url, defaultOption.method = option.method || defaultOption.method, defaultOption.data = option.data || defaultOption.data;
            var deferred = $http({
                url: defaultOption.url,
                method: defaultOption.method,
                cache: !1,
                params: defaultOption.data,
                timeout: 1e4
            });
            deferred.then(function (value) {
                console.log("* POST DATA: " + angular.toJson(defaultOption.data)), console.log("* API call success - URL: " + defaultOption.url), console.log("* RETURN DATA: " + angular.toJson(value)), angular.isDefined(option.success) && option.success(value.data)
            }, function (error) {
                console.log("* API call error - URL: " + defaultOption.url + " status: " + error.status), console.log("* API failure: " + angular.toJson(error)), angular.isDefined(option.failure) && option.failure(error)
            })
        }
    }
});

    ovModule.factory("Analytics", function ($cordovaGoogleAnalytics, $timeout) {
    //return {}
    return {
        start: function (key) {
            //isDevice && (console.log("Analytics - key: " + key), $cordovaGoogleAnalytics.startTrackerWithId(key))
        },
        setUserID: function (uuid) {
            //isDevice && (console.log("Analytics - setting uuid"), $timeout(function () {
            //    "undefined" != typeof uuid && -1 === bypassIds.indexOf(uuid) && $cordovaGoogleAnalytics.setUserId(uuid)
            //}, 3e3))
        },
        track: function (name, dimensions) {
            //-1 === bypassIds.indexOf(uuidIs) ? (console.log("analytics capturing - " + name), Parse.Analytics.track(name, dimensions)) : console.log(uuidIs + " bypassed")
        },
        trackView: function (viewName) {
            //isDevice && (console.log("Analytics - view changed: " + viewName), $cordovaGoogleAnalytics.trackView(viewName))
        },
        trackEvent: function (category, action, label, count) {
            //isDevice && (console.log("Analytics - track event / category: " + category + " action: " + action + " label: " + label + " count: " + count), $cordovaGoogleAnalytics.trackEvent(category, action, label, count))
        },
        trackMoney: function (id, item, cost, tax, shipping, currency) {
            //if (isDevice) {
            //    var numberPattern = /\d+(\.\d+)/g, justCost = cost.match(numberPattern);
            //    console.log("Analytics - track money / id: " + id + " item: " + item + " cost: " + justCost + " tax: " + tax + " shipping: " + shipping + " currency: " + currency), $cordovaGoogleAnalytics.addTransaction(id, item, justCost.toString(), tax.toString(), shipping.toString(), currency).then(function (result) {
            //        console.log("Analytics - track money success: " + angular.toJson(result))
            //    }, function (err) {
            //        console.log("Analytics - track money failure: " + err)
            //    })
            //}
        },
        trackException: function (description, fatal) {
            //isDevice && "undefined" != typeof window.analytics && $cordovaGoogleAnalytics.trackException(description, fatal)
        }
    }
});

    ovModule.factory("Bible", function () {
    return {
        processBooks: function (data) {
            var arr = {};
            return angular.forEach(data, function (val) {
                var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                "undefined" == typeof arr["BOOK_" + bookNumber] && (arr["BOOK_" + bookNumber] = {}), "undefined" == typeof arr["BOOK_" + bookNumber].chapters && (arr["BOOK_" + bookNumber].chapters = {}), arr["BOOK_" + bookNumber].chapters["chapter_" + val.c] = val.v
            }), arr
        }
    }
});

    ovModule.factory("Config", function () {
    return {
        setTranslation: function (callback) {
            "undefined" != typeof navigator.globalization && navigator.globalization.getPreferredLanguage(function (language) {
                var localLang = language.value.split("-")[0];
                console.log("localLang is: " + localLang), deviceLanguage = localLang;
                var supportedLangs = ["en", "es", "ko", "zh", "fr"],
                    useLang = "en";
                console.log("supportedLangs.indexOf(localLang): " + supportedLangs.indexOf(localLang)), -1 !== supportedLangs.indexOf(localLang) && (console.log("localLang: use from client - " + localLang), useLang = localLang), callback(useLang)
            }, null), isDevice || callback("en")
        },
        getPlatform: function () {
            return isIOS ? "ios" : "android"
        },
        getUsername: function (uuid) {
            return uuid + "-" + this.getPlatform()
        },
        getUUID: function (callback) {
            isDevice ? window.plugins.uniqueDeviceID.get(function (uuid) {
                console.log("getUUID uuid: " + uuid), callback(uuid)
            }, function (err) {
                console.log("getUUID error: " + angular.toJson(err))
            }) : callback("localhost12345")
        },
        getPassword: function (uuid, secret) {
            return CryptoJS.HmacSHA1(uuid, secret).toString()
        },
        getKey: function (name) {
            return "ga" === name ? "UA-50170929-4" : "ps" === name ? "2FdkMnXKaOQt99xSRKjp5ijq1DyQ5NjtJbgvU2Lv" : null
        },
        getSecret: function (name) {
            return "ps" === name ? "yIwYmFwV3r9895T0vP4KlzGzQ2sfQaMxdBxfG06U" : null
        },
        getAppId: function () {
            return 1009370256
        },
        getPackageName: function () {
            return "com.codeinfaith.oneverse"
        },
        getStoreUrl: function () {
            return ionic.Platform.isIOS() ? "https://itunes.apple.com/us/app/bible-one-verse/id1009370256?ls=1&mt=8" : "https://play.google.com/store/apps/details?id=" + this.getPackageName()
        },
        getLanguages: function () {
            return [{
                display: "ENGLISH_ORIGINAL",
                code: "en"
            }, {
                display: "SPANISH_ORIGINAL",
                code: "es"
            }, {
                display: "KOREAN_ORIGINAL",
                code: "ko"
            }, {
                display: "CHINESE_ORIGINAL",
                code: "zh"
            }, {
                display: "FRENCH_ORIGINAL",
                code: "fr"
            }]
        },
        getOriginalLangNames: function (transCode) {
            var origs = {
                ENGLISH_ORIGINAL: "English",
                SPANISH_ORIGINAL: "Español",
                KOREAN_ORIGINAL: "한국어",
                CHINESE_ORIGINAL: "简体中文",
                FRENCH_ORIGINAL: "Français"
            };
            return origs[transCode]
        },
        getSpeechLanguage: function (lang) {
            var mapping = {
                ko: "ko-KR",
                en: "en-US"
            };
            return mapping[lang]
        },
        getThemes: function () {
            return [{
                name: "LIGHT",
                code: "one",
                pro: !1,
                book: "BOOK_43",
                chapter: 12,
                verse: 46
            }, {
                name: "DARK",
                code: "two",
                pro: !1,
                book: "BOOK_44",
                chapter: 18,
                verse: 9
            }, {
                name: "FLOWER",
                code: "flower",
                pro: !0,
                book: "BOOK_02",
                chapter: 25,
                verse: 33
            }, {
                name: "LEAF",
                code: "leaf",
                pro: !0,
                book: "BOOK_24",
                chapter: 17,
                verse: 8
            }, {
                name: "WATER",
                code: "water",
                pro: !0,
                book: "BOOK_43",
                chapter: 7,
                verse: 38
            }, {
                name: "FIRE",
                code: "fire",
                pro: !0,
                book: "BOOK_19",
                chapter: 105,
                verse: 39
            }, {
                name: "SNOW",
                code: "snow",
                pro: !0,
                book: "BOOK_23",
                chapter: 1,
                verse: 18
            }]
        },
        getFonts: function () {
            return [{
                name: "FONT_SANS_SERIF",
                code: "sans-serif"
            }, {
                name: "FONT_SERIF",
                code: "serif"
            }]
        },
        getIndexByBookname: function (lang, bookname) {
            var booklist;
            return "en" === lang ?
                booklist = ["Genesis", "Exodus1", "Leviticus1", "Numbers", "Deuteronomy"] : "ko" === lang && (booklist = ["창세기", "출애굽기", "레위기", "민수기", "신명기"]), booklist.indexOf(bookname) + 1
        },
        getIntroVersion: function () {
            return 1
        }
    }
});

    ovModule.factory("DB", function () {
    return {
        create: function () {
            console.log("SQLITE:DROP_DB create() called");
            var db = this.open("oneverse");
            db.transaction(function (tx) {
                tx.executeSql("CREATE TABLE IF NOT EXISTS tag (id integer primary key, tagName text, note text, language text, createdAt text, privacy text, syncID text, syncedAt text, isDeleted integer)"), tx.executeSql("CREATE TABLE IF NOT EXISTS tagVerse (id integer primary key, tagId integer REFERENCES tag(id) ON DELETE CASCADE, bibleId text, createdAt text, syncID text, syncedAt text, isDeleted integer)")
            })
        },
        drop: function (callback) {
            console.log("SQLITE:DROP_DB drop() called");
            var db = this.open("oneverse");
            db.transaction(function (tx) {
                var query = "DROP TABLE IF EXISTS tag";
                tx.executeSql(query, [], function () {
                });
                var query2 = "DROP TABLE IF EXISTS tagVerse";
                tx.executeSql(query2, [], function () {
                    callback()
                })
            })
        },
        open: function (dbName) {
            var db = null;
            return "undefined" != typeof window.sqlitePlugin && (db = window.sqlitePlugin.openDatabase(ionic.Platform.isAndroid() ? {
                name: dbName + ".db",
                androidDatabaseImplementation: 2,
                androidLockWorkaround: 1,
                location:'default'
            } : {
                name: dbName + ".db",
                location: 2,
                createFromLocation: 1
            }), console.log("open database: " + angular.toJson(db))), db
        },
        preload: function (dbName, callback) {
            "undefined" != typeof window.plugins && window.plugins.sqlDB.copy(dbName + ".db", function () {
                console.log("db copied successfully"), callback()
            }, function (err) {
                console.log("db copy error: " + angular.toJson(err)), callback()
            })
        },
        select: function (db, table, field, extraClause, callback) {
            db.transaction(function (tx) {
                var query = "SELECT " + field + " FROM " + table;
                extraClause.length > 0 && (query += " " + extraClause + ";"), tx.executeSql(query, [], function (tx, res) {
                    for (var result = [], i = 0; i < res.rows.length; i++) result.push(res.rows.item(i));
                    callback(result)
                })
            }, function (e) {
                console.log("DB ERROR: " + e.message)
            })
        },
        "delete": function (db, table, extraClause, callback) {
            db.transaction(function (tx) {
                var query = "DELETE FROM " + table + " WHERE " + extraClause;
                tx.executeSql(query, [], function (tx, res) {
                    callback(res)
                })
            }, function (e) {
                console.log("DB delete ERROR: " + e.message)
            })
        },
        update: function (db, table, setClause, whereClause, callback) {
            console.log("SQL: DB.update() called"), db.transaction(function (tx) {
                var query = "UPDATE " + table + " SET " + setClause + " WHERE " + whereClause;
                console.log("SQL: query - " + query), tx.executeSql(query, [], function (tx, res) {
                    callback(res)
                })
            }, function (e) {
                console.log("DB update ERROR: " + e.message)
            })
        }
    }
});

    ovModule.factory("Debug", function () {
    return {

        getBibleData: function () {
            return [

                {
                    version: "kjv",
                    book: "BOOK_43",
                    verses: [{
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 851,
                        t: "If one can exactly see the world ‘as it is’; if one can exactly see the ‘relative’ and the ‘real’, it is shukladhyan (contemplation as the Self, Pure Soul)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 852,
                        t: "When the mind and the Self (Soul) become engrossed (tanmayakar) only then it is called artadhyan (mournful contemplation that hurts the self), and also one does not become aware that artadhyan has occurred. And if one realizes that artadhyan has occurred, then it is not called artadhyan; then it is the mind."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 853,
                        t: "Fruit of discharge karma with shukladhyan (contemplation as the Self, Pure Soul) is moksha, and fruit of discharge karma with dharmadhyan (auspicious contemplation; to not hurt anyone, to give happiness to others) is tremendous punya. It binds punyanubandhi punya (merit karma which binds more merit karma)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 854,
                        t: "Only when there is dharmadhyan (auspicious contemplation; to not hurt anyone, to give happiness to others) in the body, then there is shukladhyan in the Self (contemplation as the Self, the Soul)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 855,
                        t: "Shuddha upayog (applied awareness of the Self, The Soul) means to be able to see the Soul and the Body of the other person as separate. The constant contemplation of ‘I am pure Soul (Shuddhatma)’ is shukladhyan (pure contemplation as the Self)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 856,
                        t: "To constantly see one’s own self as ‘Pure’, and to see other’s self as ‘pure’, is focused applied awareness of the Self, the Soul (shuddha upayog)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 857,
                        t: "In shukladhyan (Pure contemplation as the Self, the Soul), whole world begins to look faultless (nirdosh). In dharmadhyan, despite seeing the other person at fault; one will uphold him as being faultless that is ‘dhramadhyan’, ‘what is the other person’s fault? He is simply instrumental (nimit) in it. It is due to the effect of my own karmas that I have encountered him.’"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 858,
                        t: "Shukladhyan (pure contemplation of the Self, the Soul) is the direct cause for moksha (liberation). Dharmadhyan (auspicious contemplation; to hurt no one, give happiness to others) is the indirect cause for moksh (liberation). Artadhyan (inner mournful contemplation that hurts the self) is a cause for a birth in animal life form (non-human). Raudradhyan (wrathful contemplation that hurts the self and others) is a cause for a life in hell."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 859,
                        t: "Shukladhyan (pure contemplation of the Self, the Soul) means focused awareness of the eternal form of the Self, the Soul. Dhyan (contemplation or one’s focused effort) is a natural thing. And in pure applied awareness as Pure Soul (shuddha upayog), one must do spiritual effort with awareness of the separation of the Self and non-Self."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 860,
                        t: "‘Who is doing this? Who am I? What is all this? Who is the doer? Who is the nimit (instrumental doer) of this? If all these remain present ‘at a time’ exactly the way it is, then that is considered shuddha upayog (pure focused applied awareness of the Self, the Soul)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 861,
                        t: "Nothing in this world can touch or affect the one who remains in the focused pure applied awareness of the Self, the Soul (shuddha upayogi)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 862,
                        t: "When is one considered to be in the awareness of ‘one’s own Self’? It is when all the desires become mild (when desires lessens)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 863,
                        t: "Knowledge of all living beings of the entire world is in only one Soul. But the knowledge that sees the ego and everything, as objects to be known (gneya); only that knowledge is called as the ‘Knowledge’. However, that is partial Knowledge but only from that moment it is regarded as real applied focused awareness. Where there is Knowledge, the focused applied awareness may be partial or complete."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 864,
                        t: "Complete focused applied awareness of the Soul (shuddha upayog) is considered absolute Knowledge (keval gnan)"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 865,
                        t: "Gnan (knowledge of the Self) can never become agnan (knowledge other than the self, of relative world). It is called agnan only when the focused applied awareness of the Self changes."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 866,
                        t: "‘I am Chandubhai’ is good or bad focused applied awareness (shubha-ashubha upyoga). ‘I am Pure Soul’, is the focused pure applied awareness of the Self (shuddha upayog). With good-bad focused applied awareness (shubha-ashubha upayog) instillation in the worldly life occured."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 867,
                        t: "The person who wants to progress on the path of Vitrag (the enlightened ones), should keep the focus of the awareness to progress from the non-auspicious (bad) to the auspicious (good). And if one wants to go to final Liberation [moksha], he should keep ‘pure focus as the Self (Soul)’ (shuddha upayog). The person, who wants to go to Moksha, should not concern himself with the auspicious (good) or the inauspicious (bad). He should keep them both as the things to be cleared out."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 868,
                        t: "Keeping ‘pure focused applied awareness of the Self (Soul)’ (shuddha upayog) is the same as being in the Absolute Supreme Self-form (Parmatma swaroop)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 869,
                        t: "Focused awareness of the Self in one direction (upayog) is considered enlightened awareness (jagruti)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 870,
                        t: "As much focused awareness of the Self (upayog) one can keep, that much authority he can create. If the upayog is kept for five hours, the authority is created for five hours. If complete Self-authority is created entirely, he becomes God!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 871,
                        t: "Who is considered as not living in the worldly life? The person who doesn’t have focus on the non-Self. ‘I’ (the Gnani Purush) do not live in the worldly life even for one moment. Liberation (Moksha) is to be found through the one who does not live in the worldly life. What can you not attain through the grace of such a person?"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 872,
                        t: "The Enlightened one (Gnani Purush) never wastes his time in counting money; focus of the awareness of the self (upayog) is wasted in doing this. One's focused awareness (upayog) is where he has ‘interest’!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 873,
                        t: "People live for two reasons. There are those who live for the Soul; such people are very rare. All others live for money. All day is spent for money, money, money!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 874,
                        t: "When can one attain samadhi (eternal blissful continuous peace)? It comes when one lets go of the things that he loves the most."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 875,
                        t: "Money is ‘limited’ and people’s demands are ‘unlimited’."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 876,
                        t: "Is it not necessary to eat? Is it not necessary to go to the toilet? They are necessary. In the same way, money is also required. Just as one does not have to think about going to the toilet & it happens automatically, in the same way, money comes without you having to think about it."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 877,
                        t: "Do you have to regret spending money when you earn money? And when it is time to spend, you should be strong that you got the opportunity to pay off your debt. Income is one’s responsibility and expense is the means to clear off the responsibility."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 878,
                        t: "The awareness that ‘money will get spent’ must never be kept; whatever gets spent at whatever time is correct. That’s why it was told to spend money, so that they can be free from greed and they can give it again and again."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 879,
                        t: "If money is spent in the wrong way, then ‘control’ the spending and if the money is spent in the right way, then ‘decontrol’ the spending."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 880,
                        t: "How long does one have obstacles (antray) in getting money? As long as he has the desire to earn money, he will have difficulty (antray). The moment there is disinterest towards money, it will come in abundance."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 881,
                        t: "To have a desire means to have dependency."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 882,
                        t: "If a person has any desire; then he cannot be called as God at all !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 883,
                        t: "Desires are done by the ‘Pudgal’ (non-self mind-body-complex), so how can they be suppressed? If You (the Self) are the one doing the desiring, then why don’t you stop it? But that doesn’t happen therefore, desire is a matter pertaining to the Pudgal (non-self mind-body-complex)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 884,
                        t: "Desires occur because pratyakhyan [resolutions to not repeat the mistake] were not done. It comes in the memory because pratikraman [repentances] were not done."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 885,
                        t: "Where there is even the subtlest desire, the ‘Eternal Thing’ cannot be attained."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 886,
                        t: "Without ‘Gnan’ (True Knowledge of the Self), desire(s) will not go away."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 887,
                        t: "Obstacles (antray) are indeed due to desires. As desires keep on decreasing, so do the obstructions (antray) keep on getting destroyed. Then, everything is acquired (at that stage)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 888,
                        t: "Why is it that ‘we’ (the Gnani Purush, the enlightened one) do not have any obstruction (antray)? It is because ‘we’ are in a desire-free state (Nirichchhak dasha)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 889,
                        t: "‘We’ (the Gnani Purush, the enlightened one) have only one desire, and that too is a discharging desire of doing ‘Jagat kalian’ (world’s salvation)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 890,
                        t: "Man is indeed the Absolute Supreme Soul (Parmatma); it is possible for infinite divinity to arise within. The moment he has a desire, he becomes a human! Otherwise, he can acquire whatever he wants, but he is unable to do so because of impediments (antray)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 891,
                        t: "How far is the Soul from attaining moksha (ultimate liberation)? Only the obstructive (antray) karmas."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 892,
                        t: "One who speaks ‘completely’ negative creates karmic obstructions (antray) and ‘positive’ does not create any obstruction (antray)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 893,
                        t: "‘We’ are the self (chetan, soul) and obstruction (antray) are non-self (achetan, non-soul); therefore, the Self (chetan, soul) shall win in the end!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 894,
                        t: "That which cannot be seen by the eyes, nor heard by the ears, is the Self (chetan, soul). That which can be heard by the ears, 'Television' is seen, a ‘record’ is heard, that is not self (chetan, soul) . The Self (chetan, soul) can only be seen with the divine vision (divya chakshu)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 895,
                        t: "The Soul (Atma) is the same as the sentient absolute supreme Soul (chetan-parmatma). Not a single attribute of the Soul can be imitated. What can be imitated is the attribute of the non-self body complex (pudgal). Speech is a ‘tape record’. Thoughts are a ‘discharge’. That, which discharges; is all non-self body complex (pudgal)."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 896,
                        t: "The whole world has the illusory awareness of, ‘I am the doer’. In reality, everyone’s karmas are getting discharged, but one is not aware of this. One has no awareness of his own True Self."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 897,
                        t: "‘I am Chandubhai’ is an illusion itself and from that are karmas charged. When does ‘charging’ of new karmas stop? When one attains the exact awareness of ‘who I am?’."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 898,
                        t: "Everything that is experienced through the five senses is all ‘discharge’. It is due to one’s merit karmas that everything works according to one’s wishes, but he claims, ‘I did it’ and when one faces losses, he will say, ‘God did it’ or ‘my horoscope is unfavorable’."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 899,
                        t: "‘Charge’ means coming together of all the circumstances and ‘discharge’ means the circumstances get over."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 900,
                        t: "It is called as ‘discharge’ (karma) when one has to do it compulsorily and against his wishes."
                    }]
                }, {
                    version: "asv",
                    book: "BOOK_43",
                    verses: [{
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 851,
                        t: "इस जगत को ‘जैसा है वैसा’ यथार्थ देख सकें, ‘रिलेटीव’ और ‘रियल’ यथार्थ देख सकें, वह शुक्लध्यान।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 852,
                        t: "मन और आत्मा तन्मयाकार हो जाएँ, तभी उसे आर्तध्यान कहा जाएगा और जिसका खुद को भी पता नहीं चलता कि आर्तध्यान हुआ है। यदि ऐसा पता चले कि आर्तध्यान हुआ है, तो वह आर्तध्यान नहीं कहा जाएगा, तो फिर वह मन है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 853,
                        t: "शुक्लध्यानपूर्वक हुई निर्जरा का फल मोक्ष और धर्मध्यानपूर्वक हुई निर्जरा का फल बहुत ज़बरदस्त पुण्य होता है। पुण्यानुबंधी पुण्य बँधता है। !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 854,
                        t: "देह में धर्मध्यान होगा, तभी आत्मा में शुक्लध्यान होगा।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 855,
                        t: "शुद्ध उपयोग यानी सामनेवाले के आत्मा और देह को अलग देख सकें, वह। ‘मैं शुद्धात्मा हूँ’ ऐसा निरंतर ध्यान रहना वह शुक्लध्यान।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 856,
                        t: "निरंतर खुद का ‘शुद्ध’ देखे और अन्यों का ‘शुद्ध’ देखे, वह शुद्ध उपयोग।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 857,
                        t: "शुक्लध्यान में सारे जगत को निर्दोष देखने की शुरूआत होती है। और धर्मध्यान में, सामनेवाला दोषित दिखाई दे, फिर भी उसे निर्दोष ठहराए, वह धर्मध्यान - ‘सामनेवाले का क्या दोष है? वह तो निमित्त है। यह मेरे ही कर्मों के उदय से वह मुझे मिला है।’"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 858,
                        t: "शुक्लध्यान प्रत्यक्ष मोक्ष का कारण है। धर्मध्यान परोक्ष मोक्ष का कारण है। आर्तध्यान पशुगति का कारण है। रौद्रध्यान नरकगति का कारण है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 859,
                        t: "‘शुक्लध्यान’ यानी तत्वस्वरूप का ध्यान। ‘ध्यान’, वह स्वाभाविक वस्तु है। और ‘शुद्ध उपयोग’ में जागृतिपूर्वक का पुरुषार्थ करना चाहिए।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 860,
                        t: "‘यह कौन कर रहा है? मैं कौन हूँ? यह सब क्या है? कर्ता कौन? इसका निमित्त कौन?’ यह सब ‘एट ए टाइम’ जैसा है वैसा हाज़िर रहे, वह ‘शुद्ध उपयोग’।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 861,
                        t: "‘शुद्ध उपयोगी’ को इस जगत् में कुछ भी छूए ऐसा नहीं है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 862,
                        t: "‘खुद’ के उपयोग में हैं, ऐसा कब कहा जाएगा? सारी इच्छाएँ मंद हो जाएँ तब।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 863,
                        t: "सारे जगत के तमाम जीवों का ज्ञान एक ही आत्मा में हैं, मगर जो ज्ञान अहंकार को और सभी को ज्ञेय के स्वरूप में देख सके, सिर्फ उसी ज्ञान को ‘ज्ञान’ कहा गया है। मगर वह तो अंशज्ञान है, लेकिन तब से उपयोग कहा जाएगा। जहाँ ‘ज्ञान’ है, वहाँ उपयोग अंश या सर्वांश होता ह"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 864,
                        t: "संपूर्ण ‘शुद्ध उपयोग’ वही ‘केवळज्ञान’।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 865,
                        t: "ज्ञान कभी भी अज्ञान नहीं हो जाता, लेकिन उपयोग बदलता है, उसे ही अज्ञान कहा है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 866,
                        t: "‘मैं चंदुभाई हूँ’ वह शुभाशुभ उपयोग। ‘मैं शुद्धात्मा हूँ’ वह ‘शुद्ध उपयोग’। शुभाशुभ के उपयोग से संसार में प्रतिष्ठा खड़ी हुई।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 867,
                        t: "जिसे वीतराग के मार्ग पर चलना है, उसे अशुभ में से शुभ कि तऱफ का उपयोग रखना चाहिए। और मोक्ष में जाना हो उसे ‘शुद्ध उपयोग’ रखना चाहिए। मोक्ष में जाना हो उसे शुभाशुभ की बवाल में नहीं पड़ना चाहिए, दोनों को निकाली बाबत मानना।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 868,
                        t: "‘शुद्ध उपयोग’ यानी परमात्म स्वरूप।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 869,
                        t: "उपयोग, वह जागृति माना जाता है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 870,
                        t: "जितना उपयोग रहा उतनी सत्ता उत्पन्न हो गई। पाँच घंटे उपयोग रहा तो पाँच घंटे सत्ता उत्पन्न हुई। संपूर्ण स्वसत्ता उत्पन्न हो जाए तो भगवान हो जाएगा!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 871,
                        t: "संसार में नहीं रहा किसे कहेंगे? जिसे पर-उपयोग ही नहीं रहता उसे। ‘मैं’ एक क्षणभर के लिए भी संसार में नहीं रहता। जो संसार में नहीं रहते वहाँ मोक्ष मिलता है। उनकी कृपा से क्या नहीं मिल सकता?"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 872,
                        t: "‘ज्ञानी’ कभी भी रुपये गिनने में अपना समय नहीं बिगाड़ते, उसमें उपयोग व्यर्थ जाता है। जहाँ ‘इन्टरेस्ट’ वहाँ पर उपयोग।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 873,
                        t: "दो हेतु के लिए लोग जीते हैं : आत्मार्थ के लिए जीएँ, वैसे तो कुछ ही होते हैं। अन्य सभी लक्ष्मी के लिए जीते हैं। सारा दिन लक्ष्मी, लक्ष्मी और लक्ष्मी!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 874,
                        t: "समाधि कब आएगी? चहेती चीज़ छोड़ देने पर।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 875,
                        t: "लक्ष्मी ‘लिमिटेड’ है और लोगों की माँग ‘अन्लिमिटेड’ है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 876,
                        t: "खाने की ज़रूरत नहीं है? संडास जाने की ज़रूरत नहीं है? ज़रूरत है। वैसे ही लक्ष्मी की भी ज़रूरत है। जैसे संडास बिना याद किए होता है, वैसे लक्ष्मी भी बिना याद किए आती है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 877,
                        t: "कमाई हो तब खेद करना कि कहाँ खर्च करेंगे? और खर्च आए तब मज़बूत हो जाना कि कर्ज चुकाने का संयोग मिला। कमाई, वह ज़िम्मेदारी है और खर्च, वह चुकाने का साधन है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 878,
                        t: "पैसे खर्च हो जाएँगे ऐसी जागृति रख ही नहीं सकते, जिस समय जो काम आ जाए वही सही है। इसलिए पैसा खर्च करने को कहा हुआ है कि जिस से लोभ छूटे, और बार-बार दे सकें।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 879,
                        t: "पैसे गलत रास्ते पर जाएँ तो ‘कंट्रोल’ कर देना और पैसे सही रास्ते पर खर्च हो, तो ‘डीकंट्रोल’ कर देना।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 880,
                        t: "धन का अंतराय कब तक होता है? जब तक कमाने की इच्छा हो, तब तक। धन के प्रति दुर्लक्ष हुआ कि वह ढेरों आएगा।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 881,
                        t: "इच्छा वही परवशता है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 882,
                        t: "जिसे ज़रा-सी भी इच्छा हो तो, वह भगवान ही नहीं कहलाए।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 883,
                        t: "इच्छा पुद्गल करता है उसे दबाएँ कैसे? यदि तू ही इच्छा करता हो तो उसे बंद कर दे न? लेकिन वह ऐसे नहीं होती, अतः इच्छा पुद्गल वस्तु है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 884,
                        t: "इच्छाएँ होती हैं, क्योंकि प्रत्याख्यान नहीं हुए हैं इसलिए। जो स्मृति में आता है, उसके प्रतिक्रमण नहीं किए हैं इसलिए।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 885,
                        t: "जहाँ सूक्ष्म भी इच्छा है, वहाँ ‘वस्तु’ प्राप्त नहीं होती।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 886,
                        t: "‘ज्ञान’ के बिना इच्छाएँ जाती नहीं।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 887,
                        t: "इच्छाओं से ही अंतराय हैं। जैसे-जैसे इच्छाएँ कम होती जाएँगी, वैसे-वैसे अंतराय टूटते जाएँगे। फिर वहाँ सभी वस्तुएँ प्राप्त होंगी।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 888,
                        t: "‘हमें’ एक भी अंतराय क्यों नहीं है? क्योंकि ‘हमारी’ संपूर्ण निरीच्छक दशा है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 889,
                        t: "हमारी एक ही इच्छा है, वह भी अस्त हुई, ‘जगत् कल्याण’ की!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 890,
                        t: "मनुष्य तो परमात्मा ही है। अनंत ऐश्वर्य प्रकट हों, ऐसा है। इच्छा की कि मनुष्य हो जाता है। वर्ना खुद जो चाहे प्राप्त कर सके ऐसा है, लेकिन अंतराय के कारण प्राप्त नहीं कर सकता।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 891,
                        t: "आत्मा और मोक्ष में कितनी दूरी है? मात्र अंतराय जितनी ही।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 892,
                        t: "बिल्कुल नेगेटिव बोले उससे अंतराय पड़ते हैं और पोज़िटिव से अंतराय नहीं पड़ते।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 893,
                        t: "‘हम’ चेतन है और अंतराय निश्चेतन है, इसलिए आखिर में चेतन की ही जय होगी!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 894,
                        t: "जो आँखों से दिखे नहीं, कानों से सुनाई नहीं दे, वह चेतन। जिसे कानों से सुनाई दे, ‘टेलिविज़न’ दिखाई दे, रिकॉर्ड सुनाई दे, वह चेतन नहीं है। चेतन तो दिव्यचक्षु से दिखाई देता है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 895,
                        t: "आत्मा यानी चेतन-परमात्मा। उसके एक भी गुण की नकल हो सके ऐसा नहीं है। जिसकी नकल हो सकती है, वे पुद्गल के गुण हैं। वाणी वह ‘टेप रिकॉर्ड’ है। विचार वे ‘डिस्चार्ज’ हैं। जो ‘डिस्चार्ज’ होता है, वह पुद्गल है!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 896,
                        t: "सारे जगत् को यह भ्रांतिजन्य भान है कि ‘मैं करता हूँ’। वास्तव में तो सभी का ‘डिस्चार्ज’ ही हो रहा है, लेकिन उसका उन्हें भान नहीं है। खुद को खुद का ही भान नहीं है।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 897,
                        t: "‘मैं चंदूभाई हूँ’ वही भ्राँति है और उसीसे चार्ज होता है। चार्ज होना कब बंद होगा? जब ‘मैं कौन हूँ?’ उसका यथातथ्य भान हो जाएगा, तब।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 898,
                        t: "पाँच इन्द्रियों से जो-जो अनुभव में आता है, वह सब ‘डिस्चार्ज’ ही है। यह तो पुण्य के आधार पर खुद की धारणा के अनुसार होता है, तब कहता है, ‘मैंने किया’ और नुकसान होने पर ‘भगवान ने किया’, ऐसा कहता है! वर्ना कहता है कि मेरे ग्रह खराब हैं!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 899,
                        t: "‘चार्ज’ यानी सारे संयोगों का मिलना और ‘डिस्चार्ज’ यानी सारे संयोगों का अस्त होना।"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 900,
                        t: "‘डिस्चार्ज’ तो किसे कहेंगे कि जो खुद की रुचि के बगैर अनिवार्य रूप से करना पड़े, उसे!"
                    },]
                }, {
                    version: "nasb",
                    book: "BOOK_43",
                    verses: [{
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 851,
                        t: "આ જગત 'જેમ છે તેમ' યથાર્થ દેખી શકે, 'રિલેટિવ' અને 'રિયલ' યથાર્થ દેખી શકે તે શુક્લધ્યાન."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 852,
                        t: "મન અને આત્મા તન્મયાકાર થાય, તો જ આર્તધ્યાન કહેવાય. અને જે પોતાને ખબર ના પડે કે આર્તધ્યાન થયું છે. અને આ આર્તધ્યાન થયું તેવી ખબર પડી, તો તે આર્તધ્યાન ના કહેવાય, તો તે મન છે !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 853,
                        t: "શુક્લધ્યાનપૂર્વકની નિર્જરા, એનું ફળ મોક્ષ અને ધર્મધ્યાનપૂર્વકની નિર્જરા એનું ફળ બહુ જબરજસ્ત પુણ્ય હોય ! પુણ્યાનુબંધી પુણ્ય બંધાય !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 854,
                        t: "દેહમાં ધર્મધ્યાન હોય તો જ આત્મામાં શુક્લધ્યાન હોય !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 855,
                        t: "શુદ્ધ ઉપયોગ એટલે સામાના આત્માને અને દેહને જુદા જોઈ શકે તે. 'હું શુદ્ધાત્મા છું' એવું નિરંતર ધ્યાન રહે તે શુકલધ્યાન !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 856,
                        t: "નિરંતર પોતાનું 'શુદ્ધ' જુએ અને બીજાનું 'શુદ્ધ' જુએ, તે શુદ્ધ ઉપયોગ !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 857,
                        t: "શુક્લધ્યાનમાં જગત આખું નિર્દોષ દેખાવાની શરૂઆત થાય, અને ધર્મધ્યાનમાં સામો દોષિત દેખાય છતાં ઠરાવે નિર્દોષ, એનું નામ ધર્મધ્યાન. 'સામાનો શો દોષ છે ? એ તો નિમિત્ત છે. આ મારાં જ કર્મનાં ઉદયથી એ મને ભેગો થયો છે !'"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 858,
                        t: "શુકલધ્યાન પ્રત્યક્ષ મોક્ષનું કારણ છે. ધર્મધ્યાન પરોક્ષ મોક્ષનું કારણ છે. આર્તધ્યાન પશુગતિનું કારણ છે. રૌદ્રધ્યાન નર્કગતિનું કારણ છે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 859,
                        t: "શુક્લધ્યાન' એટલે તત્ત્વસ્વરૂપનું ધ્યાન. 'ધ્યાન' એ સ્વાભાવિક વસ્તુ છે. અને 'શુદ્ધ ઉપયોગ'માં જાગૃતિપૂર્વકનો પુરુષાર્થ કરવો જોઈએ"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 860,
                        t: "આ કોણ કરે છે ? હું કોણ છું ? આ બધું શું છે ? કર્તા કોણ ? આનું નિમિત્ત કોણ ?' આ બધું 'એટ એ ટાઈમ' જેમ છે તેમ હાજર રહે, તે 'શુદ્ધ ઉપયોગ'!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 861,
                        t: "શુદ્ધ ઉપયોગી'ને આ જગતમાં કશું જ અડે એવું નથી."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 862,
                        t: "પોતાના' ઉપયોગમાં ક્યારે કહેવાય ? બધી ઈચ્છા મંદ થઈ જાય ત્યારે !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 863,
                        t: "આખા જગતના તમામ જીવોનું જ્ઞાન એક જ આત્મામાં છે, પણ જે જ્ઞાન અહંકારને ને બધાને જ્ઞેયસ્વરૂપે જોઈ શકે, તે જ્ઞાનને જ ફક્ત 'જ્ઞાન' કહ્યું. પણ એ તો અંશજ્ઞાન છે, પણ ત્યારથી ઉપયોગ કહેવાય. 'જ્ઞાન' જ્યાં છે ત્યાં ઉપયોગ અંશે કે સર્વાંશે હોય."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 864,
                        t: "સંપૂર્ણ 'શુદ્ધ ઉપયોગ' એ 'કેવળજ્ઞાન' !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 865,
                        t: "જ્ઞાન ક્યારેય અજ્ઞાન થતું નથી, પણ ઉપયોગ બદલાય છે એને જ અજ્ઞાન કહ્યું છે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 866,
                        t: "હું ચંદુભાઈ છું' એ શુભાશુભ ઉપયોગ. 'હું શુદ્ધાત્મા છું' એ 'શુદ્ધ ઉપયોગ'. શુભાશુભના ઉપયોગથી સંસારમાં પ્રતિષ્ઠા ઊભી થઈ !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 867,
                        t: "જેને વીતરાગના માર્ગે ચાલવું છે, એણે અશુભમાંથી શુભનો ઉપયોગ રાખવો જોઈએ. અને મોક્ષે જવું હોય, તેણે 'શુદ્ધ ઉપયોગ' રાખવો જોઈએ. મોક્ષે જવું હોય, તેણે શુભાશુભની ભાંજગડમાં પડવું નહીં. બન્ને નિકાલી બાબત રાખવી."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 868,
                        t: "શુદ્ધ ઉપયોગ' એટલે પરમાત્મ સ્વરૂપ."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 869,
                        t: "ઉપયોગ એ જાગૃતિ ગણાય."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 870,
                        t: "જેટલો ઉપયોગ રહ્યો તેટલી સત્તા ઉત્પન્ન થઈ ગઈ. પાંચ કલાક ઉપયોગ રહ્યો તો પાંચ કલાક સત્તા ઉત્પન્ન થઈ. સંપૂર્ણ સ્વસત્તા ઉત્પન્ન થઈ ગઈ તો ભગવાન થઈ ગયો !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 871,
                        t: "સંસારમાં ના રહ્યો કોને કહેવાય ? જેને પર ઉપયોગ જ ના હોય તેને. 'હું' એક ક્ષણવાર પણ સંસારમાં રહેતો નથી. જે સંસારમાં રહેતા ના હોય ત્યાં મોક્ષ મળે. એમની કૃપાથી શું ના મળે ?!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 872,
                        t: "જ્ઞાની' કોઈ દિવસ રૂપિયા ગણવામાં પોતાનો સમય ના બગાડે, એમાં ઉપયોગ વેડફાય. જ્યાં 'ઇન્ટરેસ્ટ', ત્યાં ઉપયોગ !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 873,
                        t: "બે અર્થે લોક જીવે છે : આત્માર્થે જીવે, તે તો કો'ક જ માણસ હોય. બીજાં બધાં લક્ષ્મીના અર્થે જીવે છે. આખો દહાડો લક્ષ્મી, લક્ષ્મી ને લક્ષ્મી !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 874,
                        t: "સમાધિ ક્યારે આવશે ? વહાલી ચીજ વહેતી મૂકાય ત્યારે !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 875,
                        t: "લક્ષ્મી 'લિમિટેડ' છે અને લોકોની માગણી 'અનલિમિટેડ' છે !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 876,
                        t: "ખાવાની જરૂર નથી ? સંડાસ જવાની જરૂર નથી ? જરૂર છે, તેમ લક્ષ્મીની પણ જરૂર છે. જેમ સંડાસ સંભાર્યા સિવાય થાય છે, તેમ લક્ષ્મી પણ સંભાર્યા સિવાય આવે છે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 877,
                        t: "કમાણી હોય, ત્યારે ખેદ કરવાનો કે ક્યાં વાપરીશું ? ને ખર્ચો આવે ત્યારે મજબૂત થવાનું કે દેવું ચૂકવવાનો સંજોગ મળ્યો. કમાણી એ જવાબદારી છે ને ખર્ચો એ ફેડવાનું સાધન છે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 878,
                        t: "પૈસા વપરાઈ જશે એવી જાગૃતિ રખાય જ નહીં, જે વખતે જે ઘસાય તે ખરંુ. તેથી પૈસા વાપરવાનું કહેલું કે જેથી કરીને લોભ છૂટે, ને ફરી ફરી અપાય."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 879,
                        t: "પૈસા ખોટે રસ્તે ગયા તો 'કંટ્રોલ' કરી નાખવો. ને પૈસા સારા રસ્તે વપરાય તો 'ડીકંટ્રોલ' કરી નાખવાનો."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 880,
                        t: "નાણાંના અંતરાય ક્યાં સુધી હોય ? જ્યાં સુધી કમાવાની ઇચ્છા હોય ત્યાં સુધી. નાણાં તરફ દુર્લક્ષ થયું એટલે એ ઢગલેબંધ આવે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 881,
                        t: "ઇચ્છા એ જ પરવશપણું."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 882,
                        t: "જેને કંઈ પણ ઇચ્છા હોય તો તે ભગવાન જ ના કહેવાય !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 883,
                        t: "ઇચ્છાઓ 'પુદ્ગલ કરે છે, તે દબાય શી રીતે ? જો તું ઇચ્છા કરતો હોઉં, તો તેને બંધ કરી દેને ? પણ તે તેમ નથી થતી, માટે ઇચ્છા પુદ્ગલ વસ્તુ છે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 884,
                        t: "ઇચ્છાઓ થાય છે, તે પ્રત્યાખ્યાન નથી થયાં તેથી. સ્મૃતિમાં આવે છે, તે પ્રતિક્રમણ નથી કર્યાં તેથી."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 885,
                        t: "જ્યાં સૂક્ષ્મ પણ ઈચ્છા છે, ત્યાં 'વસ્તુ' પ્રાપ્ત થાય નહીં."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 886,
                        t: "જ્ઞાન' વગર ઈચ્છા જાય નહીં."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 887,
                        t: "ઈચ્છાથી જ અંતરાય છે. જેમ જેમ ઈચ્છા ઘટતી જાય તેમ તેમ અંતરાય તૂટતા જાય. ત્યાં પછી બધી જ વસ્તુઓ પ્રાપ્ત થાય."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 888,
                        t: "અમને' એકેય અંતરાય કેમ નથી ? કારણ કે 'અમને' સંપૂર્ણ નિર્ઇચ્છક દશા છે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 889,
                        t: "અમારે' એક જ ઇચ્છા હોય, તેય આથમતી, 'જગતકલ્યાણની' !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 890,
                        t: "મનુષ્ય તો પરમાત્મા જ છે. અનંત ઐશ્વર્ય પ્રગટ થાય તેમ છે. ઇચ્છા કરી કે મનુષ્ય થઈ ગયો ! નહીં તો પોતે જે ચાહે તે મેળવી શકે તેમ છે. પણ અંતરાયને લીધે નથી મેળવી શકતો."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 891,
                        t: "આત્માને અને મોક્ષને કેટલું દૂર છે ? માત્ર અંતરાય એટલું જ."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 892,
                        t: "બિલકુલ' નેગેટિવ બોલે, તેના અંતરાય પડે ને 'પોઝિટિવ'ના અંતરાય ના પડે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 893,
                        t: "આપણે' ચેતન અને અંતરાય નિશ્ચેતન, તે છેવટે ચેતનનો જ જય થાય !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 894,
                        t: "આંખે દેખાય નહીં, કાને સંભળાય નહીં, એ ચેતન. કાને સંભળાય, 'ટેલિવિઝન' દેખાય, 'રેકર્ડ' સંભળાય એ ચેતન નથી. ચેતન તો દિવ્યચક્ષુથી દેખાય."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 895,
                        t: "આત્મા એટલે ચેતન-પરમાત્મા. તેનો એક પણ ગુણ નકલ થઈ શકે તેમ જ નથી. જે નકલ થાય છે તે પુદ્ગલના ગુણો છે. વાણી એ 'ટેપરેકર્ડ' છે. વિચાર એ 'ડિસ્ચાર્જ' છે. જે 'ડિસ્ચાર્જ' થાય છે, એ પુદ્ગલ છે !"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 896,
                        t: "આખા જગતને 'હું કરંુ છું' એ ભ્રાંતિજન્ય ભાન છે. ખરી રીતે તો બધાનું 'ડિસ્ચાર્જ' જ થઈ રહ્યું છે, પણ તેનું તેને ભાન નથી. પોતાને 'પોતાનું' જ ભાન નથી."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 897,
                        t: "'હું ચંદુભાઈ છું' એ જ ભ્રાંતિ છે અને એમાંથી 'ચાર્જ' થાય છે. 'ચાર્જ' થતું ક્યારે બંધ થાય ? જ્યારે 'હું કોણ છું' એનું 'જેમ છે તેમ' ભાન થાય ત્યારે."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 898,
                        t: "પાંચ ઇન્દ્રિયોથી જે જે અનુભવમાં આવે છે, તે બધું જ 'ડિસ્ચાર્જ' છે. આ તો પુણ્યના આધારે પોતાના ધાર્યા પ્રમાણે થાય ત્યારે 'મેં કર્યું' કહે, ને ખોટ જાય ત્યારે 'ભગવાને ઘાલી' કહે ! નહીં તો કહે, કે મારા ગ્રહો રાશી છે !!!"
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 899,
                        t: "'ચાર્જ' એટલે સંયોગો બધાનું ભેગું થવું ને 'ડિસ્ચાર્જ' એટલે સંયોગો બધાનો અસ્ત થવો."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 900,
                        t: "ડિસ્ચાર્જ' તો કોને કહેવાય, કે જે પોતાની રૂચિ વગર ફરજિયાત કરવું પડે તે !"
                    },]
                }
            ]

        }

        , getBibleData0: function () {
            return [

                {
                    version: "kjv",
                    book: "BOOK_43",
                    verses: [{
                        id: 43001001,
                        b: 43,
                        c: 1,
                        v: 1,
                        t: "In the beginning was the Word, and the Word was with God, and the Word was God.",
                        tags: [{
                            id: 3,
                            tagName: "holy spirit",
                            note: null,
                            language: "en",
                            createdAt: "1441857753381",
                            privacy: "private",
                            syncID: "r2OnVzU4lb",
                            syncedAt: "1441857753381",
                            isDeleted: "false"
                        }]
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 2,
                        t: "The same was in the beginning with God."
                    }, {
                        id: 43001003,
                        b: 43,
                        c: 1,
                        v: 3,
                        t: "All things were made by him; and without him was not any thing made that was made."
                    }, {
                        id: 43001004,
                        b: 43,
                        c: 1,
                        v: 4,
                        t: "In him was life; and the life was the light of men."
                    }, {
                        id: 43001005,
                        b: 43,
                        c: 1,
                        v: 5,
                        t: "And the light shineth in darkness; and the darkness comprehended it not."
                    }, {
                        id: 43001006,
                        b: 43,
                        c: 1,
                        v: 6,
                        t: "There was a man sent from God, whose name was John."
                    }, {
                        id: 43001007,
                        b: 43,
                        c: 1,
                        v: 7,
                        t: "The same came for a witness, to bear witness of the Light, that all men through him might believe."
                    }, {
                        id: 43001008,
                        b: 43,
                        c: 1,
                        v: 8,
                        t: "He was not that Light, but was sent to bear witness of that Light."
                    }, {
                        id: 43001009,
                        b: 43,
                        c: 1,
                        v: 9,
                        t: "That was the true Light, which lighteth every man that cometh into the world."
                    }, {
                        id: 43001010,
                        b: 43,
                        c: 1,
                        v: 10,
                        t: "He was in the world, and the world was made by him, and the world knew him not."
                    }, {
                        id: 43001011,
                        b: 43,
                        c: 1,
                        v: 11,
                        t: "He came unto his own, and his own received him not."
                    }, {
                        id: 43001012,
                        b: 43,
                        c: 1,
                        v: 12,
                        t: "But as many as received him, to them gave he power to become the sons of God, even to them that believe on his name:"
                    }, {
                        id: 43001013,
                        b: 43,
                        c: 1,
                        v: 13,
                        t: "Which were born, not of blood, nor of the will of the flesh, nor of the will of man, but of God."
                    }, {
                        id: 43001014,
                        b: 43,
                        c: 1,
                        v: 14,
                        t: "And the Word was made flesh, and dwelt among us, (and we beheld his glory, the glory as of the only begotten of the Father,) full of grace and truth."
                    }, {
                        id: 43001015,
                        b: 43,
                        c: 1,
                        v: 15,
                        t: "John bare witness of him, and cried, saying, This was he of whom I spake, He that cometh after me is preferred before me: for he was before me."
                    }, {
                        id: 43001016,
                        b: 43,
                        c: 1,
                        v: 16,
                        t: "And of his fulness have all we received, and grace for grace."
                    }, {
                        id: 43001017,
                        b: 43,
                        c: 1,
                        v: 17,
                        t: "For the law was given by Moses, but grace and truth came by Jesus Christ."
                    }, {
                        id: 43001018,
                        b: 43,
                        c: 1,
                        v: 18,
                        t: "No man hath seen God at any time, the only begotten Son, which is in the bosom of the Father, he hath declared him."
                    }, {
                        id: 43001019,
                        b: 43,
                        c: 1,
                        v: 19,
                        t: "And this is the record of John, when the Jews sent priests and Levites from Jerusalem to ask him, Who art thou?"
                    }, {
                        id: 43001020,
                        b: 43,
                        c: 1,
                        v: 20,
                        t: "And he confessed, and denied not; but confessed, I am not the Christ."
                    }, {
                        id: 43001021,
                        b: 43,
                        c: 1,
                        v: 21,
                        t: "And they asked him, What then? Art thou Elias? And he saith, I am not. Art thou that prophet? And he answered, No."
                    }, {
                        id: 43001022,
                        b: 43,
                        c: 1,
                        v: 22,
                        t: "Then said they unto him, Who art thou? that we may give an answer to them that sent us. What sayest thou of thyself?"
                    }, {
                        id: 43001023,
                        b: 43,
                        c: 1,
                        v: 23,
                        t: "He said, I am the voice of one crying in the wilderness, Make straight the way of the Lord, as said the prophet Esaias."
                    }, {
                        id: 43001024,
                        b: 43,
                        c: 1,
                        v: 24,
                        t: "And they which were sent were of the Pharisees."
                    }, {
                        id: 43001025,
                        b: 43,
                        c: 1,
                        v: 25,
                        t: "And they asked him, and said unto him, Why baptizest thou then, if thou be not that Christ, nor Elias, neither that prophet?"
                    }, {
                        id: 43001026,
                        b: 43,
                        c: 1,
                        v: 26,
                        t: "John answered them, saying, I baptize with water: but there standeth one among you, whom ye know not;"
                    }, {
                        id: 43001027,
                        b: 43,
                        c: 1,
                        v: 27,
                        t: "He it is, who coming after me is preferred before me, whose shoe's latchet I am not worthy to unloose."
                    }, {
                        id: 43001028,
                        b: 43,
                        c: 1,
                        v: 28,
                        t: "These things were done in Bethabara beyond Jordan, where John was baptizing."
                    }, {
                        id: 43001029,
                        b: 43,
                        c: 1,
                        v: 29,
                        t: "The next day John seeth Jesus coming unto him, and saith, Behold the Lamb of God, which taketh away the sin of the world."
                    }, {
                        id: 43001030,
                        b: 43,
                        c: 1,
                        v: 30,
                        t: "This is he of whom I said, After me cometh a man which is preferred before me: for he was before me."
                    }]
                }, {
                    version: "asv",
                    book: "BOOK_43",
                    verses: [{
                        id: 43001001,
                        b: 43,
                        c: 1,
                        v: 1,
                        t: "In the beginning was the Word, and the Word was with God, and the Word was God."
                    }, {
                        id: 43001002,
                        b: 43,
                        c: 1,
                        v: 2,
                        t: "He was in the beginning with God."
                    }, {
                        id: 43001003,
                        b: 43,
                        c: 1,
                        v: 3,
                        t: "All things came into being through Him, and apart from Him nothing came into being that has come into being."
                    }, {
                        id: 43001004,
                        b: 43,
                        c: 1,
                        v: 4,
                        t: "In Him was life, and the life was the Light of men."
                    }, {
                        id: 43001005,
                        b: 43,
                        c: 1,
                        v: 5,
                        t: "And the light shineth in darkness; and the darkness comprehended it not."
                    }, {
                        id: 43001006,
                        b: 43,
                        c: 1,
                        v: 6,
                        t: "There was a man sent from God, whose name was John"
                    }, {
                        id: 43001007,
                        b: 43,
                        c: 1,
                        v: 7,
                        t: "The same came for a witness, to bear witness of the Light, that all men through him might believe."
                    }, {
                        id: 43001008,
                        b: 43,
                        c: 1,
                        v: 8,
                        t: "He was not that Light, but was sent to bear witness of that Light."
                    }, {
                        id: 43001009,
                        b: 43,
                        c: 1,
                        v: 9,
                        t: "That was the true Light, which lighteth every man that cometh into the world."
                    }, {
                        id: 43001010,
                        b: 43,
                        c: 1,
                        v: 10,
                        t: "He was in the world, and the world was made by him, and the world knew him not."
                    }, {
                        id: 43001011,
                        b: 43,
                        c: 1,
                        v: 11,
                        t: "He came unto his own, and his own received him not."
                    }, {
                        id: 43001012,
                        b: 43,
                        c: 1,
                        v: 12,
                        t: "But as many as received him, to them gave he power to become the sons of God, even to them that believe on his name:"
                    }, {
                        id: 43001013,
                        b: 43,
                        c: 1,
                        v: 13,
                        t: "Which were born, not of blood, nor of the will of the flesh, nor of the will of man, but of God."
                    }, {
                        id: 43001014,
                        b: 43,
                        c: 1,
                        v: 14,
                        t: "And the Word was made flesh, and dwelt among us, (and we beheld his glory, the glory as of the only begotten of the Father,) full of grace and truth."
                    }, {
                        id: 43001015,
                        b: 43,
                        c: 1,
                        v: 15,
                        t: "John bare witness of him, and cried, saying, This was he of whom I spake, He that cometh after me is preferred before me: for he was before me."
                    }, {
                        id: 43001016,
                        b: 43,
                        c: 1,
                        v: 16,
                        t: "And of his fulness have all we received, and grace for grace."
                    }, {
                        id: 43001017,
                        b: 43,
                        c: 1,
                        v: 17,
                        t: "For the law was given by Moses, but grace and truth came by Jesus Christ."
                    }, {
                        id: 43001018,
                        b: 43,
                        c: 1,
                        v: 18,
                        t: "No man hath seen God at any time, the only begotten Son, which is in the bosom of the Father, he hath declared him."
                    }, {
                        id: 43001019,
                        b: 43,
                        c: 1,
                        v: 19,
                        t: "And this is the record of John, when the Jews sent priests and Levites from Jerusalem to ask him, Who art thou?"
                    }, {
                        id: 43001020,
                        b: 43,
                        c: 1,
                        v: 20,
                        t: "And he confessed, and denied not; but confessed, I am not the Christ."
                    }, {
                        id: 43001021,
                        b: 43,
                        c: 1,
                        v: 21,
                        t: "And they asked him, What then? Art thou Elias? And he saith, I am not. Art thou that prophet? And he answered, No."
                    }, {
                        id: 43001022,
                        b: 43,
                        c: 1,
                        v: 22,
                        t: "Then said they unto him, Who art thou? that we may give an answer to them that sent us. What sayest thou of thyself?"
                    }, {
                        id: 43001023,
                        b: 43,
                        c: 1,
                        v: 23,
                        t: "He said, I am the voice of one crying in the wilderness, Make straight the way of the Lord, as said the prophet Esaias."
                    }, {
                        id: 43001024,
                        b: 43,
                        c: 1,
                        v: 24,
                        t: "And they which were sent were of the Pharisees."
                    }, {
                        id: 43001025,
                        b: 43,
                        c: 1,
                        v: 25,
                        t: "And they asked him, and said unto him, Why baptizest thou then, if thou be not that Christ, nor Elias, neither that prophet?"
                    }, {
                        id: 43001026,
                        b: 43,
                        c: 1,
                        v: 26,
                        t: "John answered them, saying, I baptize with water: but there standeth one among you, whom ye know not;"
                    }, {
                        id: 43001027,
                        b: 43,
                        c: 1,
                        v: 27,
                        t: "He it is, who coming after me is preferred before me, whose shoe's latchet I am not worthy to unloose."
                    }, {
                        id: 43001028,
                        b: 43,
                        c: 1,
                        v: 28,
                        t: "These things were done in Bethabara beyond Jordan, where John was baptizing."
                    }, {
                        id: 43001029,
                        b: 43,
                        c: 1,
                        v: 29,
                        t: "The next day John seeth Jesus coming unto him, and saith, Behold the Lamb of God, which taketh away the sin of the world."
                    }, {
                        id: 43001030,
                        b: 43,
                        c: 1,
                        v: 30,
                        t: "This is he of whom I said, After me cometh a man which is preferred before me: for he was before me."
                    }]
                }
            ]
        }

        , books: function () {
            return [{
                b: 43,
                c: 1,
                v: 31
            }, {
                b: 43,
                c: 2,
                v: 25
            }, {
                b: 43,
                c: 3,
                v: 24
            }, {
                b: 43,
                c: 4,
                v: 26
            }, {
                b: 43,
                c: 5,
                v: 32
            }, {
                b: 43,
                c: 6,
                v: 22
            }, {
                b: 43,
                c: 7,
                v: 24
            }, {
                b: 43,
                c: 8,
                v: 22
            }, {
                b: 43,
                c: 9,
                v: 29
            }, {
                b: 43,
                c: 10,
                v: 32
            }, {
                b: 43,
                c: 11,
                v: 32
            }, {
                b: 43,
                c: 12,
                v: 20
            }, {
                b: 43,
                c: 13,
                v: 18
            }, {
                b: 43,
                c: 14,
                v: 24
            }, {
                b: 43,
                c: 15,
                v: 21
            }, {
                b: 43,
                c: 16,
                v: 16
            }, {
                b: 43,
                c: 17,
                v: 27
            }, {
                b: 43,
                c: 18,
                v: 33
            }, {
                b: 43,
                c: 19,
                v: 38
            }, {
                b: 43,
                c: 20,
                v: 18
            }, {
                b: 43,
                c: 21,
                v: 34
            }, {
                b: 43,
                c: 22,
                v: 24
            }, {
                b: 43,
                c: 23,
                v: 20
            }, {
                b: 43,
                c: 24,
                v: 67
            }, {
                b: 43,
                c: 25,
                v: 34
            }, {
                b: 43,
                c: 26,
                v: 35
            }, {
                b: 43,
                c: 27,
                v: 46
            }, {
                b: 43,
                c: 28,
                v: 22
            }, {
                b: 43,
                c: 29,
                v: 35
            }, {
                b: 43,
                c: 30,
                v: 43
            }, {
                b: 43,
                c: 31,
                v: 55
            }, {
                b: 43,
                c: 32,
                v: 32
            }, {
                b: 43,
                c: 33,
                v: 20
            }, {
                b: 43,
                c: 34,
                v: 31
            }, {
                b: 43,
                c: 35,
                v: 29
            }, {
                b: 43,
                c: 36,
                v: 43
            }, {
                b: 43,
                c: 37,
                v: 36
            }, {
                b: 43,
                c: 38,
                v: 30
            }, {
                b: 43,
                c: 39,
                v: 23
            }, {
                b: 43,
                c: 40,
                v: 23
            }, {
                b: 43,
                c: 41,
                v: 57
            }, {
                b: 43,
                c: 42,
                v: 38
            }, {
                b: 43,
                c: 43,
                v: 34
            }, {
                b: 43,
                c: 44,
                v: 34
            }, {
                b: 43,
                c: 45,
                v: 28
            }, {
                b: 43,
                c: 46,
                v: 34
            }, {
                b: 43,
                c: 47,
                v: 31
            }, {
                b: 43,
                c: 48,
                v: 22
            }, {
                b: 43,
                c: 49,
                v: 33
            }, {
                b: 43,
                c: 50,
                v: 26
            }, {
                b: 2,
                c: 1,
                v: 22
            }, {
                b: 2,
                c: 2,
                v: 25
            }, {
                b: 2,
                c: 3,
                v: 22
            }, {
                b: 2,
                c: 4,
                v: 31
            }, {
                b: 2,
                c: 5,
                v: 23
            }, {
                b: 2,
                c: 6,
                v: 30
            }, {
                b: 2,
                c: 7,
                v: 25
            }, {
                b: 2,
                c: 8,
                v: 32
            }, {
                b: 2,
                c: 9,
                v: 35
            }, {
                b: 2,
                c: 10,
                v: 29
            }, {
                b: 2,
                c: 11,
                v: 10
            }, {
                b: 2,
                c: 12,
                v: 51
            }, {
                b: 2,
                c: 13,
                v: 22
            }, {
                b: 2,
                c: 14,
                v: 31
            }, {
                b: 2,
                c: 15,
                v: 27
            }, {
                b: 2,
                c: 16,
                v: 36
            }, {
                b: 2,
                c: 17,
                v: 16
            }, {
                b: 2,
                c: 18,
                v: 27
            }, {
                b: 2,
                c: 19,
                v: 25
            }, {
                b: 2,
                c: 20,
                v: 26
            }, {
                b: 2,
                c: 21,
                v: 36
            }, {
                b: 2,
                c: 22,
                v: 31
            }, {
                b: 2,
                c: 23,
                v: 33
            }, {
                b: 2,
                c: 24,
                v: 18
            }, {
                b: 2,
                c: 25,
                v: 40
            }, {
                b: 2,
                c: 26,
                v: 37
            }, {
                b: 2,
                c: 27,
                v: 21
            }, {
                b: 2,
                c: 28,
                v: 43
            }, {
                b: 2,
                c: 29,
                v: 46
            }, {
                b: 2,
                c: 30,
                v: 38
            }, {
                b: 2,
                c: 31,
                v: 18
            }, {
                b: 2,
                c: 32,
                v: 35
            }, {
                b: 2,
                c: 33,
                v: 23
            }, {
                b: 2,
                c: 34,
                v: 35
            }, {
                b: 2,
                c: 35,
                v: 35
            }, {
                b: 2,
                c: 36,
                v: 38
            }, {
                b: 2,
                c: 37,
                v: 29
            }, {
                b: 2,
                c: 38,
                v: 31
            }, {
                b: 2,
                c: 39,
                v: 43
            }, {
                b: 2,
                c: 40,
                v: 38
            }, {
                b: 3,
                c: 1,
                v: 17
            }, {
                b: 3,
                c: 2,
                v: 16
            }, {
                b: 3,
                c: 3,
                v: 17
            }, {
                b: 3,
                c: 4,
                v: 35
            }, {
                b: 3,
                c: 5,
                v: 19
            }, {
                b: 3,
                c: 6,
                v: 30
            }, {
                b: 3,
                c: 7,
                v: 38
            }, {
                b: 3,
                c: 8,
                v: 36
            }, {
                b: 3,
                c: 9,
                v: 24
            }, {
                b: 3,
                c: 10,
                v: 20
            }, {
                b: 3,
                c: 11,
                v: 47
            }, {
                b: 3,
                c: 12,
                v: 8
            }, {
                b: 3,
                c: 13,
                v: 59
            }, {
                b: 3,
                c: 14,
                v: 57
            }, {
                b: 3,
                c: 15,
                v: 33
            }, {
                b: 3,
                c: 16,
                v: 34
            }, {
                b: 3,
                c: 17,
                v: 16
            }, {
                b: 3,
                c: 18,
                v: 30
            }, {
                b: 3,
                c: 19,
                v: 37
            }, {
                b: 3,
                c: 20,
                v: 27
            }, {
                b: 3,
                c: 21,
                v: 24
            }, {
                b: 3,
                c: 22,
                v: 33
            }, {
                b: 3,
                c: 23,
                v: 44
            }, {
                b: 3,
                c: 24,
                v: 23
            }, {
                b: 3,
                c: 25,
                v: 55
            }, {
                b: 3,
                c: 26,
                v: 46
            }, {
                b: 3,
                c: 27,
                v: 34
            }, {
                b: 4,
                c: 1,
                v: 54
            }, {
                b: 4,
                c: 2,
                v: 34
            }, {
                b: 4,
                c: 3,
                v: 51
            }, {
                b: 4,
                c: 4,
                v: 49
            }, {
                b: 4,
                c: 5,
                v: 31
            }, {
                b: 4,
                c: 6,
                v: 27
            }, {
                b: 4,
                c: 7,
                v: 89
            }, {
                b: 4,
                c: 8,
                v: 26
            }, {
                b: 4,
                c: 9,
                v: 23
            }, {
                b: 4,
                c: 10,
                v: 36
            }, {
                b: 4,
                c: 11,
                v: 35
            }, {
                b: 4,
                c: 12,
                v: 16
            }, {
                b: 4,
                c: 13,
                v: 33
            }, {
                b: 4,
                c: 14,
                v: 45
            }, {
                b: 4,
                c: 15,
                v: 41
            }, {
                b: 4,
                c: 16,
                v: 50
            }, {
                b: 4,
                c: 17,
                v: 13
            }, {
                b: 4,
                c: 18,
                v: 32
            }, {
                b: 4,
                c: 19,
                v: 22
            }, {
                b: 4,
                c: 20,
                v: 29
            }, {
                b: 4,
                c: 21,
                v: 35
            }, {
                b: 4,
                c: 22,
                v: 41
            }, {
                b: 4,
                c: 23,
                v: 30
            }, {
                b: 4,
                c: 24,
                v: 25
            }, {
                b: 4,
                c: 25,
                v: 18
            }, {
                b: 4,
                c: 26,
                v: 65
            }, {
                b: 4,
                c: 27,
                v: 23
            }, {
                b: 4,
                c: 28,
                v: 31
            }, {
                b: 4,
                c: 29,
                v: 40
            }, {
                b: 4,
                c: 30,
                v: 16
            }, {
                b: 4,
                c: 31,
                v: 54
            }, {
                b: 4,
                c: 32,
                v: 42
            }, {
                b: 4,
                c: 33,
                v: 56
            }, {
                b: 4,
                c: 34,
                v: 29
            }, {
                b: 4,
                c: 35,
                v: 34
            }, {
                b: 4,
                c: 36,
                v: 13
            }, {
                b: 5,
                c: 1,
                v: 46
            }, {
                b: 5,
                c: 2,
                v: 37
            }, {
                b: 5,
                c: 3,
                v: 29
            }, {
                b: 5,
                c: 4,
                v: 49
            }, {
                b: 5,
                c: 5,
                v: 33
            }, {
                b: 5,
                c: 6,
                v: 25
            }, {
                b: 5,
                c: 7,
                v: 26
            }, {
                b: 5,
                c: 8,
                v: 20
            }, {
                b: 5,
                c: 9,
                v: 29
            }, {
                b: 5,
                c: 10,
                v: 22
            }, {
                b: 5,
                c: 11,
                v: 32
            }, {
                b: 5,
                c: 12,
                v: 32
            }, {
                b: 5,
                c: 13,
                v: 18
            }, {
                b: 5,
                c: 14,
                v: 29
            }, {
                b: 5,
                c: 15,
                v: 23
            }, {
                b: 5,
                c: 16,
                v: 22
            }, {
                b: 5,
                c: 17,
                v: 20
            }, {
                b: 5,
                c: 18,
                v: 22
            }, {
                b: 5,
                c: 19,
                v: 21
            }, {
                b: 5,
                c: 20,
                v: 20
            }, {
                b: 5,
                c: 21,
                v: 23
            }, {
                b: 5,
                c: 22,
                v: 30
            }, {
                b: 5,
                c: 23,
                v: 25
            }, {
                b: 5,
                c: 24,
                v: 22
            }, {
                b: 5,
                c: 25,
                v: 19
            }, {
                b: 5,
                c: 26,
                v: 19
            }, {
                b: 5,
                c: 27,
                v: 26
            }, {
                b: 5,
                c: 28,
                v: 68
            }, {
                b: 5,
                c: 29,
                v: 29
            }, {
                b: 5,
                c: 30,
                v: 20
            }, {
                b: 5,
                c: 31,
                v: 30
            }, {
                b: 5,
                c: 32,
                v: 52
            }]
        }

        , allTags: function () {
            return [{
                id: 1,
                tagName: "tthhfcv",
                note: null,
                language: "en",
                createdAt: "2015-06-23T03:24:09.766Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 2,
                tagName: "tagtest",
                note: null,
                language: "en",
                createdAt: "2015-06-23T05:42:53.421Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "true"
            }, {
                id: 3,
                tagName: "crazy",
                note: null,
                language: "en",
                createdAt: "2015-06-23T18:09:25.630Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 4,
                tagName: "trst",
                note: null,
                language: "en",
                createdAt: "2015-06-23T18:15:19.452Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 5,
                tagName: "test",
                note: null,
                language: "en",
                createdAt: "2015-06-23T18:29:39.202Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 6,
                tagName: "wow",
                note: null,
                language: "ko",
                createdAt: "2015-06-24T01:25:19.554Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }, {
                id: 7,
                tagName: "네비게이토 성경암송 60구절",
                note: null,
                language: "ko",
                createdAt: "2015-06-24T01:57:43.850Z",
                privacy: "private",
                syncID: 1234567,
                isDeleted: "false"
            }]
        }

        , history: function () {
            return [{
                book: 43,
                chapter: 1,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 2,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 3,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 4,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 5,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 6,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 7,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 8,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 9,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 10,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 11,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 12,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 13,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }, {
                book: 43,
                chapter: 14,
                verse: 5,
                date: "October 19th 2015, 9:43:24 am"
            }]
        }
    }
});

    ovModule.factory("File", function ($cordovaFileTransfer, $cordovaFile, $timeout, Config, Model, ParseFactory) {
    return {
        getTargetPath: function () {
            var targetPath = "";
            return ionic.Platform.isAndroid() ? targetPath = "/data/data/" + Config.getPackageName() + "/databases/" : ionic.Platform.isIOS() && (targetPath = cordova.file.dataDirectory), targetPath
        },
        download: function (filename, successCallback, errorCallback) {
            console.log("download filename: " + filename);
            var targetPath = this.getTargetPath();
            ParseFactory.find({
                className: "BibleVersions",
                equalTo: [{
                    field: "bibleCode",
                    value: filename
                }]
            }, function (result) {
                if ("undefined" != typeof result) {
                    var url = encodeURI(result.get("bibleFile").url()),
                        options = {},
                        trustHosts = !0;
                    $cordovaFileTransfer.download(url, targetPath + filename + ".db", options, trustHosts).then(function (result) {
                        console.log("download " + url + " to " + targetPath + " succeeded : " + angular.toJson(result)), successCallback()
                    }, function (err) {
                        console.log("download error: " + angular.toJson(err))
                    }, function () {
                    })
                } else errorCallback()
            }, function (err) {
                console.log("File.download error: " + angular.toJson(err)), errorCallback()
            })
        },
        getInitData: function ($scope, successCallback, errorCallback) {
            var filesToDownload = [{
                    bibleCode: "bible"
                }, {
                    bibleCode: "kjv"
                }],
                lang = $scope.meta.settings.language;

            filesToDownload.push("ko" === lang ? {
                bibleCode: "krv"
            } : "zh" === lang ? {
                bibleCode: "cuv"
            } : {
                bibleCode: "asv"
            });

            var totalFileSize = 26116589972,
                progressFileSize = 0,
                targetPath = this.getTargetPath();
            $scope.downloadProgress = 0;
            var bibleMeta = Model.fetch("bible_meta");

            bibleMeta.versions = [], bibleMeta.downloads = [];

            var downloadData = function (files) {
                var filesToUse = angular.copy(files),
                    file = filesToUse.pop();
                "undefined" != typeof file && ParseFactory.find({
                    className: "BibleVersions",
                    equalTo: [{
                        field: "bibleCode",
                        value: file.bibleCode
                    }]
                }, function (result) {
                    var url = encodeURI(result.get("bibleFile").url()),
                        trustHosts = !0,
                        options = {};
                    $cordovaFileTransfer.download(url, targetPath + file.bibleCode + ".db", options, trustHosts).then(function (result) {
                        console.log("Parse: download " + url + " to " + targetPath + " succeeded : " + angular.toJson(result));
                        console.log("filesToUse: " + filesToUse);
                        "bible" !== file.bibleCode && -1 == bibleMeta.versions.indexOf(file.bibleCode) && (bibleMeta.versions.push(file.bibleCode), bibleMeta.downloads.push(file.bibleCode)), filesToUse.length > 0 ? downloadData(filesToUse) : ($scope.$$phase ? $scope.downloadProgress = 100 : $scope.$apply(function () {
                            $scope.downloadProgress = 100
                        }), $scope.bibleMeta = Model.save(bibleMeta, "bible_meta"), successCallback())
                    }, function (err) {
                        console.log("Parse: download error: " + angular.toJson(err))
                    }, function (progress) {
                        $timeout(function () {
                            progressFileSize += parseInt(progress.loaded), $scope.downloadProgress = parseInt(progressFileSize / totalFileSize * 100), $scope.downloadProgress > 100 && ($scope.$$phase ? $scope.downloadProgress = 100 : $scope.$apply(function () {
                                $scope.downloadProgress = 100
                            }))
                        })
                    })
                }, function (err) {
                    console.log("Parse error download init data: " + angular.toJson(err)), errorCallback()
                })
            };

            downloadData(filesToDownload)
        }
    }
});

    ovModule.factory("Model", function () {
    return {
        generateKey: function (key) {
            return "ONEVERSE_" + key
        },
        fetch: function (key) {
            console.log("fetch : " + key);
            var fromStorage = window.localStorage[this.generateKey(key)];
            return fromStorage || (fromStorage = this.getSchema(this.generateKey(key)), this.save(fromStorage, key)), angular.fromJson(fromStorage)
        },
        save: function (data, key) {
            console.log("save : " + key), key = this.generateKey(key), window.localStorage[key] = angular.toJson(data)
        },
        getSchema: function (key) {
            return key === this.generateKey("settings") ? {
                language: null,
                theme: "one",
                font: "sans-serif",
                appVersion: "0.0.0",
                sharedCount: 0,
                introVersion: []
            } : key === this.generateKey("device") ? {
                init: !0,
                ios_no_cloud: !0,
                font: 25,
                font_allverse: 20,
                showFooter: !1,
                allverse: 1,
                limitchar: 65,
                showtags: !0
            } : key === this.generateKey("bible_meta") ? {
                versions: ["asv", "kjv"],
                downloads: ["asv", "kjv"],
                version: "kjv",
                book: 43,
                chapter: 1,
                verse: 1
            } : key === this.generateKey("history") ? [] : key === this.generateKey("supportedVersions") ? {} : key === this.generateKey("app") ? {} : key === this.generateKey("sync") ? {} : key === this.generateKey("local") ? {
                bibleListVersion: 0
            } : key === this.generateKey("localBibleVersions") ? {} : key === this.generateKey("supportedVersionsMeta") ? {} : key === this.generateKey("userprofile") ? {} : key === this.generateKey("expiresAt") ? {} : key === this.generateKey("memoryVerses") ? [] : null
        },
        fifo: function (key, jsonData, limit) {
            var fromStorage = this.fetch(key);
            return fromStorage.length > limit && fromStorage.pop(), fromStorage.unshift(jsonData), fromStorage
        },
        collectHistory: function (jsonData) {
            console.log("collectHistory called with : " + angular.toJson(jsonData));
            var key = "history",
                fromStorage = this.fetch(key);
            if (fromStorage.length > 0) {
                var firstItem = fromStorage[0];
                firstItem.book === jsonData.book && firstItem.chapter === jsonData.chapter ? (console.log("book and chapter same"), firstItem.verse = jsonData.verse, firstItem.date = moment().format("MMMM Do YYYY, h:mm:ss a"), fromStorage[0] = firstItem) : fromStorage = this.fifo(key, jsonData, 99)
            } else console.log("not found, so pushing"), fromStorage.push(jsonData);
            return this.save(fromStorage, key), fromStorage
        }
    }
});

    ovModule.factory("ParseFactory", function (Config) {
    return {
        start: function () {
            Parse.initialize(Config.getKey("ps"), Config.getSecret("ps"))
        },
        signUp: function (option, app, successCallback, errorCallback) {
            console.log("parseFactory signUp called");
            var user = new Parse.User, username = (Config.getPlatform(), option.email), password = Config.getPassword(option.email, app.gateway);
            "direct" === option.provider && (password = option.password);
            var getCurrentOrLogin = this.getCurrentOrLogin;
            user.set("username", username), user.set("password", password), user.set("email", username), "undefined" != typeof option.picture && user.set("picture", option.picture), "undefined" != typeof option.name && user.set("name", option.name), "undefined" != typeof option.language && user.set("language", option.language), "undefined" != typeof option.deviceLanguage && user.set("deviceLanguage", option.deviceLanguage), user.set("provider", option.provider), user.signUp(null, {
                success: function (user) {
                    console.log("parseService.signUp - signup succeeded"), console.log("user: " + angular.toJson(user)), successCallback(user)
                }, error: function (user, error) {
                    console.log("parseService.signUp - signup failed"), console.log("error: " + angular.toJson(error)), error.code === Parse.Error.INVALID_SESSION_TOKEN && Parse.User.logOut(), getCurrentOrLogin(option, app, function (user) {
                        successCallback(user)
                    }, function (error) {
                        errorCallback(error)
                    })
                }
            })
        },
        getCurrentOrLogin: function (option, app, successCallback, errorCallback) {
                var user = Parse.User.current(), updateUser = function (option, user) {
                    "undefined" != typeof option.picture && user.set("picture", option.picture), "undefined" != typeof option.name && user.set("name", option.name), "undefined" != typeof option.provider && user.set("provider", option.provider), user.save(null, {
                        success: function () {
                            console.log("user updated")
                        }
                    })
                };
                if (user)console.log("user's username: " + user.get("username")), updateUser(option, user), successCallback(angular.fromJson(user)); else {
                    var username = (Config.getPlatform(), option.email), password = Config.getPassword(option.email, app.gateway);
                    "direct" === option.provider && (password = option.password), Parse.User.logIn(username, password, {
                        success: function (user) {
                            updateUser(option, user), successCallback(user)
                        }, error: function () {
                            errorCallback()
                        }
                    })
                }
        },
        extendPro: function (day, successCallback, errorCallback) {
            var options = {
                className: "UserConfig",
                equalTo: [{field: "uuid", value: uuidIs}, {field: "platform", value: platformIs}]
            };
            this.find(options, function (result) {
                var userConfig = result, expiresAt = userConfig.get("expiresAt");
                console.log("EXTEND_PRO expiresAt: " + expiresAt);
                var expiresAtDate = new Date(expiresAt), today = new Date;
                today > expiresAtDate && (expiresAtDate = today);
                var extended = expiresAtDate.getDate() + day;
                console.log("EXTEND_PRO: " + extended), expiresAtDate.setDate(extended), userConfig.set("expiresAt", expiresAtDate), userConfig.save(), successCallback(expiresAtDate)
            }, function (error) {
                errorCallback(error)
            })
        },
        getConfig: function (successCallback, errorCallback) {
            Parse.Config.get().then(function (config) {
                console.log("app config: " + angular.toJson(config)), successCallback(config)
            }, function (err) {
                errorCallback(err)
            })
        },
        getQuery: function (className) {
            var classObj = Parse.Object.extend(className), query = new Parse.Query(classObj);
            return query
        },
        getQueryForCreate: function (className) {
            var classObj = Parse.Object.extend(className), query = new classObj;
            return query
        },
        find: function (options, successCallback, errorCallback) {
            var query = this.getQuery(options.className);
            angular.forEach(options.equalTo, function (val) {
                query.equalTo(val.field, val.value)
            }), query.first({
                success: function (result) {
                    console.log("Parse: find() - result : " + angular.toJson(result)), angular.isDefined(result) ? successCallback(result) : errorCallback(null)
                }, error: function (err) {
                    errorCallback(err)
                }
            })
        },
        findAll: function (options, successCallback, errorCallback) {
            var query = this.getQuery(options.className);
            angular.isDefined(options.equalTo) && angular.forEach(options.equalTo, function (val) {
                query.equalTo(val.field, val.value)
            }), angular.isDefined(options.fieldValues) && options.fieldValues.length > 0 && query.containsAll(options.field, options.fieldValues), angular.isDefined(options.order) && ("asc" == options.order ? query.ascending(options.orderBy) : query.descending(options.orderBy)), query.find({
                success: function (results) {
                    successCallback(results)
                }, error: function (err) {
                    errorCallback(err)
                }
            })
        },
        save: function (options, successCallback, errorCallback) {
            var query = this.getQueryForCreate(options.className);
            angular.forEach(options.setValues, function (val) {
                query.set(val.field, val.value)
            }), query.save(null, {
                success: function (savedObject) {
                    successCallback(savedObject)
                }, error: function (savedObject, error) {
                    errorCallback(savedObject, error)
                }
            })
        },
        update: function (options) {
            var query = this.getQuery(options.className);
            angular.forEach(options.setValues, function (val) {
                query.set(val.field, val.value)
            }), query.save()
        },
        "delete": function (objectToDelete, successCallback) {
            objectToDelete.destroy({
                success: function () {
                    console.log("Parse: successfully deleted"), successCallback()
                }, error: function (myObject, error) {
                    console.log("Parse: failed to delete - " + angular.toJson(error))
                }
            })
        }
    }
});

    ovModule.factory("Share", function ($cordovaClipboard, $cordovaSocialSharing, $translate, Analytics, Config, UI) {
    return {
        toApp: function (message, subject, link, hashtags, successCallback, errorCallback) {
            var file = null;
            Analytics.track("ShareToApp", {
                message: message + " " + hashtags,
                subject: subject,
                uuid: uuidIs
            }), isDevice ? $cordovaSocialSharing.share(message + " " + hashtags, subject, file, link).then(function (result) {
                console.log("Share toApp success: " + angular.toJson(result)), successCallback(result)
            }, function (err) {
                console.log("Share toApp error: " + angular.toJson(err)), errorCallback(err)
            }) : console.log("Social toApp triggered")
        },
        toService: function (provider, link, hashtags, callback) {
            var message = "";
            "twitter" === provider ? isDevice ? (message = $translate.instant("SHARE_MSG_SHORT") + " " + hashtags + " @codeinfaith", $cordovaSocialSharing.shareViaTwitter(message, null, link).then(function (result) {
                console.log("share to twitter: " + angular.toJson(result)), Analytics.track("ShareToTwitter", {
                    message: message,
                    uuid: uuidIs
                }), console.log("after tracking"), callback()
            }, function (err) {
                console.log("share to twitter failed: " + angular.toJson(err)), UI.toast("SHARE_FAILED_SHARE", "short", "center")
            })) : (console.log(">>> TWITTER share triggered"), callback()) : "facebook" === provider && (isDevice ? (message = $translate.instant("SHARE_MSG_LONG") + " " + hashtags + " @oneversebible", $cordovaSocialSharing.shareViaFacebook(message, null, link).then(function (result) {
                console.log("share to facebook: " + angular.toJson(result)), Analytics.track("ShareToFacebook", {
                    message: message,
                    uuid: uuidIs
                }), callback()
            }, function (err) {
                console.log("share to facebook failed: " + angular.toJson(err)), UI.toast("SHARE_FAILED_SHARE", "short", "center")
            })) : (console.log(">>> FACEBOOK share triggered"), callback()))
        },
        toClipboard: function (message, link, successCallback, errorCallback) {
            Analytics.track("ShareToClipboard", {
                message: message,
                uuid: uuidIs
            }), isDevice && $cordovaClipboard.copy(message + " " + link).then(function () {
                UI.toast("MSG_CLIPBOARD_SUCCESS", "short", "bottom"), successCallback()
            }, function () {
                UI.toast("MSG_CLIPBOARD_ERROR", "short", "bottom"), errorCallback()
            })
        },
        toFacebook: function (message, subject, successCallback, errorCallback) {
            var link = Config.getStoreUrl(),
                options = {
                    method: "feed",
                    link: link,
                    caption: message
                };
            this.toClipboard(message, function () {
            }, function () {
            }), facebookConnectPlugin.showDialog(options, function (result) {
                console.log("Share to FB success: " + angular.toJson(result)), successCallback(result)
            }, function (error) {
                console.log("Share to FB error: " + angular.toJson(error)), facebookConnectPlugin.login(["email"], function (resultLogin) {
                    "connected" === resultLogin.status && facebookConnectPlugin.showDialog(options, function (secondResult) {
                        successCallback(secondResult)
                    }, function (secondError) {
                        errorCallback(secondError)
                    })
                })
            })
        }
    }
});

    ovModule.factory("Speech", function (Config) {
    return {
        start: function (lang, successCallback, errorCallback) {
            if (isDevice) {
                var recognition = new SpeechRecognition;
                return recognition.lang = Config.getSpeechLanguage(lang), recognition.onerror = function () {
                    console.log("onerror event"), errorCallback()
                }, recognition.onresult = function (event) {
                    if (event.results.length > 0) {
                        var captured = event.results[0][0].transcript;
                        console.log("speech captured: " + captured), successCallback(captured)
                    }
                }, recognition
            }
            return null
        },
        process: function (lang, transcript, successCallback, errorCallback) {
            var pre = "",
                matched = null,
                selectedBookname = null,
                selectedChapter = null,
                selectedVerse = null,
                bookIndex = 0;
            return console.log("original transcript: " + transcript), "en" === lang ? (pre = -1 !== transcript.indexOf("1st") ? "1" : -1 !== transcript.indexOf("2nd") ? "2" : "", transcript = transcript.replace("1st", ""), transcript = transcript.replace("2nd", ""), matched = transcript.match(/\d+/g), null !== matched ? (transcript = transcript.trim(), console.log("transcript.split(' '): " + transcript.split(" ")), selectedBookname = transcript.split(" ")[0], pre.length > 0 && (selectedBookname = pre + " " + selectedBookname), selectedChapter = matched[0], selectedVerse = "undefined" == typeof matched[1] ? 1 : matched[1], console.log("selectedBookname: " + selectedBookname), console.log("selectedChapter: " + selectedChapter), console.log("selectedVerse: " + selectedVerse), bookIndex = Config.getIndexByBookname(lang, selectedBookname), successCallback(bookIndex, parseInt(selectedChapter), parseInt(selectedVerse))) : errorCallback()) : "ko" === lang && (transcript = transcript.replace(/ /g, ""), console.log("transcript: " + transcript), matched = transcript.match(/\d+/g), null !== matched ? (selectedBookname = transcript.substring(0, transcript.indexOf(matched[0])), selectedChapter = matched[0], selectedVerse = "undefined" == typeof matched[1] ? 1 : matched[1], console.log("selectedBookname: " + selectedBookname), console.log("selectedChapter: " + selectedChapter), console.log("selectedVerse: " + selectedVerse), bookIndex = Config.getIndexByBookname(lang, selectedBookname), successCallback(bookIndex, parseInt(selectedChapter), parseInt(selectedVerse))) : errorCallback()), !1
        }
    }
});

    ovModule.factory("UI", function ($cordovaDialogs, $cordovaToast, $cordovaVibration, $ionicActionSheet, $ionicLoading, $ionicModal, $ionicPopup, $rootScope, $timeout, $translate) {
    return {
        toast: function (msg, duration, position) {
            console.log("toast: " + $translate.instant(msg) + " duration: " + duration + " position: " + position), isDevice && $cordovaToast.show($translate.instant(msg), duration, position)
        },
        openModal: function (templateUrl, scope, callback) {
            console.log("openModal called"), $ionicModal.fromTemplateUrl(templateUrl, {
                scope: scope,
                animation: "slide-in-up",
                hardwareBackButtonClose: !1
            }).then(function (modal) {
                callback(modal)
            })
        },
        openModalFixed: function (templateUrl, scope, callback) {
            console.log("openModalFixed called"), $ionicModal.fromTemplateUrl(templateUrl, {
                scope: scope,
                animation: "slide-in-up",
                hardwareBackButtonClose: !1,
                backdropClickToClose: !1
            }).then(function (modal) {
                callback(modal)
            })
        },
        simpleAlert: function (msg, title, btnOk, successCallback) {
            $cordovaDialogs.alert($translate.instant(msg), $translate.instant(title), $translate.instant(btnOk)).then(successCallback)
        },
        simpleConfirm: function (msg, title, successCallback) {
            $cordovaDialogs.confirm($translate.instant(msg), $translate.instant(title), [$translate.instant("OK"), $translate.instant("CANCEL")]).then(function (buttonIndex) {
                1 === buttonIndex && successCallback()
            })
        },
        alert: function (title, templateUrl, scope) {
            return $ionicPopup.alert({
                title: $translate.instant(title),
                templateUrl: templateUrl,
                scope: scope,
                okText: $translate.instant("OK"),
                cssClass: "oneverse-popup"
            })
        },
        customAlert: function (title, templateUrl, scope) {
            return $ionicPopup.show({
                title: $translate.instant(title),
                scope: scope,
                templateUrl: templateUrl,
                cssClass: "oneverse-popup"
            })
        },
        confirm: function (title, templateUrl, okText, scope, callback) {
            var confirmBox = $ionicPopup.confirm({
                title: $translate.instant(title),
                templateUrl: templateUrl,
                cssClass: "oneverse-popup",
                scope: scope,
                okText: $translate.instant(okText),
                cancelText: $translate.instant("CANCEL")
            });
            return confirmBox.then(function (res) {
                res ? callback() : confirmBox.close()
            }), confirmBox
        },
        showSpinner: function () {
            $rootScope.showingSpinner = !0, $ionicLoading.show({
                template: "<div class='global-spinner'><div><img src='img/logo200x200.png' style='width: 32px;' /></div><div><ion-spinner icon='circles' class='spinner-calm'></ion-spinner></div></div>"
            })
        },
        hideSpinner: function () {
            $rootScope.showingSpinner = !1, $ionicLoading.hide()
        },
        showStarred: function () {
            $ionicLoading.show({
                template: "<div class='global-spinner'><div><span class='icon ion-android-star star-effect text-xlarge'></span></div></div>"
            })
        },
        hideStarred: function () {
            $timeout(function () {
                $ionicLoading.hide()
            }, 1e3)
        },
        vibrate: function (duration) {
            console.log("vibrated"), isDevice && $cordovaVibration.vibrate(duration)
        },
        actionSheet: function (titleText, cancelText, buttons, buttonsCallback) {
            var sheet = $ionicActionSheet.show({
                buttons: buttons,
                titleText: $translate.instant(titleText),
                cancelText: $translate.instant(cancelText),
                buttonClicked: function (index) {
                    return buttonsCallback(index), !0
                }
            });
            return sheet
        }
    }
});

    ovModule.factory("Util", function () {
    return {
        shuffle: function (o) {
            for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
            return o
        },
        randomPick: function (arr) {
            return arr[Math.floor(Math.random() * arr.length)]
        }
    }
});

// Filters

    ovModule.filter("prouserLimit", function () {
    return function (input, isPro, isProPurchased) {
        return input;
        //if (isPro || isProPurchased)return input;
        //var collected = [];
        //return angular.forEach(input, function (val, key) {
        //    10 > key && collected.push(val)
        //}), collected
    }
})

    .filter("prouserLimitExceeded", function ($filter, $translate) {
        return function (input, isPro, isProPurchased) {
            return "";
            //return isPro || isProPurchased ? "" : "undefined" != typeof input && input.length > 10 ? "<div class='item text-center item-text-wrap'><div class='item-note chosen'>" + $translate.instant("YOU_HAVE_MORE_LIST") + "</div></div>" : ""
        }
    })

    .filter("range", function () {
        return function (input, total) {
            total = parseInt(total);
            for (var i = 1; total >= i; i++) input.push(i);
            return input
        }
    })

    .filter("getThemeName", function ($filter, Config) {
        return function (input) {
            var themes = Config.getThemes(),
                themeName = "";
            return angular.forEach(themes, function (val) {
                val.code === input && (themeName = val.name)
            }), themeName
        }
    })

    .filter("bytesToMB", function () {
        return function (bytes) {
            if (0 === bytes) return "0 B";
            var k = 1e3,
                sizes = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
                i = Math.floor(Math.log(bytes) / Math.log(k));
            return (bytes / Math.pow(k, i)).toPrecision(3) + " " + sizes[i]
        }
    })

    .filter("checkExistence", function ($filter, $translate) {
        return function (input) {
            return input.length > 0 ? input : $translate.instant("NONE_FOUND")
        }
    })

    .filter("biblename", function () {
        return function (input) {
            var mapping = {
                kjv: "King James Version",
                asv: "American Standard Version",
                nasb: "New American Standard Bible",
                niv: "New International Version",
                krv: "개역한글",
                nkrv: "개역개정",
                cuv: "中文和合本 (Simplified)",
                rvr1960: "Reina-Valera 1960"
            };
            return mapping[input]
        }
    })

    .filter("copyright", function () {
        return function (input) {
            var mapping = {
                kjv: "Crown Copyright in UK",
                asv: "Public Domain",
                nasb: "The Lockman Foundation",
                niv: "Biblica",
                krv: "대한성서공회",
                nkrv: "대한성서공회",
                cuv: "Public Domain",
                rvr1960: "United Bible Societies"
            };
            return mapping[input]
        }
    })

    .filter("getBookName", function () {
        return function (input) {
            var bookNumber = parseInt(input) < 10 ? "0" + input : input;
            return "BOOK_" + bookNumber
        }
    })

    .filter("bookFilter", function ($filter, $ionicScrollDelegate, $translate) {
        return function (items, field) {
            if ("undefined" == typeof field || 0 === field.length) return items;
            var result = {};
            return angular.forEach(items, function (value, key) {
                (-1 !== $translate.instant(key).toLowerCase().indexOf(field.toLowerCase()) || -1 !== $translate.instant("ABBR_" + key).toLowerCase().indexOf(field.toLowerCase())) && (result[key] = value)
            }), $ionicScrollDelegate.$getByHandle("book").scrollTop([!0]), result
        }
    })

    .filter("humanize", function () {
        return function (input) {
            return moment(input, "MMMM Do YYYY, h:mm:ss a").fromNow()
        }
    })

    .filter("fromNow", function () {
        return function (input) {
            return moment(input).fromNow()
        }
    })

    .filter("toNow", function () {
        return function (input) {
            return moment(input).toNow()
        }
    })

    .filter("daysLeft", function () {
        return function (input) {
            var now = new Date,
                till = new Date(input),
                days = moment(till).diff(now, "days");
            return days > 0 ? days : 0
        }
    })

    .filter("daysLeftLabel", function () {
        return function (input) {
            return 0 === input ? "PRO_EXPIRED" : 1 === input ? "DAY_LEFT" : "DAYS_LEFT"
        }
    })

    .filter("calendar", function () {
        return function (input) {
            return moment(input).calendar()
        }
    })

    .filter("highlightKeyword", function () {
        return function (input, field, fields) {
            if ("undefined" != typeof field && field.length > 0) {
                var searchPattern = new RegExp("(" + field + ")", "ig");
                input = input.replace(searchPattern, "<span class='assertive'>$1</span>")
            }
            return angular.forEach(fields, function (field) {
                if ("undefined" != typeof field.keyword && field.keyword.length > 0) {
                    var searchPattern = new RegExp("(" + field.keyword + ")", "ig");
                    input = input.replace(searchPattern, "<span class='assertive'>$1</span>")
                }
            }), input
        }
    })

    .filter("reverse", function () {
        return function (items) {
            return "undefined" != typeof items ? items.slice().reverse() : []
        }
    })

    .filter("getOriginalLangName", function ($filter, Config) {
        return function (input) {
            return Config.getOriginalLangNames(input)
        }
    });



    ovModule.controller("booksCtrl", function ($ionicPlatform, $ionicScrollDelegate, $location, $rootScope, $scope, $timeout, $window, UI) {
        $scope.setHeight = function () {
            var height = 0;
            return isIOS && (height = 225), {
                height: $window.innerHeight - height + "px"
            }
        }

        console.log("$scope.setHeight: " + angular.toJson($scope.setHeight()));

        $scope.$on("copy-to-cloned", function () {
            console.log("copy-to-cloned called"), $scope.cloned = {
                bibleBook: angular.copy($rootScope.bibleBook),
                bibleChapter: angular.copy($rootScope.bibleChapter),
                bibleVerse: angular.copy($rootScope.currentVerse + 1)
            }
        });

        $scope.$broadcast("copy-to-cloned");
        console.log("$scope.$parent.bibleData.books: " + angular.toJson($scope.$parent.bibleData.books));
        console.log("$scope.cloned: " + angular.toJson($scope.cloned));
        $scope.totalChapters = Object.keys($scope.$parent.bibleData.books[$scope.cloned.bibleBook].chapters).length;
        $scope.totalVerses = $scope.$parent.bibleData.books[$scope.cloned.bibleBook].chapters["chapter_" + $scope.cloned.bibleChapter];
        $timeout(function () {
        angular.forEach(["chapter-selection-" + $scope.cloned.bibleChapter, "verse-selection-" + $scope.cloned.bibleVerse, "book-selection-" + $scope.cloned.bibleBook], function (val) {
            console.log("val: " + val);
            var elem = document.getElementById(val),
                handleKey = val.split("-")[0];
            console.log("elem: " + elem.id), console.log("offsetTop: " + elem.offsetTop), $ionicScrollDelegate.$getByHandle(handleKey).scrollTo(0, elem.offsetTop, [!0])
        })
    });
        $scope.closeBooks = function () {
        console.log("closeBooks called"), $location.url("home")
    };
        $scope.doneBooks = function () {
        $scope.$parent.bibleMeta.book = parseInt($scope.cloned.bibleBook.replace("BOOK_", "")), $scope.$parent.bibleMeta.chapter = $scope.cloned.bibleChapter, $scope.$parent.bibleMeta.verse = $scope.cloned.bibleVerse, console.log("$scope.$parent.bibleMeta: " + angular.toJson($scope.$parent.bibleMeta)), $scope.closeBooks()
    };
        $scope.selectBook = function (book_id) {
        console.log("select book tapped"), $scope.cloned.bibleBook = book_id, $scope.cloned.bibleChapter = 1, $scope.cloned.bibleVerse = 1, $scope.totalChapters = Object.keys($scope.$parent.bibleData.books[book_id].chapters).length, $scope.selectChapter($scope.cloned.bibleChapter), $ionicScrollDelegate.$getByHandle("chapter").scrollTop([!0]), $ionicScrollDelegate.$getByHandle("verse").scrollTop([!0])
    };
        $scope.selectChapter = function (chapter) {
        $scope.cloned.bibleChapter = chapter, $scope.cloned.bibleVerse = 1, $scope.totalVerses = $scope.$parent.bibleData.books[$scope.cloned.bibleBook].chapters["chapter_" + chapter], $ionicScrollDelegate.$getByHandle("verse").scrollTop([!0])
    };

        var updateBible = function () {
            console.log("updateBible called");
                $scope.$parent.bibleMeta.book = parseInt($scope.cloned.bibleBook.replace("BOOK_", ""));
                $scope.$parent.bibleMeta.chapter = $scope.cloned.bibleChapter;
                $scope.$parent.bibleMeta.verse = $scope.cloned.bibleVerse;
                $rootScope.bibleBook = $scope.cloned.bibleBook;
                $rootScope.bibleChapter = $scope.$parent.bibleMeta.chapter;
                $rootScope.currentVerse = $scope.$parent.bibleMeta.verse - 1;
        };

        $scope.selectVerse = function (verse) {
            $scope.cloned.bibleVerse = verse, updateBible(), $scope.closeBooks()
        }

        $scope.nextChapter = function () {
            $scope.$broadcast("next-chapter")
        }

        $scope.prevChapter = function () {
            $scope.$broadcast("prev-chapter")
        }

        $scope.$on("next-chapter", function () {
            console.log("next chapter called"), $scope.$broadcast("copy-to-cloned"), "undefined" != typeof $scope.totalChapters && ($scope.totalChapters = Object.keys($scope.$parent.bibleData.books[$scope.cloned.bibleBook].chapters).length), $scope.cloned.bibleChapter < $scope.totalChapters ? ($scope.cloned.bibleChapter += 1, $scope.cloned.bibleVerse = 1, updateBible(), $scope.closeBooks()) : UI.toast("MSG_END_OF_CHAPTER", "short", "center")
        })

        $scope.$on("prev-chapter", function () {
            console.log("prev chapter called"), $scope.cloned.bibleChapter > 1 ? ($scope.cloned.bibleChapter -= 1, $scope.cloned.bibleVerse = 1, updateBible(), $scope.closeBooks()) : UI.toast("MSG_FIRST_CHAPTER", "short", "center")
        })
    });

    ovModule.controller("compareAllCtrl", function ($location, $scope, $timeout, DB) {
        $scope.allVersions = [];
        var loadAllBibleFromDB = function () {
            var bibleMeta = $scope.$parent.bibleMeta;
            angular.forEach(bibleMeta.downloads, function (version) {
                var db = DB.open(version);
                DB.select(db, "t_" + version, "id, b, c, v, t", "WHERE b = " + bibleMeta.book + " and c = " + bibleMeta.chapter + " and v = " + bibleMeta.verse, function (result) {
                    result.length > 0 && $scope.allVersions.push({
                        version: version,
                        data: result[0],
                        order: $scope.$parent.meta.mapBibleCodeOrder[version]
                    })
                })
            })
        };
        $timeout(function () {
            console.log(angular.toJson($scope.allVersions))
        }, 5e3), isDevice && loadAllBibleFromDB(), $scope.closeCompareAll = function () {
            $location.url("home")
        }
    });

    ovModule.controller("globalCtrl", function ($cordovaAppVersion, $cordovaDevice, $cordovaFileTransfer, $cordovaInAppBrowser, $cordovaNetwork, $css, $filter, $ionicBackdrop, $ionicPlatform, $ionicSideMenuDelegate, $ionicSlideBoxDelegate, $ionicScrollDelegate, $location, $log, $rootScope, $scope, $timeout, $translate, $window, Analytics, Bible, Config, DB, Debug, File, Model, ParseFactory, Share, Speech, UI, Util) {

        debugger;
        var platformStyle = "css/style.android.min.css";

        if (isIOS && (platformStyle = "css/style.ios.min.css")
                , $css.bind({
                href: platformStyle
            }, $scope)
                , $scope.meta = {}
                , $scope.meta.settings = Model.fetch("settings")
                , "number" == typeof $scope.meta.settings.introVersion) {
            for (var i = 1; i <= parseInt($scope.meta.settings.introVersion); i++)
                1 === i && ($scope.meta.settings.introVersion = []), $scope.meta.settings.introVersion.push(i);
            Model.save($scope.meta.settings, "settings")
        }


        $scope.meta.app = Model.fetch("app");
        $scope.meta.sync = Model.fetch("sync");
        $scope.meta.device = Model.fetch("device");
        $rootScope.allverse = $scope.meta.device.allverse;
        $scope.meta.device.isIOS = isIOS;
        $scope.meta.localBibleVersions = Model.fetch("localBibleVersions");
        $scope.meta.supportedVersionsMeta = Model.fetch("supportedVersionsMeta");
        $scope.meta.memoryVerses = Model.fetch("memoryVerses");
        $scope.bibleMeta = Model.fetch("bible_meta");
        $rootScope.renderBibleCalled = !1;

        var continueRenderBible = !0;
        "undefined" == typeof $scope.meta.device.limitchar && ($scope.meta.device.limitchar = Model.getSchema(Model.generateKey("device")).limitchar)
            , "undefined" == typeof $scope.meta.device.showtags && ($scope.meta.device.showtags = !0)
            , "undefined" == typeof $scope.meta.device.font_allverse && ($scope.meta.device.font_allverse = 16)
            , $scope.meta.device.allverse === !0 ? $scope.meta.device.allverse = 2 : $scope.meta.device.allverse === !1 && ($scope.meta.device.allverse = 1)
            , $scope.meta.searchbook = "all"
            , $scope.meta.searchbooks = [{
            code: "all",
            name: "ALL_TESTAMENT"
        }, {
            code: "new",
            name: "NEW_TESTAMENT"
        }, {
            code: "old",
            name: "OLD_TESTAMENT"
        }]
            , $scope.meta.advancedSearches = [{
            keyword: "",
            classifier: "AND"
        }]
            , $scope.meta.advancedClassifiers = [{
            code: "AND",
            name: "AND"
        }, {
            code: "OR",
            name: "OR"
        }, {
            code: "NOT",
            name: "NOT"
        }]
            , $scope.meta.showAdvPanel = !1;

        for (var j = 1; 66 >= j; j++)
            $scope.meta.searchbooks.push({
                code: j,
                name: "BOOK_" + (10 > j ? "0" + j : j)
            });

        $scope.meta.user = null;
        $scope.meta.user_picture = Model.fetch("user_picture");
        $scope.meta.user_email = Model.fetch("user_email");
        $rootScope.userProfile = Model.fetch("userprofile");
        $rootScope.showingSpinner = !1;
        console.log("DATA: $rootScope.userProfile - " + angular.toJson($rootScope.userProfile));
        $rootScope.history = Model.fetch("history");
        isDevice || ($rootScope.history = Debug.history());
        moment.locale($scope.meta.settings.language);
        $css.bind({
            href: "css/font." + $scope.meta.settings.font + ".min.css"
        }, $scope);
        $rootScope.userProfile.isPro || $rootScope.userProfile.isProPurchased || -1 !== ["one", "two"].indexOf($scope.meta.settings.theme) || ($scope.meta.settings.theme = "one", Model.save($scope.meta.settings, "settings"));
        $css.bind({
            href: "css/theme." + $scope.meta.settings.theme + ".min.css"
        }, $scope);

        var updateReady = function (bibleCode, version) {
            var localBibleVersions = Model.fetch("localBibleVersions"),
                localVersion = localBibleVersions.hasOwnProperty(bibleCode) ? localBibleVersions[bibleCode] : null;
            return null !== localVersion && version !== parseInt(localVersion) ? !0 : !1
        };

        $scope.meta.mapBibleCodeOrder = {};

        var processSupportedVersion = function (results) {
            var collected = {};
            return angular.forEach(results, function (val) {
                0 !== val.get("order") && (collected[val.get("order")] = [])
            }), angular.forEach(results, function (val) {
                if ($scope.meta.mapBibleCodeOrder[val.get("bibleCode")] = val.get("order"), 0 !== val.get("order")) {
                    $scope.meta.localBibleVersions.hasOwnProperty(val.get("bibleCode")) || ($scope.meta.localBibleVersions[val.get("bibleCode")] = val.get("version")), $scope.meta.supportedVersionsMeta[val.get("bibleCode")] = {
                        language: val.get("language"),
                        languageCode: val.get("languageCode"),
                        bibleName: val.get("bibleName"),
                        supported: val.get("supported")
                    };
                    var versionObj = {
                        bibleCode: val.get("bibleCode"),
                        is_downloading: !1,
                        supported: val.get("supported"),
                        isMerchant: val.get("isMerchant"),
                        language: val.get("language"),
                        languageCode: val.get("languageCode"),
                        version: val.get("version"),
                        bibleName: val.get("bibleName"),
                        copyright: val.get("copyright"),
                        iap: val.get("iap"),
                        is_update_ready: updateReady(val.get("bibleCode"), val.get("version"))
                    };
                    console.log("$rootScope.userProfile.forcePro - " + $rootScope.userProfile.forcePro), "undefined" != typeof $rootScope.userProfile.forcePro && $rootScope.userProfile.forcePro && (versionObj.isMerchant = !1, versionObj.iap = ""), collected[val.get("order")].push(versionObj)
                }
            }), console.log("bible versions collected: " + angular.toJson(collected)), collected
        };

        $scope.setUserProfile = function (expiresAt) {
            console.log("setUserProfile called : " + angular.toJson(expiresAt));
            try {
                $rootScope.$apply(function () {
                    $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt)
                })
            } catch (e) {
                $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt)
            }
            console.log("$rootScope.userProfile.expiresAt: " + $rootScope.userProfile.expiresAt), $rootScope.userProfile.isPro = $rootScope.userProfile.expiresAt > 0, Model.save($rootScope.userProfile, "userprofile"), 0 === $rootScope.userProfile.expiresAt && !$scope.meta.device.init && $scope.meta.settings.introVersion.length > 0 && !$rootScope.userProfile.isProPurchased && $scope.purchaseOrShareToast()
        };

        var showIntro = function () {
            UI.openModalFixed("templates/modules/modal-intro.html", $scope, function (modal) {
                $ionicSlideBoxDelegate.update();
                $scope.introModal = modal;
                $scope.introModal.show();
                var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox");
                introSlidebox.enableSlide(!1);
            });
        };
        $scope.nextIntro = function () {
            var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox"),
                currentIndex = introSlidebox.currentIndex(),
                slideCount = introSlidebox.slidesCount();
            //currentIndex === slideCount - 1 ? ($scope.meta.device.allverse = $scope.meta.device.allverse || 1, $scope.introModal.hide(), $scope.doneInit()) : ($scope.userProfile = Model.fetch("userprofile"), introSlidebox.next())
            if(currentIndex === slideCount - 1) {
                $scope.meta.device.allverse = $scope.meta.device.allverse || 1;
                $scope.introModal.hide();
                $scope.doneInit();
            } else {
                $scope.userProfile = Model.fetch("userprofile");
                introSlidebox.next();
            }
        };
        $scope.skipIntroTouched = !1;
        $scope.skipIntro = function () {
            $scope.meta.device.allverse = $scope.meta.device.allverse || 1;
            $scope.skipIntroTouched = !0, $scope.introModal.hide();
            $scope.introModal.remove();
            console.log("#4 " + new Date);
            $scope.doneInit();
        };
        $scope.prevIntro = function () {
            var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox"),
                currentIndex = introSlidebox.currentIndex();
            currentIndex > 0 && introSlidebox.previous()
        };
        $scope.introSlideChanged = function () {
            var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox");
            $scope.introCurrentSlide = introSlidebox.currentIndex()
        };
        $scope.chooseView = function (num) {
            $scope.meta.device.allverse = num;
            $scope.nextIntro();
        };
        $scope.meta.supportedVersions = Model.fetch("supportedVersions");

        var hideSplashscreen = function () {
            isDevice && navigator.splashscreen.hide()
        };

        $ionicPlatform.ready(function () {
            window.plugins.sqlDB.copy("asv.db", 0, function() {
                window.plugins.sqlDB.copy("kjv.db", 0, function() {
                    window.plugins.sqlDB.copy("bible.db", 0, function() {
                        window.plugins.sqlDB.copy("oneverse.db", 0, function() {
                            alert("DADA DBs copied success");
                        });
                    });
                });
            }, function(error) {
                //alert("There was an error copying the database: " + error);
            });

            debugger;
            console.log("Platform.ready called");
            //isDevice && cordova.plugins.notification.local.on("click", function (notification) {
            //    console.log("click notification to trigger renderbible");
            //    console.log(angular.toJson(notification) + " clicked");
            //    var n_data = notification.data.split(":");
            //    continueRenderBible = !1;
            //    $scope.$apply(function () {
            //        $scope.bibleMeta.book = n_data[0], $scope.bibleMeta.chapter = n_data[1], $scope.bibleMeta.verse = n_data[2]
            //    });
            //    $rootScope.currentId = parseInt(n_data[3]);
            //    $timeout(function () {
            //        console.log("renderbible 005");
            //        $scope.renderBible(function () {
            //            continueRenderBible = !0;
            //        });
            //    });
            //});
            Config.setTranslation(function (lang) {
                null === $scope.meta.settings.language && ($scope.meta.settings.language = lang, Model.save($scope.meta.settings, "settings")), $translate.use($scope.meta.settings.language), $scope.speechSupported = Config.getSpeechLanguage($scope.meta.settings.language), isDevice && hideSplashscreen()
            });
            if (0 === $scope.meta.settings.introVersion.length) {
                console.log("$scope.meta.settings.introVersion: " + $scope.meta.settings.introVersion);
                console.log(typeof $scope.meta.settings.introVersion);
                $timeout(function () {
                    showIntro();
                }, 1e3);
            };

            console.log("CHECK");
            console.log($scope.meta.settings.introVersion.indexOf(1));
            console.log($scope.meta.settings.introVersion.indexOf(6));
            -1 !== $scope.meta.settings.introVersion.indexOf(1) && -1 !== $scope.meta.settings.introVersion.indexOf(2) && -1 === $scope.meta.settings.introVersion.indexOf(6) && showIntroBibleVersion();

            ParseFactory.getConfig(function (config) {
                $scope.meta.app.bibleVersion !== config.get("bibleVersion") || "undefined" != typeof $rootScope.userProfile.forcePro && $rootScope.userProfile.forcePro ? ParseFactory.findAll({
                    className: "BibleVersions",
                    order: "asc",
                    orderBy: "order"
                }, function (results) {
                    console.log("Parse: all bible versions: " + angular.toJson(results));
                    $scope.meta.supportedVersions = processSupportedVersion(results);
                    Model.save($scope.meta.supportedVersions, "supportedVersions");
                    Model.save($scope.meta.localBibleVersions, "localBibleVersions");
                    Model.save($scope.meta.supportedVersionsMeta, "supportedVersionsMeta");
                    //$scope.initPurchase();
                    $scope.updateSupportVersionsProduct();
                }, function (err) {
                    console.log("Parse: all bible versions error: " + angular.toJson(err))
                }) : ($scope.updateSupportVersionsProduct()), $scope.meta.app = {
                    latestAndroidVersion: config.get("latestAndroidVersion"),
                    latestIOSVersion: config.get("latestIOSVersion"),
                    bibleVersion: config.get("bibleVersion"),
                    gateway: config.get("gateway"),
                    terms: config.get("terms"),
                    secret: config.get("secret"),
                    trial: config.get("trial"),
                    gauth: config.get("gauth"),
                    fauth: config.get("fauth"),
                    facebook: config.get("facebook"),
                    twitter: config.get("twitter"),
                    website: config.get("website"),
                    website2: config.get("website2"),
                    hashtags: config.get("hashtags"),
                    shareDay: config.get("shareDay"),
                    shareDayEnabled: config.get("shareDayEnabled"),
                    shareDayLimit: config.get("shareDayLimit")
                }, bypassIds = config.get("analyticsBypass"), Model.save($scope.meta.app, "app"), console.log("meta app: " + angular.toJson($scope.meta.app)), $scope.meta.user = Parse.User.current(), $cordovaAppVersion.getAppVersion().then(function (version) {
                    $scope.meta.user && ($scope.meta.user.set("language", $scope.meta.settings.language), $scope.meta.user.set("deviceLanguage", deviceLanguage), $scope.meta.user.set("appVersion", version), $scope.meta.user.set("platform", platformIs), $scope.meta.user.save(null, {
                        success: function () {
                            console.log("user updated")
                        }
                    }))
                }), $scope.cacheProfileImage(), console.log("Got user from cache? : " + angular.toJson($scope.meta.user))
            }, function () {
                $scope.meta.app = Model.fetch("app")
            });

            //isDevice && $cordovaAppVersion.getAppVersion().then(function (version) {
            //    if ($scope.meta.settings.appVersion = version, isIOS && version >= "1.0.2" && "undefined" == typeof $scope.meta.device.ios_no_cloud) {
            //        var dbs = angular.copy($scope.bibleMeta.versions);
            //        dbs.push("oneverse"), dbs.push("bible"), angular.forEach(dbs, function (db, key) {
            //            window.resolveLocalFileSystemURL(cordova.file.documentsDirectory + "/" + db + ".db", function (fileEntry) {
            //                console.log("$scope.bibleMeta.versions - " + angular.toJson($scope.bibleMeta.versions)), console.log("fileEntry - " + fileEntry), window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function (dirEntry) {
            //                    fileEntry.moveTo(dirEntry, db + ".db", function () {
            //                        console.log("file moved to " + cordova.file.dataDirectory), key === dbs.length - 1 && (console.log("renderBible after file moved to correct location"), $scope.meta.device.ios_no_cloud = !0, Model.save($scope.meta.device, "device"), "undefined" != typeof $scope.modalIntroBibleVersion && $scope.modalIntroBibleVersion.hide(), UI.hideSpinner(), $location.url("after-update"))
            //                    }, function () {
            //                        console.log("failed file moving")
            //                    })
            //                }, function () {
            //                })
            //            }, function () {
            //                console.log("err fileEntry")
            //            })
            //        })
            //    }
            //    var triggerUpdate = !1;
            //    isIOS ? $scope.meta.settings.appVersion < $scope.meta.app.latestIOSVersion && (triggerUpdate = !0) : $scope.meta.settings.appVersion < $scope.meta.app.latestAndroidVersion && (triggerUpdate = !0), triggerUpdate && UI.simpleConfirm("NEW_VERSION_AVAILABLE", "UPDATE", function () {
            //        $cordovaInAppBrowser.open(Config.getStoreUrl(), "_system")
            //    })
            //});


            isDevice && DB.create();

            Config.getUUID(function (uuid) {
                console.log("initUserConfig calling on ready...");
                initUserConfig(uuid);
            });

            $scope.meta.device.init || $timeout(function () {
                console.log("renderbible 001");
                console.log("continueRenderBible - " + continueRenderBible);
                "1.0.2" === $scope.meta.settings.appVersion && isIOS && "undefined" == typeof $scope.meta.device.ios_no_cloud && (continueRenderBible = !1);
                continueRenderBible && $scope.renderBible(function () {
                    3 === $scope.meta.device.allverse && $scope.processSideBySide()
                })
            });
            //renderSpeech();
            //isDevice && cordova.plugins.notification.local.getScheduledIds(function (scheduledIds) {
            //    0 === scheduledIds.length && $scope.meta.memoryVerses.length > 0 && $scope.renderMemoryVerses($scope.meta.memoryVerses)
            //});
            var onlineEvent = function () {
            };
            document.addEventListener("online", onlineEvent, !1)
        });

        $scope.$watch("meta.settings.language", function (newValue, oldValue) {
            newValue !== oldValue && ($translate.use(newValue), moment.locale(newValue), $scope.speechSupported = Config.getSpeechLanguage($scope.meta.settings.language), Model.save($scope.meta.settings, "settings")/*, renderSpeech()*/)
        });
        $scope.$watch("meta.settings.theme", function (newValue, oldValue) {
            oldValue !== newValue && $scope.changeTheme(newValue)
        });
         $scope.$watch("meta.settings.font", function (newValue, oldValue) {
            oldValue !== newValue && $scope.changeFont(newValue)
        });
         $scope.$watch("meta.device.font", function (newValue) {
            $scope.meta.device.lineheight = parseInt(newValue) + 10, Model.save($scope.meta.device, "device")
        });
         $scope.$watch("meta.device.font_allverse", function (newValue) {
            $scope.meta.device.lineheight_allverse = parseInt(newValue) + 5, Model.save($scope.meta.device, "device")
        });
         $scope.$watch("meta.device.allverse", function (newValue, oldValue) {
            newValue !== oldValue && ($rootScope.allverse = newValue, 2 === newValue ? (UI.showSpinner("LOADING"), $timeout(function () {
                console.log("Adjusting slidebox, scroll for all verse"), $ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").update();
                try {
                    $ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").slide($filter("reverse")($scope.bibleMeta.versions).indexOf($rootScope.bibleVersion))
                } catch (err) {
                    console.log("slide to version error: " + err)
                }
                $ionicScrollDelegate.$getByHandle("bible-version-" + $rootScope.bibleVersion).resize(), $scope.slideToListVerse(), UI.hideSpinner()
            }, 500)) : 3 === newValue ? (console.log("process side-by-side"), $scope.processSideBySide()) : (console.log("renderbible 002"), $scope.renderBible()), Model.save($scope.meta.device, "device"))
        });
         $scope.$watch("meta.device.showtags", function (newValue, oldValue) {
            oldValue !== newValue && Model.save($scope.meta.device, "device")
        });

         $scope.renderMemoryVerses = function (newValues) {
            Model.save(newValues, "memoryVerses"), isDevice && cordova.plugins.notification.local.cancelAll(function () {
                console.log("ok, all canceled");
                var db = DB.open("oneverse"),
                    tagIds = newValues.join(",");
                DB.select(db, "tagVerse", "*", "WHERE tagId in (" + tagIds + ") AND isDeleted = 'false'", function (result) {
                    var bibleIds = result.map(function (obj) {
                            return obj.bibleId
                        }).join(","),
                        bibleVersion = $rootScope.bibleVersion,
                        versionDB = DB.open(bibleVersion);
                    DB.select(versionDB, "t_" + bibleVersion, "id, b, c, v, t", "WHERE id in (" + bibleIds + ")", function (result2) {
                        console.log("SQL: found verses for memoryVerses - " + angular.toJson(result2));
                        var options = [];
                        if (result2.length > 0)
                            for (var i = 0; 31 > i; i++) {
                                var times = [moment().add(i, "day").set("hour", 8).set("minute", 0).set("second", 0), moment().add(i, "day").set("hour", 12).set("minute", 0).set("second", 0), moment().add(i, "day").set("hour", 18).set("minute", 0).set("second", 0)];
                                angular.forEach(times, function (triggerAt, key) {
                                    var picked = Util.randomPick(result2),
                                        bookNumber = parseInt(picked.b) < 10 ? "0" + picked.b : picked.b,
                                        option = {
                                            id: triggerAt.valueOf(),
                                            title: $translate.instant("GUESS_BIBLE_VERSE"),
                                            text: picked.t + "\n\n[" + $translate.instant("BOOK_" + bookNumber) + " " + picked.c + ":" + picked.v + "]",
                                            at: triggerAt.toDate(),
                                            data: picked.b + ":" + picked.c + ":" + picked.v + ":" + picked.id
                                        };
                                    triggerAt.toDate() > new Date && options.push(option), 30 === i && key === times.length - 1 && (console.log("memoryVerses - options: " + options), cordova.plugins.notification.local.schedule(options), UI.toast("NOTI_SCHEDULED", "short", "bottom"))
                                })
                            }
                    })
                })
            })
        };

        if (!isIOS) {
            var elemLeft = document.getElementById("ov-side-menu-left"),
                elemRight = document.getElementById("ov-side-menu-right");
            $scope.$watch(function () {
                return $ionicSideMenuDelegate.isOpen()
            }, function (isOpen) {
                if (1 == isOpen)
                    if ($ionicSideMenuDelegate.isOpenLeft()) elemRight.style.display = "none", elemLeft.style.display = "inherit", $ionicSlideBoxDelegate.$getByHandle("left-side-menu").update();
                    else {
                        elemLeft.style.display = "none", elemRight.style.display = "inherit";
                        var elem = document.getElementById("main-verse-selection-" + $rootScope.currentVerse);
                        "undefined" != typeof elem && $ionicScrollDelegate.$getByHandle("scroll-sidemenu-right").scrollTo(0, elem.offsetTop, [!0])
                    }
            });
            $scope.$watch(function () {
                return $ionicSideMenuDelegate.getOpenRatio()
            }, function () {
            });
        }

        $scope.bibleData = {};
        $rootScope.currentVerse = $scope.bibleMeta.verse - 1;

        var copiedVersions = angular.copy($scope.bibleMeta.versions);

        copiedVersions = copiedVersions.reverse();
        $rootScope.versionIndex = copiedVersions.indexOf($scope.bibleMeta.version);
        $rootScope.bibleVersion = $scope.bibleMeta.version;

        var initTitles = function (bibles) {
            $rootScope.bibleBook = bibles[0].book, $rootScope.bibleChapter = bibles[0].verses[0].c, $rootScope.currentVerse = $scope.bibleMeta.verse - 1;
            try {
                $rootScope.currentId = bibles[0].verses[$rootScope.currentVerse].id
            } catch (e) {
            }
        };

        isDevice || ($scope.bibles = Debug.getBibleData(), initTitles($scope.bibles));

        var loadBibleRefFromDB = function () {
            console.log("loadBibleRefFromDB called");
            var version = "kjv";
            if ($scope.bibleData.books = Model.fetch("books"), null === $scope.bibleData.books) {
                var db = DB.open(version);
                DB.select(db, "t_" + version, "b,c,v", "GROUP BY b,c", function (result) {
                    $scope.bibleData.books = Bible.processBooks(result), Model.save($scope.bibleData.books, "books")
                })
            }
        };

        $scope.meta.isLoading = !1;

        var loadBibleFromDB = function (versions, book, chapter, callback) {
            debugger;
            console.log("Loading bible from db");
            console.log("versions: " + versions);
            console.log("book: " + book);
            console.log("chapter: " + chapter);

            UI.showSpinner("LOADING");

            var versionsToUse = angular.copy(versions),
                version = versionsToUse.pop(),
                appendTags = function (book, version, result) {
                    var bookNumber = parseInt(book) < 10 ? "0" + book : book;
                    $scope.$apply(function () {
                        $scope.bibles.push({
                            version: version,
                            book: "BOOK_" + bookNumber,
                            verses: result
                        }), 1 === $scope.bibles.length && initTitles($scope.bibles)
                    })
                };

            console.log("version: " + version);

            if ("undefined" != typeof version) {
                var db = DB.open(version);
                DB.select(db, "t_" + version, "id, b, c, v, t", "WHERE b = " + book + " and c = " + chapter, function (result) {
                    console.log("select query executed successfully");
                    var allVerseIds = result.map(function (obj) {
                            return obj.id
                        }),
                        minId = Array.min(allVerseIds),
                        maxId = Array.max(allVerseIds),
                        ovDB = DB.open("oneverse");
                    DB.select(ovDB, "tagVerse", "*", "WHERE bibleId >= " + minId + " AND bibleId <= " + maxId + " AND isDeleted = 'false'", function (resultTagVerse) {
                        0 === resultTagVerse.length && (appendTags(book, version, result), loadBibleFromDB(versionsToUse, book, chapter, callback)), angular.forEach(resultTagVerse, function (val, key) {
                            DB.select(ovDB, "tag", "*", "WHERE id = '" + val.tagId + "' AND isDeleted = 'false'", function (resultTag) {
                                angular.forEach(result, function (val2) {
                                    if ("undefined" == typeof val2.tags && (val2.tags = []), parseInt(val2.id) === parseInt(val.bibleId)) {
                                        var existingTagIds = val2.tags.map(function (obj) {
                                            return obj.id
                                        });
                                        "undefined" != typeof resultTag[0] && -1 == existingTagIds.indexOf(resultTag[0].id) && val2.tags.push(resultTag[0])
                                    }
                                }), key === resultTagVerse.length - 1 && (appendTags(book, version, result), loadBibleFromDB(versionsToUse, book, chapter, callback))
                            })
                        })
                    })
                })
            } else {
                console.log("done loading bible verses");
                "undefined" != typeof callback && callback();
                loadBibleRefFromDB();
                $rootScope.versionIndex = $filter("reverse")(versions).indexOf($rootScope.bibleVersion);
                1 === $scope.meta.device.allverse ? angular.forEach($rootScope.allHorizontalSlides, function (val) {
                    val.update()
                }) : $ionicScrollDelegate.$getByHandle("bible-version-" + $rootScope.bibleVersion).resize(), UI.hideSpinner(), $scope.meta.isLoading = !1;

                var isVersionFound = $filter("reverse")($scope.bibleMeta.versions).indexOf($rootScope.bibleVersion);
                $scope.changeVersion(-1 !== isVersionFound ? isVersionFound : 0), $rootScope.renderBibleCalled = !1
            }
        };

        $scope.slideToListVerse = function () {
            console.log("slideToListVerse called - " + $rootScope.bibleVersion + " : " + $rootScope.currentId);
            var scrollTarget = "bible-version-" + $rootScope.bibleVersion;
            if (3 === $scope.meta.device.allverse && (scrollTarget = "bible-side-by-side", $ionicScrollDelegate.$getByHandle(scrollTarget).resize()), 1 == $scope.bibleMeta.verse) return $ionicScrollDelegate.$getByHandle(scrollTarget).scrollTop([!0]), !1;
            var elemId = "verse-selection-" + $rootScope.bibleVersion + "-" + ($scope.bibleMeta.verse - 1);
            3 === $scope.meta.device.allverse && (elemId = "verse-selection-sbs-" + $rootScope.currentId);
            var elem = document.getElementById(elemId);
            console.log("slideToListVerse - elemId: " + elemId), $timeout(function () {
                null !== elem && (console.log("slideToListVerse - elem.offsetTop: " + elem.offsetTop), $ionicScrollDelegate.$getByHandle(scrollTarget).scrollTo(0, elem.offsetTop, [!0]))
            })
        }

        $scope.formModel = {
            currSelAptLang: "1"
        };
        $scope.changeVersion = function (index) {
            index = parseInt($scope.formModel.currSelAptLang);
            console.log("inside changeVersion - rootScope.bibleVersion - " + $rootScope.bibleVersion), 2 === $scope.meta.device.allverse ? ($ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").update(), $ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").slide(index), $scope.slideToListVerse()) : 3 === $scope.meta.device.allverse ? ($rootScope.bibleVersion = $filter("reverse")($scope.bibleMeta.versions)[index], $scope.processSideBySide()) : $scope.slideToVersion(index)
        };

        var initUserConfig = function (uuid) {
                console.log("initUserConfig called with uuid - " + uuid + " platform - " + platformIs);
                isDevice && $cordovaAppVersion.getAppVersion().then(function (version) {
                    var dimensions = {
                        appVersion: version,
                        deviceLanguage: deviceLanguage,
                        language: $scope.meta.settings.language,
                        model: $cordovaDevice.getModel(),
                        osVersion: $cordovaDevice.getVersion(),
                        platform: platformIs,
                        uuid: uuid,
                        theme: $scope.meta.settings.theme,
                        view: "" + $scope.meta.device.allverse
                    };
                    Analytics.track("AppLaunch", dimensions)
                });
                var className = "UserConfig",
                    options = {
                        className: className,
                        equalTo: [{
                            field: "uuid",
                            value: uuid
                        }, {
                            field: "platform",
                            value: platformIs
                        }]
                    };
                ParseFactory.find(options, function (result) {
                    console.log("initUserConfig: found existing user config, saving expiresAt"), console.log("uuid - " + uuid), console.log("platformIs - " + platformIs), console.log("result - " + angular.toJson(result));
                    var expiresAt = result.get("expiresAt");
                    Model.save(expiresAt, "expiresAt"), $scope.setUserProfile(expiresAt);
                    var sharedCount = result.get("sharedCount");
                    "undefined" == typeof sharedCount && (sharedCount = 0), console.log("settings.sharedCount: " + $scope.meta.settings.sharedCount), "undefined" == typeof $scope.meta.settings.sharedCount && ($scope.meta.settings.sharedCount = 0), $scope.meta.settings.sharedCount < sharedCount ? $scope.meta.settings.sharedCount = sharedCount : result.set("sharedCount", $scope.meta.settings.sharedCount), Model.save($scope.meta.settings, "settings"), result.set("deviceLanguage", deviceLanguage), result.set("language", $scope.meta.settings.language), result.set("appVersion", $scope.meta.settings.appVersion), isDevice && (result.set("model", $cordovaDevice.getModel()), result.set("osVersion", $cordovaDevice.getVersion())), result.save();
                    var forcePro = 1;//result.get("forcePro");
                    "undefined" != typeof forcePro && (forcePro ? ($rootScope.userProfile.isProPurchased = !0, $rootScope.userProfile.forcePro = !0, UI.toast("PRO_VERSION", "long", "bottom"), Model.save($rootScope.userProfile, "userprofile")) : ($rootScope.userProfile.isProPurchased = !1, $rootScope.userProfile.forcePro = !1, Model.save($rootScope.userProfile, "userprofile")));
                    //$scope.syncToCloud();
                }, function () {
                    console.log("initUserConfig: couldn't find uuid data, creating...");
                    var expiresAt = new Date;
                    expiresAt.setDate(expiresAt.getDate() + $scope.meta.app.trial);
                    var optionsForCreate = {
                        className: className,
                        setValues: [{
                            field: "uuid",
                            value: uuid
                        }, {
                            field: "platform",
                            value: platformIs
                        }, {
                            field: "expiresAt",
                            value: expiresAt
                        }, {
                            field: "model",
                            value: $cordovaDevice.getModel()
                        }, {
                            field: "deviceLanguage",
                            value: deviceLanguage
                        }, {
                            field: "language",
                            value: $scope.meta.settings.language
                        }, {
                            field: "appVersion",
                            value: $scope.meta.settings.appVersion
                        }, {
                            field: "osVersion",
                            value: $cordovaDevice.getVersion()
                        }, {
                            field: "sharedCount",
                            value: $scope.meta.settings.sharedCount
                        }]
                    };
                    ParseFactory.save(optionsForCreate, function (userConfig) {
                        console.log("initUserConfig: successfully created user config obj - uuid: " + uuid), isDevice && $cordovaAppVersion.getAppVersion().then(function (version) {
                            Analytics.track("AppInstall", {
                                appVersion: version,
                                deviceLanguage: deviceLanguage,
                                language: $scope.meta.settings.language,
                                model: $cordovaDevice.getModel(),
                                osVersion: $cordovaDevice.getVersion(),
                                platform: platformIs,
                                uuid: uuid,
                                theme: $scope.meta.settings.theme,
                                view: "" + $scope.meta.device.allverse
                            })
                        });
                        var expiresAt = userConfig.get("expiresAt");
                        Model.save(expiresAt, "expiresAt"), $scope.setUserProfile(expiresAt)
                    }, function () {
                        console.log("initUserConfig: failed creating user config obj - uuid: " + uuid)
                    })
                })
            },
            progressDone = function () {
                $scope.bibleMeta = Model.fetch("bible_meta");
                var db = DB.open($scope.bibleMeta.versions[0]);
                DB.select(db, "t_" + $scope.bibleMeta.versions[0], "*", "WHERE id = 1001001", function () {
                    $scope.downloadProgress = 100, $scope.meta.device.init = !1, console.log("dummy sql done")
                })
            },
            downloadInitData = function () {
                if (isDevice) {
                    File.getInitData($scope, function () {
                        console.log("Downloading completed");
                        $scope.$$phase ? progressDone() : $scope.$apply(function () {
                            progressDone()
                        });
                        Model.save($scope.meta.device, "device");
                        console.log("before calling loadBibleFromDB inside downloadInitData");
                        loadBibleFromDB($scope.bibleMeta.versions, $scope.bibleMeta.book, $scope.bibleMeta.chapter, function () {
                        });
                    }, function () {
                        $scope.meta.device.initFailed = !0;
                    });
                } else {
                    $scope.downloadProgress = 0;
                    $timeout(function () {
                        $scope.downloadProgress = 100;
                        $scope.meta.device.init = !1;
                        initUserConfig(uuidIs);
                    }, 1e3);
                }
            };

        $scope.renderBible = function (callback) {
            debugger;
            var ret = 1;
            console.log("renderBible called");

            if ($rootScope.renderBibleCalled) {
                console.log("renderBibleCalled already, failing...");
                ret = !1
            } else {
                $rootScope.renderBibleCalled = !0
                console.log("bibleMeta: " + angular.toJson($scope.bibleMeta));
                if (isDevice) {
                    $scope.bibles = [];
                    loadBibleFromDB($scope.bibleMeta.versions, $scope.bibleMeta.book, $scope.bibleMeta.chapter, callback);
                    loadBibleRefFromDB();
                } else {$timeout(function () {
                    UI.hideSpinner()
                }, 1e3);}
            }
        }

        $scope.processSideBySide = function () {
            console.log("processSideBySide called"), UI.showSpinner("LOADING"), $timeout(function () {
                $scope.sbs = [];
                var store = {};
                angular.forEach($scope.bibles, function (bible) {
                    angular.forEach(bible.verses, function (verse) {
                        "undefined" == typeof store[verse.id] && (store[verse.id] = []);
                        var valToPush = {
                                version: bible.version,
                                v: verse.v,
                                t: verse.t,
                                tags: verse.tags
                            },
                            collectedVersions = store[verse.id].map(function (obj) {
                                return obj.version
                            });
                        -
                            1 === collectedVersions.indexOf(bible.version) && ($rootScope.bibleVersion === bible.version ? store[verse.id].unshift(valToPush) : store[verse.id].push(valToPush))
                    })
                }), $scope.sbs.push(store), $timeout(function () {
                    $scope.slideToListVerse()
                }, 300), UI.hideSpinner()
            }, 300)
        }
        $scope.crossReferenced = "";
        $scope.crossReferencedVersion = "";
        $scope.renderRefBible = function (id, bibleVersion) {
            if (isDevice) {
                if ($scope.crossReferenced !== id || $scope.crossReferencedVersion !== bibleVersion) {
                    $rootScope.loadingRefBible = !0;
                    var db = DB.open("bible");
                    DB.select(db, "cross_reference", "vid, r, sv, ev", "WHERE vid = '" + id + "' order by r desc", function (result) {
                        console.log("bible ref result: " + angular.toJson(result)), 0 === result.length && (console.log("found no ref... setting loadingRefBible to false"), $rootScope.$apply(function () {
                            $rootScope.loadingRefBible = !1, $rootScope.refBibles = []
                        })), $rootScope.refBibles = [], angular.forEach(result, function (val) {
                            var db2 = DB.open(bibleVersion),
                                whereStmt = "WHERE id = " + val.sv;
                            0 !== val.ev && (whereStmt = "WHERE id BETWEEN " + val.sv + " AND " + val.ev), DB.select(db2, "t_" + bibleVersion, "id, b, c, v, t", whereStmt, function (result) {
                                console.log("refers: " + angular.toJson(result));
                                angular.forEach(result, function (val, key) {
                                    $rootScope.refBibles.push(val), console.log("key: " + key), console.log("result.length: " + result.length), key === result.length - 1 && (console.log("update triggered: key - " + key), $rootScope.loadingRefBible = !1, $ionicSlideBoxDelegate.$getByHandle("left-side-menu").update(), $scope.crossReferenced = id, $scope.crossReferencedVersion = bibleVersion)
                                })
                            })
                        })
                    })
                }
            } else $rootScope.refBibles = angular.fromJson('[{"id":5006016,"b":5,"c":6,"v":16,"t":"You shall not put the LORD your God to the test, as you tested [Him] at Massah."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."},{"id":46010009,"b":46,"c":10,"v":9,"t":"Nor let us try the Lord, as some of them did, and were destroyed by the serpents."}]'), console.log("$rootScope.refBibles: " + $rootScope.refBibles)
        };
        $rootScope.tagQuery = null;
        $scope.renderTags = function (id) {
            if (console.log("render tags called"), isDevice) {
                if ($rootScope.tagQuery !== id) {
                    var tags = [],
                        db = DB.open("oneverse");
                    DB.select(db, "tagVerse", "*", "WHERE bibleId = '" + id + "' AND isDeleted = 'false'", function (result) {
                        console.log("SQL: renderTags - " + angular.toJson(result)), angular.forEach(result, function (val, key) {
                            DB.select(db, "tag", "*", "WHERE id = '" + val.tagId + "' AND isDeleted = 'false'", function (sqlResult) {
                                console.log("SQL: getting tag info - " + angular.toJson(sqlResult)), "undefined" !== result[0] && tags.push(sqlResult[0]), key === result.length - 1 && $rootScope.$apply(function () {
                                    $rootScope.tags = tags
                                })
                            })
                        }), 0 === result.length && $rootScope.$apply(function () {
                            $rootScope.tags = []
                        }), $rootScope.tagQuery = id
                    })
                }
            } else $rootScope.tags = [{
                id: 1,
                tagName: "Test"
            }, {
                id: 2,
                tagName: "Holy Spirit"
            }]
        };
        $rootScope.keywordQuery = "";
        $rootScope.keywordQuerySearchBook = "";
        $scope.renderSearchBible = function (word, bibleVersion) {
            if (isDevice) {
                $rootScope.loadingSearchBible = !0, $rootScope.keywordQuery = word, $rootScope.keywordQuerySearchBook = $scope.meta.searchbook;
                var db = DB.open(bibleVersion);
                word.replace(" ", "%");
                var whereStmt = "WHERE (t LIKE '%" + word + "%'";
                $scope.meta.advancedSearches && ($scope.meta.advancedSearches[0].keyword.length > 0 && angular.forEach($scope.meta.advancedSearches, function (advSearch) {
                    advSearch.keyword.length > 0 && ("AND" == advSearch.classifier && (whereStmt += " " + advSearch.classifier + " t LIKE '%" + advSearch.keyword + "%'"), "NOT" == advSearch.classifier && (whereStmt += " AND t NOT LIKE '%" + advSearch.keyword + "%'"))
                }), whereStmt += ")", angular.forEach($scope.meta.advancedSearches, function (advSearch) {
                    advSearch.keyword.length > 0 && "OR" == advSearch.classifier && (whereStmt += " " + advSearch.classifier + " t LIKE '%" + advSearch.keyword + "%'")
                })), "all" !== $scope.meta.searchbook && (whereStmt += "new" == $scope.meta.searchbook ? " AND b > 39" : "old" == $scope.meta.searchbook ? " AND b < 40" : " AND b = " + $scope.meta.searchbook), console.log("whereStmt: " + whereStmt), DB.select(db, "t_" + bibleVersion, "id, b, c, v, t", whereStmt, function (result) {
                    console.log("searched results: " + angular.toJson(result)), 0 === result.length && UI.toast("NO_RESULTS_FOUND", "short", "center"), $rootScope.$apply(function () {
                        $rootScope.searchedVerses = result, $rootScope.loadingSearchBible = !1
                    }), isDevice && (cordova.plugins.Keyboard.close(), $timeout(function () {
                        $ionicSlideBoxDelegate.$getByHandle("left-side-menu").update(), $ionicScrollDelegate.$getByHandle("side-menu-slide-3").resize()
                    }))
                })
            } else $rootScope.searchedVerses = angular.fromJson('[{"id":61002007,"b":61,"c":2,"v":7,"t":"무법한 자들의 음란한 행실로 말미암아 고통 당하는 의로운 롯을 건지셨으니 무법한 자들의 음란한 행실로 말미암아 고통 당하는 의로운 롯을 건지셨으니"},{"id":61002007,"b":61,"c":2,"v":7,"t":"무법한 자들의 음란한 행실로 말미암아 고통 당하는 의로운 롯을 건지셨으니 무법한 자들의 음란한 행실로 말미암아 고통 당하는 의로운 롯을 건지셨으니"}]')
        };

        var showIntroBibleVersion = function () {
            UI.openModal("templates/modules/modal-intro-bible-version.html", $scope, function (modal) {
                $scope.modalIntroBibleVersion = modal, $scope.modalIntroBibleVersion.show(), $scope.modalIntroBibleVersionClose = function () {
                    $scope.modalIntroBibleVersion.hide(), $scope.setIntroVersion(6)
                }
            })
        };

        $scope.doneInit = function () {
            debugger;
            $scope.meta.device.init = !1;
            Model.save($scope.meta.device, "device");
            $scope.setIntroVersion(Config.getIntroVersion());
            Model.save($scope.meta.settings, "settings");

            var introSlidebox = $ionicSlideBoxDelegate.$getByHandle("intro-slidebox");
            introSlidebox && introSlidebox.enableSlide(!0);
            $scope.renderBible();
            showIntroBibleVersion();
        }

        $scope.retryInit = function () {
            $scope.meta.device.initFailed = !1;
            downloadInitData();
        };
        $scope.downloadInit = function () {
            downloadInitData();
        };
        $scope.languages = Config.getLanguages();
        $scope.showSettings = function () {
            UI.openModal("templates/modules/modal-settings.html", $scope, function (modal) {
                $scope.modalSettings = modal, $scope.modalSettings.show()
            })
        };
        $scope.closeSettings = function () {
            $scope.modalSettings.hide()
        };
        $scope.showThemes = function () {
            UI.openModal("templates/modules/modal-themes.html", $scope, function (modal) {
                $scope.modalThemes = modal, $scope.modalThemes.show()
            })
        };
        $scope.closeThemes = function () {
            $scope.modalThemes.hide()
        };
        $scope.allThemes = Config.getThemes();
        $scope.changeTheme = function (code) {
            console.log("changeTheme clicked");
            angular.forEach($scope.allThemes, function (val) {
                $css.remove(["css/theme." + val.code + ".min.css"])
            });
            $css.bind({
                href: "css/theme." + code + ".min.css"
            }, $scope);
            $scope.meta.settings.theme = code;
            Model.save($scope.meta.settings, "settings");
            "undefined" != typeof $scope.modalThemes && $scope.modalThemes.hide()
        };
        $scope.changeThemeVia = function (theme) {
            $scope.changeTheme(theme.code)
            //!theme.pro || theme.pro && ($rootScope.userProfile.isProPurchased || $rootScope.userProfile.isPro) ? ($scope.changeTheme(theme.code), Analytics.track("ThemeChanged", {
            //    code: theme.code,
            //    isProPurchased: $rootScope.userProfile.isProPurchased,
            //    isPro: $rootScope.userProfile.isPro,
            //    platform: platformIs,
            //    uuid: uuidIs
            //})) : UI.toast("GET_PRO", "short", "bottom")
        };
        $scope.getCurrentTheme = function () {
            var currentIndex = 0;
            return angular.forEach($scope.allThemes, function (val, key) {
                val.code === $scope.meta.settings.theme && (currentIndex = key)
            }), currentIndex
        };
        $scope.allFonts = Config.getFonts();
        $scope.changeFont = function (code) {
            console.log("changeFont clicked"), angular.forEach($scope.allFonts, function (val) {
                $css.remove(["css/font." + val.code + ".min.css"])
            }), $css.bind({
                href: "css/font." + code + ".min.css"
            }, $scope), $scope.meta.settings.font = code, Model.save($scope.meta.settings, "settings")
        };
        $rootScope.recognizedText = "";
        $rootScope.isRecognizedFailed = !1;

        var renderSpeech = function () {
            $scope.recognition = Speech.start($scope.meta.settings.language, function (transcript) {
                $scope.$apply(function () {
                    $rootScope.recognizedText = transcript, $rootScope.isRecognizedFailed = !1
                }), Speech.process($scope.meta.settings.language, $rootScope.recognizedText, function (b, c, v) {
                    console.log("GoTo: " + b + ":" + c + ":" + v);
                    var book = parseInt(b) < 10 ? "0" + b : b,
                        totalChapters = Object.keys($scope.bibleData.books["BOOK_" + book].chapters).length,
                        totalVerses = "undefined" != typeof $scope.bibleData.books["BOOK_" + book] ? $scope.bibleData.books["BOOK_" + book].chapters["chapter_" + c] : 0;
                    console.log("totalChapters: " + totalChapters), console.log("totalVerses: " + totalVerses), totalChapters >= c && totalVerses >= v && $scope.goTo(b, c, v), $rootScope.customAlert.close()
                }, function () {
                    UI.toast("TRY_AGAIN_COULDNT_FIND", "short", "bottom")
                })
            }, function () {
                $rootScope.recognizedText = $translate.instant("TRY_AGAIN"), $rootScope.isRecognizedFailed = !0
            })
        };

        $scope.showUiControlsFlag = true;
        $scope.hideShowUiControls = function () {
            $scope.showUiControlsFlag = !$scope.showUiControlsFlag;
        }

        $scope.slideToVerse = function (verseIndex) {
            angular.forEach($rootScope.allVerticalSlides, function (val) {
                val !== $rootScope.currentSwiper && val.slideTo(verseIndex)
            })
        };
        $scope.slideToVersion = function (versionIndex) {
            console.log("slideToVersion called: " + versionIndex), $rootScope.bibleVersion = $filter("reverse")($scope.bibleMeta.versions)[versionIndex], console.log("$rootScope.bibleVersion - " + $rootScope.bibleVersion), console.log("$scope.bibleMeta.versions - " + $scope.bibleMeta.versions), angular.forEach($rootScope.allHorizontalSlides, function (val) {
                val.slideTo(versionIndex)
            })
        };
        $scope.slideTo = function (i) {
            2 === $scope.meta.device.allverse || 3 === $scope.meta.device.allverse ? ($scope.bibleMeta.verse = i, $rootScope.currentId = $scope.bibles[0].verses[i - 1].id, $rootScope.currentVerse = i - 1, console.log("$rootScope.currentId - " + $rootScope.currentId), console.log("$rootScope.currentVerse - " + $rootScope.currentVerse), 3 === $scope.meta.device.allverse ? $timeout(function () {
                $scope.slideToListVerse()
            }, 500) : $scope.slideToListVerse()) : angular.forEach($rootScope.allVerticalSlides, function (val) {
                val.slideTo(i - 1), $rootScope.currentVerse = i - 1
            }), $ionicSideMenuDelegate.toggleRight()
        };
        $scope.setWindowHeight = function () {
            var height = $window.innerHeight;
            return isIOS && (height -= 30), {
                height: height + "px"
            }
        };
        $scope.setWindowHeightWithHeader = function () {
            var height = $window.innerHeight - 50;
            return {
                height: height + "px"
            }
        };
        $scope.setSideMenuHeight = function () {
            var height = $window.innerHeight - 70;
            return isIOS && (height -= 15), {
                height: height + "px"
            }
        };
        $scope.nextChapter = function () {
            console.log("nextChapter called");
            console.log("$scope.bibleMeta - " + angular.toJson($scope.bibleMeta));
            var bookChosen = parseInt($scope.bibleMeta.book) < 10 ? "0" + $scope.bibleMeta.book : $scope.bibleMeta.book;
            console.log("bookChosen - " + bookChosen);
            var totalChapters = Object.keys($scope.bibleData.books["BOOK_" + bookChosen].chapters).length;
            $scope.bibleMeta.chapter < totalChapters ? ($scope.bibleMeta.chapter += 1, $scope.bibleMeta.verse = 1, $scope.renderBible(function () {
                console.log("inside callback");$rootScope.currentId = $scope.bibles[0].verses[0].id;console.log("TODO: check currentId - " + $rootScope.currentId);
            })) : parseInt($scope.bibleMeta.book) < 66 ? ($scope.bibleMeta.book += 1, $scope.bibleMeta.chapter = 1, $scope.bibleMeta.verse = 1, $scope.renderBible(function () {
                console.log("inside callback"), $rootScope.currentId = $scope.bibles[0].verses[0].id, console.log("TODO: check currentId - " + $rootScope.currentId)
            }), UI.toast("MSG_END_OF_CHAPTER_NEXT_BOOK", "short", "center")) : UI.toast("MSG_END_OF_CHAPTER", "short", "center"), $scope.expandMenu(!0)
        };
        $scope.prevChapter = function () {
            console.log("prevChapter called"), $scope.bibleMeta.chapter > 1 ? ($scope.bibleMeta.chapter -= 1, $scope.bibleMeta.verse = 1, $scope.renderBible(function () {
                console.log("inside callback"), $rootScope.currentId = $scope.bibles[0].verses[0].id, console.log("TODO: check currentId - " + $rootScope.currentId)
            })) : UI.toast("MSG_FIRST_CHAPTER", "short", "center"), $scope.expandMenu(!0)
        };
        $rootScope.starred = !1;
        $scope.starred = function () {
            return console.log("starred!"), $rootScope.currentId ? ($rootScope.starred = !$rootScope.starred, void($rootScope.starred && $scope.saveTag([{
                tagName: "favorite",
                tagNote: ""
            }], [], !0))) : (UI.toast("TRY_AGAIN", "short", "bottom"), !1)
        };
        $scope.insertTagVerse = function (tx, tagId, callback) {
            console.log("insertTagVerse called");
            console.log("tagId: " + tagId);
            console.log("$rootScope.currentId: " + $rootScope.currentId);
            tx.executeSql("SELECT id FROM tagVerse WHERE tagId = ? AND bibleId = ? AND isDeleted = ?", [tagId, $rootScope.currentId, !1], function (tx, res) {
                console.log("SQL: tag verse found - " + angular.toJson(res));
                if (0 === res.rows.length) {
                    console.log("tagId : " + tagId);
                    console.log("currentId: " + $rootScope.currentId);
                    console.log("createdAt: " + Date.now());
                    tx.executeSql("INSERT INTO tagVerse (tagId, bibleId, createdAt, syncID, syncedAt, isDeleted) VALUES (?, ?, ?, ?, ?, ?)", [tagId, $rootScope.currentId, Date.now(), null, null, !1], function (tx, res) {
                        console.log("SQL: tag verse inserted - " + angular.toJson(res));
                        if ("undefined" != typeof callback) {
                            console.log("SQL: tag verse inserted so calling callback");
                            callback(tagId);
                            $rootScope.syncToCloud();
                        }
                    })
                } else {console.log("SQL: seems tag verse already exists??? " + angular.toJson(res)), $rootScope.starred = !1, UI.hideStarred()}
            })
        };
        $scope.saveTag = function (tags, markForDeletion, isStarred) {
            if (isStarred && UI.showStarred(), 0 === tags.length && 0 === markForDeletion.length) return UI.toast("TAG_AT_LEAST_ONE_REQUIRED", "short", "bottom"), !1;
            if (isDevice) {
                var db = DB.open("oneverse");
                db.transaction(function (tx) {
                    console.log("SQL: trying to create table if not exists"), angular.forEach(tags, function (val) {
                        console.log("SQL: looping through tags");
                        var tagName = val.tagName.trim(),
                            tagNote = "undefined" == typeof val.tagNote ? null : val.tagNote.trim(),
                            successTagVerse = isStarred ? function (insertedTagId) {
                                UI.toast("STARRED", "short", "bottom"), console.log("tag verse inserted successfully");
                                var valToPush = {
                                    id: insertedTagId,
                                    tagName: "favorite"
                                };
                                angular.forEach($scope.bibles, function (bible) {
                                    angular.forEach(bible.verses, function (verse) {
                                        $rootScope.currentId === verse.id && (console.log("found matching current id in bible verses"), "undefined" == typeof verse.tags && (verse.tags = []), -1 === verse.tags.map(function (obj) {
                                            return obj.id
                                        }).indexOf(insertedTagId) && (console.log("tag id not found, appending.. #1"), verse.tags.push(valToPush)))
                                    })
                                }), angular.forEach($scope.sbs, function (each_sbs) {
                                    console.log("appending star to sbs"), "undefined" == typeof each_sbs[$rootScope.currentId.toString()][0].tags && (each_sbs[$rootScope.currentId.toString()][0].tags = []), -1 === each_sbs[$rootScope.currentId.toString()][0].tags.map(function (obj) {
                                        return obj.id
                                    }).indexOf(insertedTagId) && (console.log("tag id not found, appending.. #2"), each_sbs[$rootScope.currentId.toString()][0].tags.push(valToPush))
                                }), $rootScope.starred = !1, UI.hideStarred()
                            } : function () {
                            };
                        console.log("now find tag and if tag is not found, then will insert"), tx.executeSql("SELECT id FROM tag WHERE tagName = ? AND isDeleted = ?", [tagName, !1], function (tx, res) {
                            if (0 === res.rows.length) {
                                console.log("SQL: tag not found - " + angular.toJson(res)), console.log("SQL: tag not found tagName - " + tagName);
                                var settings = Model.fetch("settings"),
                                    language = settings.language;
                                console.log("SQL: language params - " + language), tx.executeSql("INSERT INTO tag (tagName, note, language, createdAt, privacy, syncID, syncedAt, isDeleted) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", [tagName, tagNote, language, Date.now(), "private", null, null, !1], function (tx, res) {
                                    console.log("SQL: insert into tag called - " + angular.toJson(res)), 1 === res.rowsAffected && (console.log("SQL: inserted tag - " + angular.toJson(res)), $scope.insertTagVerse(tx, res.insertId, successTagVerse), console.log("done calling insertTagVerse #1"))
                                })
                            } else console.log("SQL: tag found - " + angular.toJson(res)), console.log("SQL: tag found tagName - " + tagName), $scope.insertTagVerse(tx, res.rows.item(0).id, successTagVerse), console.log("done calling insertTagVerse #2")
                        })
                    }), console.log("now trying to delete if anything is marked for deletion - " + angular.toJson(markForDeletion)), angular.forEach(markForDeletion, function (val) {
                        tx.executeSql("UPDATE tagVerse SET isDeleted = ? WHERE tagId = ?", [!0, val.id], function (tx, res) {
                            console.log("SQL: updating tagVerse for deletion - " + angular.toJson(res)), 1 === res.rowsAffected && (console.log("SQL: updated tagVerse for deleted"), tx.executeSql("SELECT id FROM tagVerse WHERE id = ? AND isDeleted = ?", [val.id, !1], function (tx, res) {
                                0 === res.rows.length && tx.executeSql("UPDATE tag SET isDeleted = ? WHERE id = ?", [!0, val.id], function (tx, res) {
                                    console.log("SQL: updating tag for deletion - " + angular.toJson(res)), 1 === res.rowsAffected && console.log("SQL: deleting tag")
                                })
                            }))
                        })
                    })
                }, function (e) {
                    console.log("SQL: db transaction error - " + angular.toJson(e)), UI.hideStarred(), $rootScope.starred = !1, UI.toast("OOPS", "short", "bottom")
                })
            }
            isStarred || ($location.url("home"), UI.toast("SAVED", "short", "bottom")), $rootScope.tagQuery = null
        };
        $scope.menuExpanded = !1;
        $scope.expandMenu = function (forceClose) {
            console.log("expandMenu called"), $scope.menuExpanded = forceClose ? !1 : !$scope.menuExpanded
        };
        $scope.verseDetail = function () {
            console.log("verseDetail called: " + $rootScope.currentId), $ionicScrollDelegate.$getByHandle("side-menu-left-content").scrollTop([!0]), $ionicSideMenuDelegate.toggleLeft(), $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(1), $rootScope.activeSideMenuSlideBox = 1, $scope.renderRefBible($rootScope.currentId, $rootScope.bibleVersion), $scope.expandMenu(!0)
        };
        $scope.tagDetail = function () {
            $ionicScrollDelegate.$getByHandle("side-menu-left-content").scrollTop([!0]), $ionicSideMenuDelegate.toggleLeft(), $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(2), $rootScope.activeSideMenuSlideBox = 2, $scope.expandMenu(!0)
        };
        $scope.verseTags = function () {
            console.log("verseTags called: " + $rootScope.currentId), $ionicScrollDelegate.$getByHandle("side-menu-left-content").scrollTop([!0]), $ionicSideMenuDelegate.toggleLeft(), $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(2), $rootScope.activeSideMenuSlideBox = 2
        };
        $scope.goTo = function (book, chapter, verse) {
            console.log("goTo: book - " + book + " chapter " + chapter + " verse " + verse), $scope.bibleMeta.book = book, $scope.bibleMeta.chapter = chapter, $scope.bibleMeta.verse = verse, $scope.renderBible(function () {
                $rootScope.currentId = $scope.bibles[0].verses[$scope.bibleMeta.verse - 1].id
            })
        };
        $scope.changeSideMenuSlide = function (index) {
            console.log("changeSideMenuSlide - " + index);
            var elem = document.getElementById("sideMenuButton-" + index);
            $ionicScrollDelegate.$getByHandle("scroll-sidemenu").scrollTo(elem.offsetLeft, 0, [!0]), $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(index), $ionicScrollDelegate.$getByHandle("side-menu-slide-" + index).scrollTop([!0])
        };
        $scope.sideMenuSlideChange = function (index) {
            console.log("left slide change made : " + index), $rootScope.activeSideMenuSlideBox = index, 1 === index && $scope.renderRefBible($rootScope.currentId, $rootScope.bibleVersion), $ionicScrollDelegate.$getByHandle("side-menu-slide-" + index).scrollTop([!0]), $timeout(function () {
                $ionicSlideBoxDelegate.$getByHandle("left-side-menu").update()
            })
        };
        $scope.searchKeyword = function (keyword) {
            console.log("searched keyword: " + keyword), console.log("searched keyword length: " + keyword.length);
            var language = $scope.meta.supportedVersionsMeta[$rootScope.bibleVersion].languageCode;
            console.log("language - " + language);
            var lengthCheck = 3;
            ("ko" === language || "zh" === language) && (lengthCheck = 2), angular.isDefined(keyword) && keyword.length >= lengthCheck ? $scope.renderSearchBible(keyword, $rootScope.bibleVersion) : UI.toast("KEYWORD_TOO_SHORT", "short", "center")
        };
        $scope.openAdvPanel = function () {
            $scope.meta.showAdvPanel = !0
        };
        $scope.resetAdvPanel = function () {
            $scope.meta.advancedSearches = [{
                keyword: "",
                classifier: "AND"
            }]
        };
        $scope.moreAdvancedSearch = function () {
            $scope.meta.advancedSearches.push({
                keyword: "",
                classifier: "AND"
            })
        };
        $scope.purchaseOrShare = function () {
            //$scope.productPro = Purchase.getProduct("pro"), $timeout(function () {
            //    $scope.purchaseOrShareAlert = UI.customAlert("GET_PRO", "templates/modules/custom-purchase-or-share.html", $scope)
            //})
        };
        $scope.purchaseOrShareToast = function () {
            UI.toast("GET_PRO", "short", "bottom")
        };
        $scope.purchaseProduct = function (productAlias) {
            if (console.log("Purchase -- purchaseProduct called with productAlias = " + productAlias), isDevice && $cordovaNetwork.isOnline()) {
                //var productId = Purchase.get(productAlias);
                //Purchase.purchase(productId, function () {
                //    console.log("callback after success purchse")
                //})
            } else UI.toast("PLEASE_GET_ONLINE", "short", "bottom")
        };
        $scope.onTap = function (e) {
            ionic.Platform.isIOS() && ($scope.barProgress = e.target.max / e.target.offsetWidth * (e.gesture.touches[0].screenX - e.target.offsetLeft))
        };
        $scope.showShare = function () {
            $scope.purchaseOrShareAlert.close(), $scope.expandMenu(!0), $location.url("share")
        };
        $scope.closePurchaseOrShare = function () {
            $scope.purchaseOrShareAlert.close()
        };
        $scope.shareToApp = function () {
            var message = $translate.instant("SHARE_FRIENDLY_MSG"),
                subject = $translate.instant("SHARE_FRIENDLY_HEADER");
            Share.toApp(message, subject, $scope.meta.app.website2, $scope.meta.app.hashtags, function () {
                UI.toast("SHARE_SUCCESSFULLY_SHARED", "short", "bottom")
            }, function () {
                UI.toast("SHARE_FAILED_SHARE", "short", "bottom")
            })
        };
        $scope.login = function () {
            $location.url("login")
        };
        $scope.loginAndCloseIntro = function () {
            $scope.nextIntro();
            $scope.login();
        };
        $scope.addTag = function () {
            $scope.expandMenu(!0);
            $location.url("tag");
        };
        $scope.viewTags = function () {
            $location.url("tags")
        };
        $scope.showTagVerses = function (tagId) {
            $location.path("/tagverse/" + tagId)
        };
        $scope.setIntroVersion = function (version) {
            console.log("setIntroVersion to " + version), -1 === $scope.meta.settings.introVersion.indexOf(parseInt(version)) && $scope.meta.settings.introVersion.push(parseInt(version)), Model.save($scope.meta.settings, "settings")
        };
        $scope.visit = function (key) {
            var url = $scope.meta.app[key];
            $cordovaInAppBrowser.open(url, "_system")
        };

        var hiddenTouch = 0;
        $scope.getHiddenFeature = function () {
            if (hiddenTouch += 1, 10 === hiddenTouch && (UI.simpleAlert("UUID: " + uuidIs, "ALERT", "OK", function () {
                    hiddenTouch = 0
                }), -1 !== bypassIds.indexOf(uuidIs) && isDevice)) {
                var option = {
                    id: "1001001",
                    title: $translate.instant("GUESS_BIBLE_VERSE"),
                    text: "Genesis 1:1",
                    data: "1:1:1:1001001"
                };
                cordova.plugins.notification.local.schedule(option)
            }
        };
        $scope.cacheProfileImage = function () {
            var targetUrl = File.getTargetPath() + "profile.jpg";
            "undefined" != typeof $scope.meta.user && null !== $scope.meta.user && $cordovaNetwork.isOnline() && $cordovaFileTransfer.download($scope.meta.user.get("picture"), targetUrl, {}, !0).then(function (result) {
                console.log("profile has been saved to " + angular.toJson(result)), console.log("profile url: " + result.nativeURL), $scope.meta.user_picture = result.nativeURL, Model.save($scope.meta.user_picture, "user_picture")
            }, function (err) {
                console.log("profile failed to save: " + angular.toJson(err))
            })
        };
        $scope.noRating = function () {
            UI.simpleConfirm("ARE_YOU_SURE", "INFO", function () {
                $scope.setIntroVersion(5), Analytics.track("RatingDeclined", {
                    uuid: uuidIs,
                    platform: platformIs,
                    language: $scope.meta.settings.language,
                    deviceLanguage: deviceLanguage
                })
            })
        };$scope.yesRating = function () {
            var url = Config.getStoreUrl();
            $cordovaInAppBrowser.open(url, "_system"), UI.simpleConfirm("DID_YOU_RATE", "INFO", function () {
                ParseFactory.extendPro(10, function (expiresAt) {
                    $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt), Model.save($rootScope.userProfile, "userprofile"), $scope.setIntroVersion(5), Analytics.track("RatingAccepted", {
                        uuid: uuidIs,
                        platform: platformIs,
                        language: $scope.meta.settings.language,
                        deviceLanguage: deviceLanguage,
                        expiresAt: "" + $rootScope.userProfile.expiresAt
                    }), UI.simpleAlert($rootScope.userProfile.expiresAt + " " + $translate.instant($filter("daysLeftLabel")($rootScope.userProfile.expiresAt)), "INFO", "OK", function () {
                    })
                }, function () {
                    UI.toast("RATE_FAILED", "short", "bottom")
                })
            })
        };
        $scope.shareToExtend = function () {
            $scope.meta.app.shareDayEnabled && ($scope.shareToExtendPopup = UI.customAlert("SHARE", "templates/modules/custom-share-to-extend.html", $scope))
        };
        $scope.shareToService = function (provider) {
            $scope.shareToExtendPopup.close(), Share.toService(provider, $scope.meta.app.website2, $scope.meta.app.hashtags, function () {
                console.log("successfully shared"), UI.simpleConfirm("DID_YOU_SHARE", "INFO", function () {
                    $scope.meta.app.shareDayLimit >= $scope.meta.settings.sharedCount ? ParseFactory.extendPro($scope.meta.app.shareDay, function (expiresAt) {
                        $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt), Model.save($rootScope.userProfile, "userprofile"), $rootScope.userProfile.expiresAt > 0 && ($rootScope.userProfile.isPro = !0), "undefined" == typeof $scope.meta.settings.sharedCount && ($scope.meta.settings.sharedCount = 0), $scope.meta.settings.sharedCount += 1, Model.save($scope.meta.settings, "settings"), UI.toast($rootScope.userProfile.expiresAt + " " + $translate.instant($filter("daysLeftLabel")($rootScope.userProfile.expiresAt)), "short", "bottom")
                    }, function () {
                        UI.toast("SHARE_FAILED_SHARE", "short", "bottom")
                    }) : UI.toast("SHARE_LIMIT_REACHED", "short", "bottom")
                })
            })
        };
        $scope.closeShareToService = function () {
            $scope.shareToExtendPopup.close()
        };
        $scope.$on("$ionicView.loaded", function () {
            console.log("view load event")
        });
        $scope.$on("$stateChangeStart", function (event, current, currentParams, previous) {
            console.log("previous.name: " + previous.name);console.log("current.name: " + current.name);
            "" !== previous.name && "home" === current.name && 1 === $scope.meta.device.allverse ? (console.log("swiper updating since current view is 'home'"), console.log("renderbible 003"), $scope.renderBible()) : ("books" === previous.name || "tag" === previous.name) && "home" === current.name && $scope.meta.device.allverse > 1 ? (console.log("calling render bible"), console.log("renderbible 004"), $scope.renderBible()) : $scope.expandMenu(!0), "tagverse" === previous.name && "home" === current.name && $scope.renderMemoryVerses($scope.meta.memoryVerses)
        })
    });

    ovModule.controller("homeCtrl", function ($css, $cordovaNetwork, $filter, $ionicBackdrop, $ionicPlatform, $ionicPopup, $ionicPosition, $ionicScrollDelegate, $ionicSideMenuDelegate, $ionicSlideBoxDelegate, $location, $rootScope, $scope, $timeout, $translate, $window, Analytics, Bible, Config, DB, Debug, File, Model, Share, UI) {

        debugger;

        -1 === $rootScope.versionIndex && ($rootScope.versionIndex = 0);
        isDevice || ($scope.$parent.bibleData.books = Bible.processBooks(Debug.books()));
        $scope.totalChapters = 0;
        $scope.totalVerses = 0;

        var collectHistory = function () {
            $rootScope.history = Model.collectHistory({
                book: $scope.$parent.bibleMeta.book,
                chapter: $scope.$parent.bibleMeta.chapter,
                verse: $scope.$parent.bibleMeta.verse,
                date: moment().format("MMMM Do YYYY, h:mm:ss a")
            });
            console.log("$scope.$parent.history: " + angular.toJson($scope.$parent.history))
        };


    //$scope.formModel = {dada:1};
    //
    //$scope.changeVersionDdl = function (index) {
    //    index = parseInt($scope.formModel.dada);
    //    //$scope.changeVersion(index);
    //    //console.log("inside changeVersion - rootScope.bibleVersion - " + $rootScope.bibleVersion), 2 === $scope.meta.device.allverse ? ($ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").update(), $ionicSlideBoxDelegate.$getByHandle("bible-verse-slides").slide(index), $scope.slideToListVerse()) : 3 === $scope.meta.device.allverse ? ($rootScope.bibleVersion = $filter("reverse")($scope.bibleMeta.versions)[index], $scope.processSideBySide()) : $scope.slideToVersion(index)
    //}

        $rootScope.customAlert = null;
        $rootScope.startRecognition = function () {
            $rootScope.userProfile.isPro || $rootScope.userProfile.isProPurchased ? ($rootScope.recognizedText = "", $rootScope.isRecognizedFailed = !1, $rootScope.customAlert = UI.customAlert("SAY", "templates/modules/custom-recognition.html", $rootScope), isDevice ? $scope.$parent.recognition.start() : $rootScope.recognizedText = "Sample Text") : $scope.$parent.purchaseOrShare()
        };
        $rootScope.restartRecognition = function () {
            ($rootScope.recognizedText.length > 0 || $rootScope.isRecognizedFailed) && ($rootScope.recognizedText = "", $rootScope.isRecognizedFailed = !1, isDevice ? $scope.$parent.recognition.start() : $rootScope.recognizedText = "Sample Text")
        };
        $rootScope.cancelRecognition = function () {
            isDevice && $scope.$parent.recognition.abort(), $rootScope.customAlert.close()
        };
        -1 !== $scope.$parent.meta.settings.introVersion.indexOf(1) && -1 === $scope.$parent.meta.settings.introVersion.indexOf(2) && UI.openModal("templates/modules/modal-intro-home.html", $scope, function (modal) {
            $scope.modalIntroHome = modal, $scope.modalIntroHome.show(), $scope.modalIntroHomeClose = function () {
                $scope.$parent.setIntroVersion(2), $scope.modalIntroHome.hide()
            }
        });
        $rootScope.allVerticalSlides = [];
        $rootScope.allHorizontalSlides = [];

         $rootScope.$watch("currentVerse", function (newValue, oldValue, scope) {
            if (oldValue !== newValue) {
                console.log("currentVerse changed to :" + newValue), console.log("bibles length - " + $scope.bibles.length), console.log("bibles - " + angular.toJson(scope.bibles)), $scope.$parent.bibleMeta.verse = newValue + 1, Model.save($scope.$parent.bibleMeta, "bible_meta"), collectHistory();
                var dimensions = {
                    version: $rootScope.bibleVersion,
                    bookDisplay: $translate.instant($filter("getBookName")($scope.$parent.bibleMeta.book)),
                    book: "" + $scope.$parent.bibleMeta.book,
                    chapter: "" + $scope.$parent.bibleMeta.chapter,
                    verse: "" + $scope.$parent.bibleMeta.verse,
                    uuid: uuidIs,
                    view: "" + $scope.$parent.meta.device.allverse
                };
                Analytics.track("ReadBible", dimensions)
            }
            $scope.$parent.slideToVerse(newValue)
        });


         $rootScope.$watch("bibleVersion", function (newValue, oldValue) {
            if (console.log("WATCH: bibleVersion: " + newValue), oldValue !== newValue) {
                $scope.$parent.bibleMeta.version = newValue, Model.save($scope.$parent.bibleMeta, "bible_meta"), collectHistory(), $rootScope.searchedVerses = [], $rootScope.searchedKeyword = "";
                var bibleName = "";
                angular.forEach($scope.$parent.meta.supportedVersions, function (val) {
                    angular.forEach(val, function (version) {
                        version.bibleCode === newValue && (bibleName = version.bibleName)
                    })
                }), UI.toast(bibleName, "short", "bottom")
            }
        });
        $rootScope.$watch("currentId", function (newValue) {
            console.log("WATCH: currentId - " + newValue)
        });
        $rootScope.$watch("currentIsEnd", function (newValue, oldValue) {
            oldValue !== newValue && newValue === !0 && (UI.toast("MSG_END_OF_VERSE", "short", "bottom"), $rootScope.currentIsEnd = !1)
        });
        $scope.showBibleVersions = function () {
            $scope.$parent.updateSupportVersionsProduct(), UI.openModal("templates/modules/modal-bible-versions.html", $scope, function (modal) {
                $scope.modalBibleVersions = modal, $scope.modalBibleVersions.show()
            })
        };
        $scope.closeBibleVersions = function () {
            if ($scope.$parent.bibleMeta.versions.length > 0 && $scope.$parent.bibleMeta.versions.length < 5) {
                var dimensions = {
                    versions: $scope.$parent.bibleMeta.versions.join(","),
                    uuid: uuidIs,
                    language: $scope.$parent.meta.settings.language
                };
                Analytics.track("BibleVersions", dimensions);
                var modal = $scope.modalBibleVersions.hide();
                modal.then(function () {
                    $scope.$parent.renderBible()
                })
            } else 0 === $scope.$parent.bibleMeta.versions.length ? UI.toast("MSG_CHOOSE_AT_LEAST_ONE_VERSION", "short", "center") : $scope.$parent.bibleMeta.versions.length > 4 && UI.toast("MSG_VERSIONS_ALLOWED", "short", "center")
        };

         $scope.downloadVersion = function (version) {
            if (console.log("downloadVersion called"), console.log(angular.toJson(version)), !version.is_downloading)
                if (version.supported) $scope.selectedBible = version.bibleName, $scope.selectedVersion = version, !version.iap || version.product.owned ? UI.confirm("WARNING", "templates/modules/confirm-download.html", "OK", $scope, function () {
                    version.is_downloading = !0, isDevice ? File.download(version.bibleCode, function () {
                        $scope.bibleMeta.downloads.push(version.bibleCode), Model.save($scope.$parent.bibleMeta, "bible_meta"), collectHistory(), version.is_downloading = !1, version.is_update_ready = !1, $scope.$parent.meta.localBibleVersions[version.bibleCode] = version.version, Model.save($scope.$parent.meta.localBibleVersions, "localBibleVersions"), angular.forEach($scope.$parent.meta.supportedVersions, function (ver) {
                            angular.forEach(ver, function (val) {
                                val.bibleCode === version.version && (val.is_update_ready = !1)
                            })
                        }), Model.save($scope.$parent.meta.supportedVersions, "supportedVersions")
                    }, function () {
                        version.is_downloading = !1, UI.toast("SOMETHING_WRONG", "short", "center")
                    }) : $timeout(function () {
                        version.is_downloading = !1
                    }, 1e3)
                }) : version.product.owned || ($scope.$parent.confirmPurchaseVersion = UI.confirm("PURCHASE", "templates/modules/confirm-purchase-version.html", "OK", $scope, function () {
                    Purchase.purchase(version.product.id, function () {
                        console.log("Purchase - in app purchase triggered"), UI.simpleAlert("AFTER_PURCHASE", "INFO", "OK", function () {
                        })
                    }), isDevice || (version.product.owned = !0)
                }));
                else {
                    if ("undefined" == typeof version.count ? version.count = 1 : version.count += 1, version.count > 10) {
                        $rootScope.secretkey = "";
                        var secretPopup = $ionicPopup.show({
                            template: '<input type="password" ng-model="$root.secretkey">',
                            title: $translate.instant("ENTER_SECRET"),
                            cssClass: "oneverse-popup",
                            buttons: [{
                                text: $translate.instant("CANCEL")
                            }, {
                                text: "<b>" + $translate.instant("SUBMIT") + "</b>",
                                type: "button-calm",
                                onTap: function (e) {
                                    return $rootScope.secretkey !== $scope.$parent.meta.app.secret ? (e.preventDefault(), !1) : !0
                                }
                            }]
                        });
                        secretPopup.then(function (res) {
                            res && (version.supported = !0)
                        })
                    }
                    UI.toast("NOT_SUPPORTED_VERSION", "short", "bottom")
                }
        };

         $scope.versionHelp = function () {
            UI.alert("HELP", "templates/modules/alert-version-help.html", $scope)
        };

         $scope.showBooks = function () {
            $location.url("books")
        };

         $scope.toggleActionSheet = function () {
            UI.actionSheet("MORE", "CANCEL", [{
                text: $translate.instant("SELECT_VERSIONS") + "<span class='icon ion-ios-book-outline'></span>"
            }, {
                text: $translate.instant("COMPARE_ALL_VERSIONS") + "<span class='icon ion-ios-analytics'></span>"
            }, {
                text: $translate.instant("VIEW_ALL_TAGS") + "<span class='icon ion-ios-pricetags-outline'></span>"
            }, {
                text: $translate.instant("TAG_ADD") + "<span class='icon ion-ios-pricetag-outline'></span>"
            }, {
                text: "Add To Favourites <span class='icon ion-android-star'></span>"
            }, {
                text: $translate.instant("CROSS_REFERENCE") + "<span class='icon ion-ios-list-outline'></span>"
            }, {
                text: $translate.instant("SHARE_VERSE") + "<span class='icon ion-android-share-alt'></span>"
            }], function (idx) {
                switch (idx) {
                    case 0:
                        $scope.showBibleVersions();
                        break;
                    case 1:
                        $location.url("compareall");
                        break;
                    case 2:
                        $scope.$parent.viewTags();
                        break;
                    case 3:
                        $scope.$parent.addTag();
                        break;
                    case 4:
                        $scope.$parent.verseDetail();
                        break;
                    case 5:
                        $scope.onHold($rootScope.currentId)
                }
            })
        };

         $scope.toggleRightMenu = function () {
            isIOS || (document.getElementById("ov-side-menu-left").style.display = "none"), $ionicSideMenuDelegate.toggleRight(), $timeout(function () {
                var elem = document.getElementById("main-verse-selection-" + $rootScope.currentVerse);
                $ionicScrollDelegate.$getByHandle("scroll-sidemenu-right").scrollTo(0, elem.offsetTop, [!0])
            })
        };


         $scope.toggleLeftMenu = function () {
            isIOS || (document.getElementById("ov-side-menu-right").style.display = "none"), $ionicScrollDelegate.$getByHandle("side-menu-left-content").scrollTop([!0]), $ionicScrollDelegate.$getByHandle("side-menu-slide-0").scrollTop([!0]), $ionicSideMenuDelegate.toggleLeft(), $rootScope.activeSideMenuSlideBox = 0, $ionicSlideBoxDelegate.$getByHandle("left-side-menu").slide(0);
            var elem = document.getElementById("sideMenuButton-0");
            $ionicScrollDelegate.$getByHandle("scroll-sidemenu").scrollTo(elem.offsetLeft, 0, [!0])
        };

         $scope.isRightMenuOpened = function () {
            return $ionicSideMenuDelegate.isOpenRight()
        };

         $rootScope.multimode = !1;
        $rootScope.multimodeSelected = [];
        $scope.onHold = function (holdId, forceClose) {
            console.log("on hold"), console.log($rootScope.multimodeSelected), $rootScope.currentId = holdId, $rootScope.multimode = !$rootScope.multimode, "undefined" != typeof forceClose && ($rootScope.multimode = !1), $rootScope.multimodeSelected = $rootScope.multimode ? ["" + holdId] : [], $scope.$parent.meta.device.allverse > 1 && $scope.$parent.slideToListVerse(), UI.vibrate(100)
        };

         $scope.closeOnHold = function () {
            UI.toast("CANCELLED", "short", "bottom"), $scope.onHold($rootScope.currentId)
        };

         $scope.holdToCopy = function (verse, verseId) {
            console.log("holdToCopy - verse - " + angular.toJson(verse)), console.log("holdToCopy - verseId - " + angular.toJson(verseId)), verseId = verseId || null, verseId && (verseId = verseId.toString()), UI.vibrate(100);
            var chapter = "undefined" != typeof verse ? verse.c : null,
                verseNumber = "undefined" != typeof verse ? verse.v : null,
                bookNumber = "undefined" != typeof verse ? verse.b : null;
            verseId && (verseNumber = parseInt(verseId.substr(verseId.length - 3)), chapter = parseInt(verseId.substr(verseId.length - 6, 3)), bookNumber = verseId.replace(verseId.substr(verseId.length - 6), "")), console.log("bookNumber: " + bookNumber), console.log("verseNumber: " + verseNumber), bookNumber = parseInt(bookNumber) < 10 ? "0" + bookNumber : bookNumber;
            var ref = $translate.instant("BOOK_" + bookNumber) + " " + chapter + ":" + verseNumber,
                message = "(" + ref + ") " + verse.t;
            Share.toClipboard(message, $scope.$parent.meta.app.website2, function () {
                UI.toast("MSG_CLIPBOARD_SUCCESS", "short", "bottom")
            }, function () {
                UI.toast("MSG_CLIPBOARD_ERROR", "short", "bottom")
            })
        };

         $scope.shareVerse = function (index) {
            if ($rootScope.multimodeSelected.length > 0) {
                var messageToShare = "",
                    messageBibleVerse = "",
                    bibleVersionName = $scope.$parent.meta.supportedVersionsMeta[$rootScope.bibleVersion].bibleName,
                    bibleVersionSupported = $scope.$parent.meta.supportedVersionsMeta[$rootScope.bibleVersion].supported;
                bibleVersionName = bibleVersionSupported ? " ** " + bibleVersionName : "";
                var headerToShare = "One Verse " + $translate.instant("BIBLE") + bibleVersionName + "\n\n";
                console.log("$scope.$parent.meta.supportedVersionsMeta: " + angular.toJson($scope.$parent.meta.supportedVersionsMeta));
                var db = DB.open($rootScope.bibleVersion);
                0 === index || 1 === index || 3 === index ? DB.select(db, "t_" + $rootScope.bibleVersion, "b,c,v,t", "WHERE id in (" + $rootScope.multimodeSelected.join(",") + ") ORDER BY id", function (result) {
                    angular.forEach(result, function (val, key) {
                        var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                        0 === key && (3 !== index && (messageBibleVerse += "("), messageBibleVerse += $translate.instant("BOOK_" + bookNumber) + " " + val.c + ":", messageBibleVerse += val.v, 1 == result.length ? 3 !== index && (messageBibleVerse += ")") : (messageBibleVerse += "~" + result[result.length - 1].v, 3 !== index && (messageBibleVerse += ")")), 3 !== index && (messageToShare += messageBibleVerse), messageToShare += "\n"), messageToShare += 3 === index ? "<span class='bible-verse'>" + val.v + "</span>" : val.v, messageToShare += " " + val.t + " \n"
                    }), 0 === index ? Share.toClipboard(messageToShare + headerToShare, $scope.$parent.meta.app.website2, function () {
                        $scope.onHold($rootScope.currentId, !0)
                    }, function () {
                        $scope.onHold($rootScope.currentId, !0)
                    }) : 1 === index ? Share.toApp(messageToShare + headerToShare, headerToShare, $scope.$parent.meta.app.website2, "", function () {
                        $scope.onHold($rootScope.currentId, !0), UI.toast("SHARE_SUCCESSFULLY_SHARED", "short", "bottom")
                    }, function () {
                        $scope.onHold($rootScope.currentId, !0), UI.toast("SHARE_FAILED_SHARE", "short", "bottom")
                    }) : 3 === index && ($scope.messageBibleVerse = messageBibleVerse, $scope.messageToShare = messageToShare, UI.openModal("templates/modules/modal-screenshot-mode.html", $scope, function (modal) {
                        $scope.modalScreenshotMode = modal, $scope.modalScreenshotMode.show(), UI.toast("MSG_SLIDE_LEFT_RIGHT_CHANGE", "short", "bottom")
                    }))
                }) : 2 === index ? DB.select(db, "t_" + $rootScope.bibleVersion, "b,c,v,t", "WHERE id in (" + $rootScope.multimodeSelected.join(",") + ") ORDER BY id", function (result) {
                    angular.forEach(result, function (val) {
                        var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                        messageToShare += "[" + $translate.instant("BOOK_" + bookNumber) + " " + val.c + ":" + val.v + "] " + val.t
                    }), Share.toFacebook(messageToShare, headerToShare, function () {
                        $location.url("home"), ParseFactory.extendOneDay(function (expiresAt) {
                            console.log("Check whether extended: " + expiresAt), $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt), Model.save($rootScope.userProfile, "userprofile"), UI.toast($rootScope.userProfile.expiresAt + " " + $translate.instant($filter("daysLeftLabel")($rootScope.userProfile.expiresAt)), "short", "bottom")
                        }, function () {
                            UI.toast("SHARE_FAILED_SHARE", "short", "center")
                        })
                    }, function () {
                        UI.toast("SHARE_FAILED_SHARE", "short", "center")
                    })
                }) : UI.toast("MSG_CHOOSE_AT_LEAST_ONE_VERSE", "short", "buttom")
            } else UI.toast("PLEASE_SELECT_AT_LEAST_ONE", "short", "bottom")
        };
        $scope.closeScreenshotMode = function () {
            $scope.modalScreenshotMode.hide(), $scope.closeOnHold()
        };
        $scope.nowTakeScreenshot = !1;
        $scope.takeScreenshot = function () {
            $scope.nowTakeScreenshot = !0, UI.toast("MSG_TAKE_SCREENSHOT", "short", "bottom"), $timeout(function () {
                $scope.nowTakeScreenshot = !1
            }, 1e4)
        };
        $scope.showShare = function () {
            $location.url("share")
        };
        $scope.bibleVersionChangeSlide = function (index) {
            console.log("slide changed"), $rootScope.bibleVersion = $filter("reverse")($scope.bibleMeta.versions)[index]
        };
        $scope.touchedVerse = function (currentId, currentVerse) {
            $rootScope.currentId = currentId, $rootScope.currentVerse = currentVerse - 1
        };
        $scope.setAllVerseHeight = function () {
            var height = $window.innerHeight - 145;
            return {
                height: height + "px"
            }
        };
    });

    ovModule.controller("shareCtrl", function ($ionicScrollDelegate, $filter, $location, $rootScope, $scope, $timeout, $translate, DB, Model, ParseFactory, Share, UI) {
        $scope.selectedBibleVerses = [], $scope.selectedVerses = [], angular.forEach($scope.$parent.bibles, function (val) {
            val.version === $rootScope.bibleVersion && ($scope.selectedBibleVerses = val.verses, $timeout(function () {
                var elem = document.getElementById("bible-share-" + ($rootScope.currentVerse + 1));
                $ionicScrollDelegate.$getByHandle("bible-share-handle").scrollTo(0, elem.offsetTop, [!0])
            }))
        }), angular.forEach($scope.selectedBibleVerses, function (val) {
            val.v === $rootScope.currentVerse + 1 && ($scope.selectedVerses = [val.id])
        }), $scope.closeShare = function () {
            $location.url("home")
        }, $scope.shareVerse = function () {
            $scope.selectedVerses.length > 0 && UI.actionSheet("SHARE", "CANCEL", [{
                text: $translate.instant("SHARE_COPY_TO_CLIPBOARD") + "<span class='icon ion-clipboard'></span>"
            }, {
                text: $translate.instant("SHARE_VIA_ANY_APP") + "<span class='icon ion-android-apps'></span>"
            }], function (index) {
                var messageToShare = "",
                    bibleVersionName = $scope.$parent.meta.supportedVersionsMeta[$rootScope.bibleVersion].bibleName,
                    bibleVersionSupported = $scope.$parent.meta.supportedVersionsMeta[$rootScope.bibleVersion].supported;
                bibleVersionName = bibleVersionSupported ? " ** " + bibleVersionName : "";
                var headerToShare = "\n\nOne Verse " + $translate.instant("BIBLE") + bibleVersionName;
                console.log("$scope.$parent.meta.supportedVersionsMeta: " + angular.toJson($scope.$parent.meta.supportedVersionsMeta));
                var db = DB.open($rootScope.bibleVersion);
                0 === index || 1 === index ? DB.select(db, "t_" + $rootScope.bibleVersion, "b,c,v,t", "WHERE id in (" + $scope.selectedVerses.join(",") + ") ORDER BY id", function (result) {
                    angular.forEach(result, function (val, key) {
                        var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                        0 === key && (messageToShare += "(" + $translate.instant("BOOK_" + bookNumber) + " " + val.c + ":", messageToShare += val.v, messageToShare += 1 == result.length ? ")" : "~" + result[result.length - 1].v + ")", messageToShare += "\n"), messageToShare += val.v + " " + val.t + " \n"
                    }), 0 === index ? Share.toClipboard(messageToShare + headerToShare, $scope.$parent.meta.app.website2, function () {
                        $location.url("home")
                    }, function () {
                        $location.url("home")
                    }) : 1 === index && Share.toApp(messageToShare, headerToShare, $scope.$parent.meta.app.website2, $scope.$parent.meta.app.hashtags, function () {
                        $location.url("home"), UI.toast("SHARE_SUCCESSFULLY_SHARED", "short", "center")
                    }, function () {
                        UI.toast("SHARE_FAILED_SHARE", "short", "center"), $location.url("home")
                    })
                }) : 2 === index ? DB.select(db, "t_" + $rootScope.bibleVersion, "b,c,v,t", "WHERE id in (" + $scope.selectedVerses.join(",") + ") ORDER BY id", function (result) {
                    angular.forEach(result, function (val) {
                        var bookNumber = parseInt(val.b) < 10 ? "0" + val.b : val.b;
                        messageToShare += "[" + $translate.instant("BOOK_" + bookNumber) + " " + val.c + ":" + val.v + "] " + val.t
                    }), Share.toFacebook(messageToShare, headerToShare, function () {
                        $location.url("home"), ParseFactory.extendPro(1, function (expiresAt) {
                            console.log("Check whether extended: " + expiresAt), $rootScope.userProfile.expiresAt = $filter("daysLeft")(expiresAt), Model.save($rootScope.userProfile, "userprofile"), UI.toast($rootScope.userProfile.expiresAt + " " + $translate.instant($filter("daysLeftLabel")($rootScope.userProfile.expiresAt)), "short", "bottom")
                        }, function () {
                            UI.toast("SHARE_FAILED_SHARE", "short", "center")
                        })
                    }, function () {
                        UI.toast("SHARE_FAILED_SHARE", "short", "center")
                    })
                }) : UI.toast("MSG_CHOOSE_AT_LEAST_ONE_VERSE", "short", "buttom")
            })
        }
    });

    ovModule.controller("tagCtrl", function ($location, $rootScope, $scope, Analytics, DB, Debug, Model, UI) {
        $scope.closeTag = function () {
            $location.url("home")
        }, $scope.tags = [], $rootScope.tagName = "", $rootScope.tagNote = "", $rootScope.tagQuery == $rootScope.currentId && ($scope.tags = angular.copy($rootScope.tags)), $scope.allTags = [];
        var getAllTags = function () {
            if (isDevice) {
                var db = DB.open("oneverse");
                DB.select(db, "Tag", "*", "WHERE isDeleted = 'false'", function (result) {
                    $scope.allTags = result
                })
            } else $scope.allTags = angular.fromJson(Debug.allTags())
        };
        getAllTags(), $scope.addFromExisting = function (tag) {
            var allTagNames = $scope.tags.map(function (obj) {
                return obj.tagName
            });
            -
                1 === allTagNames.indexOf(tag.tagName) && ($scope.tags.push(tag), $rootScope.tagName = "", $rootScope.tagNote = "")
        }, $scope.generateTag = function (tagName, tagNote) {
            if (tagName = angular.lowercase(tagName), Analytics.track("TagAdded", {
                    tagName: tagName,
                    tagNote: tagNote,
                    uuid: uuidIs,
                    platform: platformIs
                }), tagName.length > 1 && tagName.length <= 20) {
                var allTagNames = [];
                angular.forEach($scope.tags, function (val) {
                    allTagNames.push(val.tagName)
                }), -1 === allTagNames.indexOf(tagName) ? $scope.tags.push({
                    tagName: tagName,
                    tagNote: tagNote
                }) : UI.toast("TAG_DUPLICATE_FOUND", "short", "bottom")
            } else UI.toast("TAG_TOO_LONG_OR_SHORT", "short", "bottom");
            $rootScope.tagName = "", $rootScope.tagNote = ""
        }, $scope.markForDeletion = [], $scope.deleteTag = function (index) {
            $scope.tags[index].hasOwnProperty("id") && $scope.markForDeletion.push($scope.tags[index]), $scope.tags.splice(index, 1)
        }, $scope.tagFilter = function (query) {
            return function (item) {
                return "undefined" != typeof query ? -1 !== item.tagName.toLowerCase().indexOf(query.toLowerCase()) : !0
            }
        }, $scope.tagsFilter = function () {
            return function (item) {
                var foundTag = !0;
                return angular.forEach($scope.tags, function (tag) {
                    tag.tagName.toLowerCase() == item.tagName.toLowerCase() && (foundTag = !1)
                }), foundTag
            }
        }
    });

    ovModule.controller("tagsCtrl", function ($location, $scope, DB, Debug) {
        $scope.tagQuery = "";
        $scope.closeTags = function () {
            $location.url("home")
        }, $scope.allTags = [];
        var getAllTags = function () {
            if (isDevice) {
                var db = DB.open("oneverse");
                DB.select(db, "Tag", "*", "WHERE isDeleted = 'false'", function (result) {
                    $scope.allTags = result
                })
            } else $scope.allTags = angular.fromJson(Debug.allTags())
        };
        getAllTags(), $scope.tagFilter = function (query) {
            return function (item) {
                return "undefined" != typeof query ? -1 !== item.tagName.toLowerCase().indexOf(query.toLowerCase()) : !0
            }
        }
    });

    ovModule.controller("tagverseCtrl", function ($filter, $ionicPopover, $ionicPopup, $location, $rootScope, $scope, $stateParams, $timeout, $translate, DB, UI) {
        var tagId = $stateParams.tagId;
        console.log("tagId: " + tagId), $scope.showReorder = !1, $scope.tagCheckbox = !1;
        var loadVerses = function () {
            console.log("loadVerses called");
            var db = DB.open("oneverse");
            DB.select(db, "tag", "*", "WHERE id = '" + tagId + "' AND isDeleted = 'false'", function (resultOne) {
                console.log("resultOne: " + angular.toJson(resultOne)), $scope.tag = resultOne[0], $scope.tagCheckbox = -1 !== $scope.$parent.meta.memoryVerses.indexOf($scope.tag.id), DB.select(db, "tagVerse", "*", "WHERE tagId = '" + tagId + "' AND isDeleted = 'false' ORDER BY id DESC", function (result) {
                    var bibleIds = result.map(function (obj) {
                            return obj.bibleId
                        }).join(","),
                        bibleVersion = $rootScope.bibleVersion,
                        versionDB = DB.open(bibleVersion);
                    DB.select(versionDB, "t_" + bibleVersion, "id, b, c, v, t", "WHERE id in (" + bibleIds + ")", function (result2) {
                        console.log("SQL: found verses - " + angular.toJson(result2)), $scope.$$phase ? $scope.tagverses = result2 : $scope.$apply(function () {
                            $scope.tagverses = result2
                        })
                    })
                })
            })
        };
        $scope.toggleNoti = function (tagId, checkbox) {
            console.log("tagId - " + tagId + " checkbox - " + checkbox);
            var findIndex = $scope.$parent.meta.memoryVerses.indexOf(tagId);
            -
                1 == findIndex ? $scope.$parent.meta.memoryVerses.push(tagId) : $scope.$parent.meta.memoryVerses.splice(findIndex, 1), console.log("$scope.$parent.meta.memoryVerses - " + $scope.$parent.meta.memoryVerses)
        }, $ionicPopover.fromTemplateUrl("templates/modules/popover-tagverse.html", {
            scope: $scope
        }).then(function (popover) {
            $scope.popover = popover
        }), isDevice ? loadVerses() : ($scope.tag = {
            tagName: "Navigator Memory Verses 50",
            id: "2842322"
        }, $scope.tagverses = [{
            id: 43001003,
            b: 43,
            c: 1,
            v: 3,
            t: "만물이 그로 말미암아 지은 바 되었으니 지은 것이 하나도 그가 없이는 된 것이 없느니라\r\n"
        }, {
            id: 43001009,
            b: 43,
            c: 1,
            v: 9,
            t: "참 빛 곧 세상에서 각 사람에게 비추는 빛이 있었나니\r\n"
        }]), $scope.toggleReorder = function () {
            $scope.showReorder = !$scope.showReorder
        }, $scope.closeTagVerse = function () {
            $location.url("home")
        }, $scope.printTag = function () {
            if ($scope.popover.hide(), $rootScope.userProfile.isPro || $rootScope.userProfile.isProPurchased) {
                var page = "<h2 style='text-align: center;'>" + $scope.tag.tagName + "(" + $scope.tagverses.length + ")</h2>";
                page += "<div style='text-align: right'>" + new Date + "</div><br><br>", angular.forEach($scope.tagverses, function (verse) {
                    page += "<div>", page += "<h4 style='display: inline;'>" + $translate.instant($filter("getBookName")(verse.b)) + " " + verse.c + ":" + verse.v + "</h4>&nbsp;&nbsp;", page += verse.t, page += "</div>"
                }), page += "<br><br><h6 style='text-align: center'>" + $translate.instant("ONE_VERSE") + " " + $translate.instant("BIBLE") + " - http://www.onever.se</h6>", cordova.plugins.printer.isAvailable(function (isAvailable) {
                    isAvailable ? cordova.plugins.printer.print(page, "Document.html", function () {
                        UI.toast("DONE", "short", "bottom")
                    }) : UI.toast("NOT_SUPPORTED", "short", "bottom")
                })
            } else $scope.$parent.purchaseOrShare()
        }, $scope.deleteTag = function () {
            $scope.popover.hide(), UI.confirm("ALERT", "templates/modules/confirm-delete-tag.html", "OK", $scope, function () {
                if (isDevice) {
                    var db = DB.open("oneverse");
                    DB.update(db, "tagVerse", "isDeleted = 'true'", "tagId = '" + tagId + "'", function () {
                    }), DB.update(db, "tag", "isDeleted = 'true'", "id = '" + tagId + "'", function () {
                    })
                }
                $location.url("home")
            })
        }, $scope.editTag = function () {
            $scope.popover.hide(), $rootScope.tagNameClone = angular.copy($scope.tag.tagName);
            var editTagPopup = $ionicPopup.show({
                template: '<input type="text" ng-model="$root.tagNameClone">',
                title: $translate.instant("EDIT"),
                cssClass: "oneverse-popup",
                scope: $scope,
                buttons: [{
                    text: $translate.instant("CANCEL"),
                    onTap: function () {
                        return !1
                    }
                }, {
                    text: "<b>" + $translate.instant("SUBMIT") + "</b>",
                    type: "button-calm",
                    onTap: function () {
                        return !0
                    }
                }]
            });
            editTagPopup.then(function (res) {
                if (res) {
                    var db = DB.open("oneverse");
                    if (console.log("$rootScope.tagNameClone: " + $rootScope.tagNameClone), $rootScope.tagNameClone = angular.lowercase($rootScope.tagNameClone.trim()), !($rootScope.tagNameClone.length > 1 && $rootScope.tagNameClone.length <= 20)) return UI.toast("TAG_TOO_LONG_OR_SHORT", "short", "bottom"), !1;
                    DB.update(db, "tag", "tagName = '" + $rootScope.tagNameClone + "', syncedAt = NULL", "id = '" + tagId + "'", function (resTag) {
                        console.log(angular.toJson(resTag)), 1 === resTag.rowsAffected && (console.log("updated completed"), $scope.tag.tagName = angular.copy($rootScope.tagNameClone))
                    })
                }
            })
        }, $scope.deleteVerse = function (verse, idx) {
            UI.confirm("ALERT", "templates/modules/confirm-delete-verse.html", "OK", $scope, function () {
                console.log("trying to delete : " + angular.toJson(verse));
                var db = DB.open("oneverse");
                DB.update(db, "tagVerse", "isDeleted = 'true'", "tagId = '" + tagId + "' AND bibleId = '" + verse.id + "'", function (resVerse) {
                    console.log("SQL: updated - " + angular.toJson(resVerse)), DB.select(db, "tagVerse", "*", "WHERE tagId = '" + tagId + "' AND isDeleted = 'false'", function () {
                        console.log("SQL : if there's no verses attached, then should delete the tag"), 0 === resVerse.length ? (console.log("no result found, so deleting tag"), DB.update(db, "tag", "isDeleted = 'true'", "id = '" + tagId + "'", function (resUpdate) {
                            console.log("deleted tag : " + angular.toJson(resUpdate)), 1 === resUpdate.rowsAffected && (console.log("change to home"), $timeout(function () {
                                $location.url("home")
                            }))
                        })) : (console.log("$scope.tagverses - " + angular.toJson($scope.tagverses)), console.log("idx - " + idx), $scope.$$phase ? $scope.tagverses.splice(idx, 1) : $scope.$apply(function () {
                            $scope.tagverses.splice(idx, 1)
                        }), console.log("after splice: " + angular.toJson($scope.tagverses)))
                    })
                })
            })
        }, $scope.goToVerse = function (b, c, v) {
            $scope.$parent.goTo(b, c, v), $location.url("home")
        }
    });